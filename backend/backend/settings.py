"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
import logging
from datetime import timedelta
import pyodbc

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env
dotenv_path = os.path.join(BASE_DIR, '.env')
load_dotenv(dotenv_path)

# Set Azure OpenAI environment variables if they don't exist
if 'AZURE_OPENAI_API_KEY' not in os.environ:
    os.environ['AZURE_OPENAI_API_KEY'] = 'your_api_key_here'  # Replace with your actual API key
if 'AZURE_OPENAI_ENDPOINT' not in os.environ:
    os.environ['AZURE_OPENAI_ENDPOINT'] = 'https://your-resource-name.openai.azure.com/'  # Replace with your actual endpoint
if 'AZURE_OPENAI_API_VERSION' not in os.environ:
    os.environ['AZURE_OPENAI_API_VERSION'] = '2023-05-15'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-default-key-for-development')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True') == 'True'

ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')
CSRF_TRUSTED_ORIGINS = os.getenv('CSRF_TRUSTED_ORIGINS',
                                 'http://localhost,http://localhost:8000,http://localhost:80,http://localhost:5173').split(',')
CORS_ALLOWED_ORIGINS = os.getenv('CORS_ALLOWED_ORIGINS',
                                 'http://localhost,http://localhost:8000,http://localhost:80,http://localhost:5173').split(',')
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'users',
    'chatbot',
    'rest_framework.authtoken',
    'authentication',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
LOGIN_REDIRECT_URL = 'chatAPI'
LOGOUT_REDIRECT_URL = 'login'
AUTH_USER_MODEL = 'users.CustomUser'

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

APPEND_SLASH = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
# Add this line to your settings.py
AUTH_USER_MODEL = 'users.CustomUser'

# Django REST Framework settings
# https://www.django-rest-framework.org/api-guide/settings/
REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'user': '1000/day',  # Adjust the rate limit as needed
    },
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
}

# Add CORS settings
CORS_ALLOW_ALL_ORIGINS = True
CORS_ORIGIN_ALLOW_ALL = True  # Additional setting for older versions
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# Also add specific origins to be extra safe
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:5173",
    "http://127.0.0.1:5173",
]

from datetime import timedelta
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
}

# Azure SQL Database connection string
AZURE_SQL_CONNECTION_STRING = os.environ.get('AZURE_SQL_CONNECTION_STRING', 
    'Driver={ODBC Driver 17 for SQL Server};'
    'Server=your-server.database.windows.net;'
    'Database=your-database;'
    'Uid=your-username;'
    'Pwd=your-password;'
)

# Fix the connection string format to ensure it works with pyodbc
if 'AZURE_SQL_CONNECTION_STRING' in os.environ:
    # Clean up the connection string to ensure it's properly formatted
    connection_string = os.environ.get('AZURE_SQL_CONNECTION_STRING')
    
    # Make sure driver name has proper closing brace
    if 'Driver={' in connection_string and '};' not in connection_string:
        # Fix missing closing brace in driver section
        driver_section = connection_string.split('Driver={')[1].split(';')[0]
        connection_string = connection_string.replace(
            f"Driver={{{driver_section};", 
            f"Driver={{{driver_section}}};")
        logger.info(f"Fixed driver brace in connection string")
    
    # Use the exact driver name that's available on the system
    if 'ODBC Driver 18 for SQL Server' in pyodbc.drivers():
        connection_string = connection_string.replace('{ODBC Driver 17 for SQL Server}', '{ODBC Driver 18 for SQL Server}')
    
    # Ensure there are no curly braces around the password
    connection_string = connection_string.replace('Pwd={', 'Pwd=').replace('};', ';')
    
    # Set the cleaned connection string
    AZURE_SQL_CONNECTION_STRING = connection_string
    logger = logging.getLogger(__name__)
    try:
        if 'Driver=' in connection_string:
            driver_info = connection_string.split('Driver=')[1].split(';')[0]
        elif 'DRIVER=' in connection_string:
            driver_info = connection_string.split('DRIVER=')[1].split(';')[0]
        else:
            driver_info = "unknown"
        logger.info(f"Using SQL connection string with driver: {driver_info}")
    except Exception as e:
        logger.warning(f"Could not parse driver info from connection string: {str(e)}")
