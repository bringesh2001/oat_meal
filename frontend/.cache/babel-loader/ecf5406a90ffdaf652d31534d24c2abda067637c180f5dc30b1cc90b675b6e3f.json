{"ast":null,"code":"import axios from 'axios';\n\n// Create an axios instance with the base URL\nconst api = axios.create({\n  baseURL: 'http://localhost:5000/api' // Update with your actual API base URL\n});\n\n// Request interceptor - adds auth token if available\napi.interceptors.request.use(config => {\n  // Get token from localStorage\n  const token = localStorage.getItem('token');\n\n  // Format expected: 'Bearer your-token-here'\n  if (token) {\n    // Log the first and last few characters of the token for debugging\n    console.log(`API Request: Using token (format: ${token.substring(0, 5)}...${token.substring(token.length - 5)})`);\n    config.headers.Authorization = `Bearer ${token}`;\n  } else {\n    console.log('API Request: No token found');\n  }\n  return config;\n}, error => {\n  console.error('Request interceptor error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor - handles auth errors\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  // Handle 401 Unauthorized errors\n  if (error.response && error.response.status === 401) {\n    console.error('401 Unauthorized error from API:', {\n      url: error.config.url,\n      method: error.config.method,\n      data: error.response.data,\n      headers: error.config.headers\n    });\n\n    // You could automatically logout the user here if needed\n    // Example: logout();\n  }\n  return Promise.reject(error);\n});\n\n// Auth functions\nexport const loginUser = async credentials => {\n  try {\n    console.log('API: Sending login request with:', credentials.email);\n    const response = await api.post('/auth/login', credentials);\n    console.log('API: Login response status:', response.status);\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    console.error('API: Login error:', error.message);\n    if (error.response) {\n      console.error('API: Server response:', error.response.data);\n    }\n    throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Login failed. Please try again.');\n  }\n};\nexport const signupUser = async userData => {\n  try {\n    const response = await api.post('/auth/signup', userData);\n    return response.data;\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    console.error('API: Signup error:', error.message);\n    throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Signup failed. Please try again.');\n  }\n};\n\n// User profile\nexport const getUserProfile = async () => {\n  // Use fetch API directly for better control\n  try {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      console.error('API: Cannot fetch profile - No token available');\n      throw new Error('Authentication required');\n    }\n    console.log('API: Fetching user profile with token');\n    const response = await fetch('http://localhost:5000/api/users/profile', {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n\n    // Log response status\n    console.log('API: Profile fetch response status:', response.status);\n    if (!response.ok) {\n      console.error('API: Profile fetch failed:', response.status, response.statusText);\n      throw new Error(`Failed to fetch profile: ${response.statusText}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('API: Error fetching user profile:', error.message);\n    throw error;\n  }\n};\n\n// Directories\nexport const getDirectories = async () => {\n  try {\n    console.log('API: Fetching directories');\n    const response = await api.get('/directories');\n    console.log('API: Directories fetch successful');\n    return response.data;\n  } catch (error) {\n    console.error('API: Error fetching directories:', error.message);\n    throw new Error('Failed to fetch directories. Please try again.');\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","console","log","substring","length","headers","Authorization","error","Promise","reject","response","status","url","method","data","loginUser","credentials","email","post","_error$response","_error$response$data","message","Error","signupUser","userData","_error$response2","_error$response2$data","getUserProfile","fetch","ok","statusText","json","getDirectories","get"],"sources":["C:/Users/STSC/Downloads/Agent-Backend-main (3)/my-app/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create an axios instance with the base URL\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:5000/api' // Update with your actual API base URL\r\n});\r\n\r\n// Request interceptor - adds auth token if available\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    // Get token from localStorage\r\n    const token = localStorage.getItem('token');\r\n    \r\n    // Format expected: 'Bearer your-token-here'\r\n    if (token) {\r\n      // Log the first and last few characters of the token for debugging\r\n      console.log(`API Request: Using token (format: ${token.substring(0, 5)}...${token.substring(token.length - 5)})`);\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    } else {\r\n      console.log('API Request: No token found');\r\n    }\r\n    \r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('Request interceptor error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor - handles auth errors\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    // Handle 401 Unauthorized errors\r\n    if (error.response && error.response.status === 401) {\r\n      console.error('401 Unauthorized error from API:', {\r\n        url: error.config.url,\r\n        method: error.config.method,\r\n        data: error.response.data,\r\n        headers: error.config.headers\r\n      });\r\n      \r\n      // You could automatically logout the user here if needed\r\n      // Example: logout();\r\n    }\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Auth functions\r\nexport const loginUser = async (credentials) => {\r\n  try {\r\n    console.log('API: Sending login request with:', credentials.email);\r\n    const response = await api.post('/auth/login', credentials);\r\n    console.log('API: Login response status:', response.status);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('API: Login error:', error.message);\r\n    if (error.response) {\r\n      console.error('API: Server response:', error.response.data);\r\n    }\r\n    throw new Error(error.response?.data?.message || 'Login failed. Please try again.');\r\n  }\r\n};\r\n\r\nexport const signupUser = async (userData) => {\r\n  try {\r\n    const response = await api.post('/auth/signup', userData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('API: Signup error:', error.message);\r\n    throw new Error(error.response?.data?.message || 'Signup failed. Please try again.');\r\n  }\r\n};\r\n\r\n// User profile\r\nexport const getUserProfile = async () => {\r\n  // Use fetch API directly for better control\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    \r\n    if (!token) {\r\n      console.error('API: Cannot fetch profile - No token available');\r\n      throw new Error('Authentication required');\r\n    }\r\n    \r\n    console.log('API: Fetching user profile with token');\r\n    const response = await fetch('http://localhost:5000/api/users/profile', {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n    \r\n    // Log response status\r\n    console.log('API: Profile fetch response status:', response.status);\r\n    \r\n    if (!response.ok) {\r\n      console.error('API: Profile fetch failed:', response.status, response.statusText);\r\n      throw new Error(`Failed to fetch profile: ${response.statusText}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('API: Error fetching user profile:', error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Directories\r\nexport const getDirectories = async () => {\r\n  try {\r\n    console.log('API: Fetching directories');\r\n    const response = await api.get('/directories');\r\n    console.log('API: Directories fetch successful');\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('API: Error fetching directories:', error.message);\r\n    throw new Error('Failed to fetch directories. Please try again.');\r\n  }\r\n};\r\n\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}