{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\STSC\\\\Downloads\\\\Agent-Backend-main (3)\\\\my-app\\\\src\\\\pages\\\\Directories.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport { Link, Navigate } from 'react-router-dom';\nimport { AuthContext } from '../context/AuthContext';\nimport { getDirectories } from '../services/api';\nimport '../styles/Directories.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Directories() {\n  _s();\n  const [directories, setDirectories] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isUserAuthenticated, setIsUserAuthenticated] = useState(false);\n  const {\n    user\n  } = useContext(AuthContext);\n\n  // Check authentication status\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    const storedUser = localStorage.getItem('user');\n    console.log('Directories - Auth check: Token exists:', !!token);\n    console.log('Directories - Auth check: User data exists:', !!storedUser);\n    console.log('Directories - Auth check: Context user exists:', !!user);\n\n    // Consider authenticated if token exists\n    if (token) {\n      setIsUserAuthenticated(true);\n\n      // Clear any session flags as we're now successfully in the directories page\n      sessionStorage.removeItem('justLoggedIn');\n      sessionStorage.removeItem('loginTimestamp');\n    } else {\n      console.log('Directories - Not authenticated, redirecting to login');\n      setIsUserAuthenticated(false);\n    }\n    setLoading(false);\n  }, [user]);\n\n  // Fetch directories when component mounts\n  useEffect(() => {\n    if (isUserAuthenticated) {\n      fetchDirectories();\n    }\n  }, [isUserAuthenticated]);\n\n  // Function to fetch directories from the API\n  const fetchDirectories = async () => {\n    try {\n      console.log('Fetching directories...');\n      const data = await getDirectories();\n      console.log('Directories fetched:', data);\n\n      // Show a minimum of mock directories alongside any real data\n      if (data && Array.isArray(data) && data.length > 0) {\n        setDirectories(data);\n      } else {\n        // If no data or empty array, use mock data\n        setDirectories(getMockDirectories());\n      }\n      setError(null);\n    } catch (err) {\n      console.error('Error fetching directories:', err);\n      setError('Failed to load directories from server. Showing sample directories instead.');\n      // Still show some mock directories even if there's an error\n      setDirectories(getMockDirectories());\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Get mock directories for fallback\n  const getMockDirectories = () => {\n    return [{\n      id: 1,\n      name: 'Documents',\n      path: '/documents',\n      color: '#4285F4'\n    }, {\n      id: 2,\n      name: 'Images',\n      path: '/images',\n      color: '#34A853'\n    }, {\n      id: 3,\n      name: 'Projects',\n      path: '/projects',\n      color: '#FBBC05'\n    }, {\n      id: 4,\n      name: 'Templates',\n      path: '/templates',\n      color: '#EA4335'\n    }, {\n      id: 5,\n      name: 'Archive',\n      path: '/archive',\n      color: '#9C27B0'\n    }];\n  };\n\n  // Get user's display name\n  const getUserDisplayName = () => {\n    try {\n      // Try to get name from context first\n      if (user && (user.name || user.fullName || user.email)) {\n        return user.name || user.fullName || user.email;\n      }\n\n      // If not in context, try localStorage\n      const storedUser = localStorage.getItem('user');\n      if (storedUser) {\n        try {\n          const userData = JSON.parse(storedUser);\n          return userData.name || userData.fullName || userData.email || 'User';\n        } catch (e) {\n          console.error('Error parsing stored user:', e);\n        }\n      }\n\n      // Get email from login if available\n      const email = sessionStorage.getItem('lastLoginEmail');\n      if (email) {\n        return email;\n      }\n      return 'User';\n    } catch (error) {\n      console.error('Error getting user display name:', error);\n      return 'User';\n    }\n  };\n\n  // Show loading state\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-container\",\n      children: \"Loading directories...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Redirect to login if not authenticated\n  if (!isUserAuthenticated) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"directories-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"directories-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Welcome to Oatmeal AI Directories\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Hello, \", getUserDisplayName(), \"! Here are your available directories.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"directories-grid\",\n      children: directories.map(directory => /*#__PURE__*/_jsxDEV(Link, {\n        to: `/directory${directory.path}`,\n        className: \"directory-card\",\n        style: {\n          borderColor: directory.color || '#4285F4'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"directory-icon\",\n          style: {\n            backgroundColor: directory.color || '#4285F4'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fas fa-folder\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: directory.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"directory-path\",\n          children: directory.path\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }, this)]\n      }, directory.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n}\n_s(Directories, \"Nflu3MJzv9Fid3a5Tp0ZzVVywMw=\");\n_c = Directories;\nexport default Directories;\nvar _c;\n$RefreshReg$(_c, \"Directories\");","map":{"version":3,"names":["React","useState","useEffect","useContext","Link","Navigate","AuthContext","getDirectories","jsxDEV","_jsxDEV","Directories","_s","directories","setDirectories","loading","setLoading","error","setError","isUserAuthenticated","setIsUserAuthenticated","user","token","localStorage","getItem","storedUser","console","log","sessionStorage","removeItem","fetchDirectories","data","Array","isArray","length","getMockDirectories","err","id","name","path","color","getUserDisplayName","fullName","email","userData","JSON","parse","e","className","children","fileName","_jsxFileName","lineNumber","columnNumber","to","map","directory","style","borderColor","backgroundColor","_c","$RefreshReg$"],"sources":["C:/Users/STSC/Downloads/Agent-Backend-main (3)/my-app/src/pages/Directories.jsx"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\r\nimport { Link, Navigate } from 'react-router-dom';\r\nimport { AuthContext } from '../context/AuthContext';\r\nimport { getDirectories } from '../services/api';\r\nimport '../styles/Directories.css';\r\n\r\nfunction Directories() {\r\n  const [directories, setDirectories] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [isUserAuthenticated, setIsUserAuthenticated] = useState(false);\r\n  const { user } = useContext(AuthContext);\r\n\r\n  // Check authentication status\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    const storedUser = localStorage.getItem('user');\r\n    \r\n    console.log('Directories - Auth check: Token exists:', !!token);\r\n    console.log('Directories - Auth check: User data exists:', !!storedUser);\r\n    console.log('Directories - Auth check: Context user exists:', !!user);\r\n    \r\n    // Consider authenticated if token exists\r\n    if (token) {\r\n      setIsUserAuthenticated(true);\r\n      \r\n      // Clear any session flags as we're now successfully in the directories page\r\n      sessionStorage.removeItem('justLoggedIn');\r\n      sessionStorage.removeItem('loginTimestamp');\r\n    } else {\r\n      console.log('Directories - Not authenticated, redirecting to login');\r\n      setIsUserAuthenticated(false);\r\n    }\r\n    \r\n    setLoading(false);\r\n  }, [user]);\r\n\r\n  // Fetch directories when component mounts\r\n  useEffect(() => {\r\n    if (isUserAuthenticated) {\r\n      fetchDirectories();\r\n    }\r\n  }, [isUserAuthenticated]);\r\n\r\n  // Function to fetch directories from the API\r\n  const fetchDirectories = async () => {\r\n    try {\r\n      console.log('Fetching directories...');\r\n      const data = await getDirectories();\r\n      console.log('Directories fetched:', data);\r\n      \r\n      // Show a minimum of mock directories alongside any real data\r\n      if (data && Array.isArray(data) && data.length > 0) {\r\n        setDirectories(data);\r\n      } else {\r\n        // If no data or empty array, use mock data\r\n        setDirectories(getMockDirectories());\r\n      }\r\n      \r\n      setError(null);\r\n    } catch (err) {\r\n      console.error('Error fetching directories:', err);\r\n      setError('Failed to load directories from server. Showing sample directories instead.');\r\n      // Still show some mock directories even if there's an error\r\n      setDirectories(getMockDirectories());\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Get mock directories for fallback\r\n  const getMockDirectories = () => {\r\n    return [\r\n      { id: 1, name: 'Documents', path: '/documents', color: '#4285F4' },\r\n      { id: 2, name: 'Images', path: '/images', color: '#34A853' },\r\n      { id: 3, name: 'Projects', path: '/projects', color: '#FBBC05' },\r\n      { id: 4, name: 'Templates', path: '/templates', color: '#EA4335' },\r\n      { id: 5, name: 'Archive', path: '/archive', color: '#9C27B0' }\r\n    ];\r\n  };\r\n\r\n  // Get user's display name\r\n  const getUserDisplayName = () => {\r\n    try {\r\n      // Try to get name from context first\r\n      if (user && (user.name || user.fullName || user.email)) {\r\n        return user.name || user.fullName || user.email;\r\n      }\r\n      \r\n      // If not in context, try localStorage\r\n      const storedUser = localStorage.getItem('user');\r\n      if (storedUser) {\r\n        try {\r\n          const userData = JSON.parse(storedUser);\r\n          return userData.name || userData.fullName || userData.email || 'User';\r\n        } catch (e) {\r\n          console.error('Error parsing stored user:', e);\r\n        }\r\n      }\r\n      \r\n      // Get email from login if available\r\n      const email = sessionStorage.getItem('lastLoginEmail');\r\n      if (email) {\r\n        return email;\r\n      }\r\n      \r\n      return 'User';\r\n    } catch (error) {\r\n      console.error('Error getting user display name:', error);\r\n      return 'User';\r\n    }\r\n  };\r\n\r\n  // Show loading state\r\n  if (loading) {\r\n    return <div className=\"loading-container\">Loading directories...</div>;\r\n  }\r\n\r\n  // Redirect to login if not authenticated\r\n  if (!isUserAuthenticated) {\r\n    return <Navigate to=\"/login\" />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"directories-container\">\r\n      <header className=\"directories-header\">\r\n        <h1>Welcome to Oatmeal AI Directories</h1>\r\n        <p>Hello, {getUserDisplayName()}! Here are your available directories.</p>\r\n      </header>\r\n\r\n      {error && <div className=\"error-message\">{error}</div>}\r\n\r\n      <div className=\"directories-grid\">\r\n        {directories.map((directory) => (\r\n          <Link\r\n            to={`/directory${directory.path}`}\r\n            className=\"directory-card\"\r\n            key={directory.id}\r\n            style={{ borderColor: directory.color || '#4285F4' }}\r\n          >\r\n            <div \r\n              className=\"directory-icon\"\r\n              style={{ backgroundColor: directory.color || '#4285F4' }}\r\n            >\r\n              <i className=\"fas fa-folder\"></i>\r\n            </div>\r\n            <h3>{directory.name}</h3>\r\n            <p className=\"directory-path\">{directory.path}</p>\r\n          </Link>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Directories; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}