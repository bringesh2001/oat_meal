{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\STSC\\\\Downloads\\\\Agent-Backend-main (3)\\\\my-app\\\\src\\\\pages\\\\DirectoryDetail.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport '../styles/DirectoryDetail.css';\nimport logo from '../images/OatmealaLogoi (1).png';\nimport { API_ENDPOINTS } from '../config';\nimport { testApi, testCountriesApi } from '../test-api';\n\n// Import images with the correct file extensions\nimport agriAssociaImg from '../images/agri_associa.png';\nimport artisianImg from '../images/artisian.jpg';\nimport brImg from '../images/br.jpg';\nimport crafOrgImg from '../images/craf_org.jpg';\nimport farmersMarketImg from '../images/farmers_market.jpg';\nimport farmsRanchesImg from '../images/farms_ranches.jpg';\nimport fiberImg from '../images/fiber.jpg';\nimport fiberMillsImg from '../images/fiber_mills.jpg';\nimport fisheriesImg from '../images/fisheries.jpeg';\nimport fishermenImg from '../images/fishermen.jpeg';\nimport foodCopImg from '../images/food_cop.jpg';\nimport foodHubImg from '../images/food_hub.jpg';\nimport groceryStoreImg from '../images/grocery_store.jpeg';\nimport manfacImg from '../images/manfac.jpeg';\nimport marinasImg from '../images/marinas.jpeg';\nimport meatImg from '../images/meat.jpg';\nimport realEstateImg from '../images/real_estate.webp';\nimport restaurantsImg from '../images/restaurants.jpg';\nimport retailersImg from '../images/retailers.png';\nimport serviceProvidersImg from '../images/service_providers.webp';\nimport universitiesImg from '../images/universities.jpeg';\nimport vetImg from '../images/vet.webp';\nimport vineyardsImg from '../images/vineyards.jpeg';\nimport wineriesImg from '../images/wineries.png';\nimport othersImg from '../images/others.jpg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DirectoryDetail() {\n  _s();\n  const {\n    directoryType\n  } = useParams();\n  const [countries, setCountries] = useState([]);\n  const [states, setStates] = useState([]);\n  const [businesses, setBusinesses] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState('');\n  const [selectedState, setSelectedState] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [expandedBusinessId, setExpandedBusinessId] = useState(null);\n\n  // Format the directory type for display (convert path slugs to title)\n  const formatTitle = slug => {\n    if (!slug) return '';\n    return slug.split('-').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n  };\n  const title = formatTitle(directoryType);\n\n  // Map of directory type slugs to their corresponding images\n  const directoryImages = {\n    'agricultural-associations': agriAssociaImg,\n    'artisan-producers': artisianImg,\n    'business-resources': brImg,\n    'crafter-organizations': crafOrgImg,\n    'farmers-markets': farmersMarketImg,\n    'farms-ranches': farmsRanchesImg,\n    'fiber-cooperatives': fiberImg,\n    'fiber-mills': fiberMillsImg,\n    'fisheries': fisheriesImg,\n    'fishermen': fishermenImg,\n    'food-cooperatives': foodCopImg,\n    'food-hubs': foodHubImg,\n    'grocery-stores': groceryStoreImg,\n    'manufacturers': manfacImg,\n    'marinas': marinasImg,\n    'meat-wholesalers': meatImg,\n    'real-estate-agents': realEstateImg,\n    'restaurants': restaurantsImg,\n    'retailers': retailersImg,\n    'service-providers': serviceProvidersImg,\n    'universities': universitiesImg,\n    'veterinarians': vetImg,\n    'vineyards': vineyardsImg,\n    'wineries': wineriesImg,\n    'others': othersImg\n  };\n\n  // Get the correct image for the current directory type\n  const getHeaderImage = () => {\n    return directoryImages[directoryType] || othersImg; // Default to \"others\" if not found\n  };\n\n  // Load countries from API\n  useEffect(() => {\n    const loadCountries = async () => {\n      setIsLoading(true);\n      setError(null);\n      try {\n        // First, run direct test functions\n        await testApi();\n        await testCountriesApi();\n        try {\n          const corsTestResponse = await fetch(API_ENDPOINTS.test);\n          console.log(\"CORS test response status:\", corsTestResponse.status);\n          if (corsTestResponse.ok) {\n            const corsTestData = await corsTestResponse.json();\n            console.log(\"CORS test received data:\", corsTestData);\n          } else {\n            console.error(\"CORS test failed\");\n          }\n        } catch (corsTestError) {\n          console.error(\"CORS test error:\", corsTestError);\n        }\n\n        // Make a direct request to test the countries API\n        const testUrl = 'http://localhost:8000/api/countries/';\n        console.log(\"Testing countries API directly:\", testUrl);\n\n        // First try a direct test\n        try {\n          const testResponse = await fetch(testUrl);\n          console.log(\"Direct test response status:\", testResponse.status);\n          if (testResponse.ok) {\n            const testData = await testResponse.json();\n            console.log(\"Direct test received data:\", testData);\n          } else {\n            console.error(\"Direct test failed\");\n          }\n        } catch (testError) {\n          console.error(\"Direct test error:\", testError);\n        }\n\n        // Now try the configured endpoint\n        console.log(\"Fetching countries from API...\");\n        console.log(\"Countries API URL:\", API_ENDPOINTS.countries);\n        const response = await fetch(API_ENDPOINTS.countries);\n        console.log(\"Countries API response status:\", response.status);\n        if (!response.ok) {\n          const errorText = await response.text();\n          console.error(\"Error response text:\", errorText);\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log(\"Countries data received:\", data);\n        if (Array.isArray(data)) {\n          setCountries(data);\n        } else {\n          console.error(\"Unexpected countries data format:\", data);\n          setError(\"Received invalid data format for countries\");\n        }\n      } catch (error) {\n        console.error(\"Error loading countries:\", error);\n        setError(`Failed to load countries: ${error.message}`);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    loadCountries();\n  }, []);\n\n  // Load states when country is selected\n  useEffect(() => {\n    if (!selectedCountry) {\n      setStates([]);\n      return;\n    }\n    const loadStates = async country => {\n      if (!country) return;\n      setIsLoading(true);\n      setError(null);\n      try {\n        console.log(`Fetching states for country: ${country}`);\n        const url = `${API_ENDPOINTS.states}?country=${encodeURIComponent(country)}`;\n        console.log(\"States API URL:\", url);\n        const response = await fetch(url);\n        console.log(\"States API response status:\", response.status);\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log(\"States data received:\", data);\n        if (Array.isArray(data)) {\n          setStates(data);\n        } else {\n          console.error(\"Unexpected states data format:\", data);\n          setError(\"Received invalid data format for states\");\n        }\n      } catch (error) {\n        console.error(`Error loading states for ${country}:`, error);\n        setError(`Failed to load states: ${error.message}`);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    loadStates(selectedCountry);\n  }, [selectedCountry]);\n\n  // Load businesses when country and state are selected\n  useEffect(() => {\n    if (!selectedCountry || !selectedState) {\n      setBusinesses([]);\n      return;\n    }\n    const loadBusinesses = async () => {\n      if (!selectedCountry || !selectedState) {\n        console.log(\"Country or state not selected, not loading businesses\");\n        return;\n      }\n      setIsLoading(true);\n      setError(null);\n      try {\n        // Use directoryType for the API call\n        const encodedDirectory = encodeURIComponent(directoryType);\n        const encodedCountry = encodeURIComponent(selectedCountry);\n        const encodedState = encodeURIComponent(selectedState);\n\n        // Use the full URL with base URL from config\n        const url = `http://localhost:8000/api/directory-businesses/?directory_type=${encodedDirectory}&country=${encodedCountry}&state=${encodedState}`;\n        console.log(`Fetching businesses from: ${url}`);\n        const response = await fetch(url, {\n          method: 'GET',\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          },\n          credentials: 'include'\n        });\n        console.log(`Response status: ${response.status}`);\n        console.log('Response headers:', Object.fromEntries([...response.headers]));\n        if (!response.ok) {\n          const errorText = await response.text();\n          console.error('Error response body:', errorText);\n          if (response.status === 404) {\n            throw new Error(`API endpoint not found. Please check if the backend server is running.`);\n          } else {\n            throw new Error(`HTTP error! Status: ${response.status}`);\n          }\n        }\n        const data = await response.json();\n        console.log('Businesses data:', data);\n\n        // Debug function to find potential name fields in the data\n        const findPotentialNameFields = obj => {\n          const nameRelatedFields = [];\n          if (!obj || typeof obj !== 'object') return nameRelatedFields;\n          Object.keys(obj).forEach(key => {\n            const value = obj[key];\n            if (typeof value === 'string') {\n              // Check if the key might be related to a name\n              if (key.toLowerCase().includes('name') || key.toLowerCase().includes('title') || key.toLowerCase().includes('label') || key.toLowerCase().includes('business') || key.toLowerCase().includes('company') || key.toLowerCase().includes('organization')) {\n                nameRelatedFields.push({\n                  key,\n                  value\n                });\n              }\n            }\n          });\n          return nameRelatedFields;\n        };\n\n        // Check if data is an array and has the expected structure\n        if (Array.isArray(data) && data.length > 0) {\n          // Log the first item to see its structure\n          console.log('First business item structure:', data[0]);\n\n          // Find potential name fields in the first item\n          const potentialNameFields = findPotentialNameFields(data[0]);\n          console.log('Potential name fields found:', potentialNameFields);\n\n          // Ensure each business has a name property by checking various possible name fields\n          const processedData = data.map(business => {\n            // Check for different possible name fields in the data\n            const businessName = business.name || business.Name || business.business_name || business.BusinessName || business.company_name || business.CompanyName || business.organization_name || business.OrganizationName || business.title || business.Title || business.company || business.Company || business.organization || business.Organization || business.business || business.Business || business.label || business.Label || (business.id ? `Business ${business.id}` : business.ID ? `Business ${business.ID}` : 'Business Name Not Available');\n            return {\n              ...business,\n              name: businessName\n            };\n          });\n          console.log('Processed data with names:', processedData);\n          setBusinesses(processedData);\n        } else {\n          console.warn('Received empty or invalid data format:', data);\n          throw new Error('No businesses found or invalid data format received');\n        }\n      } catch (error) {\n        console.error('Error loading businesses:', error);\n        setError(error.message);\n\n        // For development/testing - create mock data if API fails\n        console.log('Using mock data since API failed');\n\n        // Generate 10 mock businesses\n        const mockBusinesses = Array.from({\n          length: 10\n        }, (_, index) => ({\n          id: index + 1,\n          name: ['America Angora Goat Breeders Association', 'American Boar Goat Association', 'California Dairy Association', 'Tech Industry Alliance', 'Farmers Market Cooperative', 'Small Business Network', 'Organic Farmers Coalition', 'Digital Marketing Group', 'Healthcare Providers Association', 'Restaurant Owners Network'][index] || `Business ${index + 1}`\n        }));\n        setBusinesses(mockBusinesses);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    loadBusinesses();\n  }, [selectedCountry, selectedState, directoryType]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"directory-detail\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"results-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"results-header\",\n        children: [\"Result: \", businesses.length, \" Businesses\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 19\n      }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"Loading businesses...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"business-grid\",\n        children: businesses.length > 0 ? businesses.map((business, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"business-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"business-name\",\n            children: business.name && business.name !== \"Business undefined\" ? business.name : \"Business Name Not Available\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 381,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"business-actions\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"open-button\",\n              onClick: () => handleOpenBusiness(business.id || business.ID || index),\n              children: \"Open\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 387,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"detail-button\",\n              onClick: () => toggleBusinessDetails(business.id || business.ID || index),\n              children: \"Detail\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 393,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 19\n          }, this)]\n        }, business.id || business.ID || index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 17\n        }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"no-results\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No businesses found with the current filters. Try changing your selection or clearing filters.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 366,\n    columnNumber: 5\n  }, this);\n}\n_s(DirectoryDetail, \"UPwT88JK/rdArQaqki8RMwRZk7Y=\", false, function () {\n  return [useParams];\n});\n_c = DirectoryDetail;\nexport default DirectoryDetail;\nvar _c;\n$RefreshReg$(_c, \"DirectoryDetail\");","map":{"version":3,"names":["React","useState","useEffect","useParams","Link","logo","API_ENDPOINTS","testApi","testCountriesApi","agriAssociaImg","artisianImg","brImg","crafOrgImg","farmersMarketImg","farmsRanchesImg","fiberImg","fiberMillsImg","fisheriesImg","fishermenImg","foodCopImg","foodHubImg","groceryStoreImg","manfacImg","marinasImg","meatImg","realEstateImg","restaurantsImg","retailersImg","serviceProvidersImg","universitiesImg","vetImg","vineyardsImg","wineriesImg","othersImg","jsxDEV","_jsxDEV","DirectoryDetail","_s","directoryType","countries","setCountries","states","setStates","businesses","setBusinesses","selectedCountry","setSelectedCountry","selectedState","setSelectedState","isLoading","setIsLoading","error","setError","expandedBusinessId","setExpandedBusinessId","formatTitle","slug","split","map","word","charAt","toUpperCase","slice","join","title","directoryImages","getHeaderImage","loadCountries","corsTestResponse","fetch","test","console","log","status","ok","corsTestData","json","corsTestError","testUrl","testResponse","testData","testError","response","errorText","text","Error","data","Array","isArray","message","loadStates","country","url","encodeURIComponent","loadBusinesses","encodedDirectory","encodedCountry","encodedState","method","headers","credentials","Object","fromEntries","findPotentialNameFields","obj","nameRelatedFields","keys","forEach","key","value","toLowerCase","includes","push","length","potentialNameFields","processedData","business","businessName","name","Name","business_name","BusinessName","company_name","CompanyName","organization_name","OrganizationName","Title","company","Company","organization","Organization","Business","label","Label","id","ID","warn","mockBusinesses","from","_","index","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","handleOpenBusiness","toggleBusinessDetails","_c","$RefreshReg$"],"sources":["C:/Users/STSC/Downloads/Agent-Backend-main (3)/my-app/src/pages/DirectoryDetail.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams, Link } from 'react-router-dom';\r\nimport '../styles/DirectoryDetail.css';\r\nimport logo from '../images/OatmealaLogoi (1).png';\r\nimport { API_ENDPOINTS } from '../config';\r\nimport { testApi, testCountriesApi } from '../test-api';\r\n\r\n// Import images with the correct file extensions\r\nimport agriAssociaImg from '../images/agri_associa.png';\r\nimport artisianImg from '../images/artisian.jpg';\r\nimport brImg from '../images/br.jpg';\r\nimport crafOrgImg from '../images/craf_org.jpg';\r\nimport farmersMarketImg from '../images/farmers_market.jpg';\r\nimport farmsRanchesImg from '../images/farms_ranches.jpg';\r\nimport fiberImg from '../images/fiber.jpg';\r\nimport fiberMillsImg from '../images/fiber_mills.jpg';\r\nimport fisheriesImg from '../images/fisheries.jpeg';\r\nimport fishermenImg from '../images/fishermen.jpeg';\r\nimport foodCopImg from '../images/food_cop.jpg';\r\nimport foodHubImg from '../images/food_hub.jpg';\r\nimport groceryStoreImg from '../images/grocery_store.jpeg';\r\nimport manfacImg from '../images/manfac.jpeg';\r\nimport marinasImg from '../images/marinas.jpeg';\r\nimport meatImg from '../images/meat.jpg';\r\nimport realEstateImg from '../images/real_estate.webp';\r\nimport restaurantsImg from '../images/restaurants.jpg';\r\nimport retailersImg from '../images/retailers.png';\r\nimport serviceProvidersImg from '../images/service_providers.webp';\r\nimport universitiesImg from '../images/universities.jpeg';\r\nimport vetImg from '../images/vet.webp';\r\nimport vineyardsImg from '../images/vineyards.jpeg';\r\nimport wineriesImg from '../images/wineries.png';\r\nimport othersImg from '../images/others.jpg';\r\n\r\nfunction DirectoryDetail() {\r\n  const { directoryType } = useParams();\r\n  const [countries, setCountries] = useState([]);\r\n  const [states, setStates] = useState([]);\r\n  const [businesses, setBusinesses] = useState([]);\r\n  const [selectedCountry, setSelectedCountry] = useState('');\r\n  const [selectedState, setSelectedState] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [expandedBusinessId, setExpandedBusinessId] = useState(null);\r\n\r\n  // Format the directory type for display (convert path slugs to title)\r\n  const formatTitle = (slug) => {\r\n    if (!slug) return '';\r\n    return slug.split('-')\r\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1))\r\n      .join(' ');\r\n  };\r\n\r\n  const title = formatTitle(directoryType);\r\n\r\n  // Map of directory type slugs to their corresponding images\r\n  const directoryImages = {\r\n    'agricultural-associations': agriAssociaImg,\r\n    'artisan-producers': artisianImg,\r\n    'business-resources': brImg,\r\n    'crafter-organizations': crafOrgImg,\r\n    'farmers-markets': farmersMarketImg,\r\n    'farms-ranches': farmsRanchesImg,\r\n    'fiber-cooperatives': fiberImg,\r\n    'fiber-mills': fiberMillsImg,\r\n    'fisheries': fisheriesImg,\r\n    'fishermen': fishermenImg,\r\n    'food-cooperatives': foodCopImg,\r\n    'food-hubs': foodHubImg,\r\n    'grocery-stores': groceryStoreImg,\r\n    'manufacturers': manfacImg,\r\n    'marinas': marinasImg,\r\n    'meat-wholesalers': meatImg,\r\n    'real-estate-agents': realEstateImg,\r\n    'restaurants': restaurantsImg,\r\n    'retailers': retailersImg,\r\n    'service-providers': serviceProvidersImg,\r\n    'universities': universitiesImg,\r\n    'veterinarians': vetImg,\r\n    'vineyards': vineyardsImg,\r\n    'wineries': wineriesImg,\r\n    'others': othersImg\r\n  };\r\n\r\n  // Get the correct image for the current directory type\r\n  const getHeaderImage = () => {\r\n    return directoryImages[directoryType] || othersImg; // Default to \"others\" if not found\r\n  };\r\n\r\n  // Load countries from API\r\n  useEffect(() => {\r\n    const loadCountries = async () => {\r\n      setIsLoading(true);\r\n      setError(null);\r\n      try {\r\n        // First, run direct test functions\r\n        await testApi();\r\n        await testCountriesApi();\r\n        \r\n        try {\r\n          const corsTestResponse = await fetch(API_ENDPOINTS.test);\r\n          console.log(\"CORS test response status:\", corsTestResponse.status);\r\n          if (corsTestResponse.ok) {\r\n            const corsTestData = await corsTestResponse.json();\r\n            console.log(\"CORS test received data:\", corsTestData);\r\n          } else {\r\n            console.error(\"CORS test failed\");\r\n          }\r\n        } catch (corsTestError) {\r\n          console.error(\"CORS test error:\", corsTestError);\r\n        }\r\n        \r\n        // Make a direct request to test the countries API\r\n        const testUrl = 'http://localhost:8000/api/countries/';\r\n        console.log(\"Testing countries API directly:\", testUrl);\r\n        \r\n        // First try a direct test\r\n        try {\r\n          const testResponse = await fetch(testUrl);\r\n          console.log(\"Direct test response status:\", testResponse.status);\r\n          if (testResponse.ok) {\r\n            const testData = await testResponse.json();\r\n            console.log(\"Direct test received data:\", testData);\r\n          } else {\r\n            console.error(\"Direct test failed\");\r\n          }\r\n        } catch (testError) {\r\n          console.error(\"Direct test error:\", testError);\r\n        }\r\n        \r\n        // Now try the configured endpoint\r\n        console.log(\"Fetching countries from API...\");\r\n        console.log(\"Countries API URL:\", API_ENDPOINTS.countries);\r\n        \r\n        const response = await fetch(API_ENDPOINTS.countries);\r\n        console.log(\"Countries API response status:\", response.status);\r\n        \r\n        if (!response.ok) {\r\n          const errorText = await response.text();\r\n          console.error(\"Error response text:\", errorText);\r\n          throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        \r\n        const data = await response.json();\r\n        console.log(\"Countries data received:\", data);\r\n        \r\n        if (Array.isArray(data)) {\r\n          setCountries(data);\r\n        } else {\r\n          console.error(\"Unexpected countries data format:\", data);\r\n          setError(\"Received invalid data format for countries\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error loading countries:\", error);\r\n        setError(`Failed to load countries: ${error.message}`);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    loadCountries();\r\n  }, []);\r\n\r\n  // Load states when country is selected\r\n  useEffect(() => {\r\n    if (!selectedCountry) {\r\n      setStates([]);\r\n      return;\r\n    }\r\n\r\n    const loadStates = async (country) => {\r\n      if (!country) return;\r\n      \r\n      setIsLoading(true);\r\n      setError(null);\r\n      try {\r\n        console.log(`Fetching states for country: ${country}`);\r\n        const url = `${API_ENDPOINTS.states}?country=${encodeURIComponent(country)}`;\r\n        console.log(\"States API URL:\", url);\r\n        \r\n        const response = await fetch(url);\r\n        console.log(\"States API response status:\", response.status);\r\n        \r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        \r\n        const data = await response.json();\r\n        console.log(\"States data received:\", data);\r\n        \r\n        if (Array.isArray(data)) {\r\n          setStates(data);\r\n        } else {\r\n          console.error(\"Unexpected states data format:\", data);\r\n          setError(\"Received invalid data format for states\");\r\n        }\r\n      } catch (error) {\r\n        console.error(`Error loading states for ${country}:`, error);\r\n        setError(`Failed to load states: ${error.message}`);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    loadStates(selectedCountry);\r\n  }, [selectedCountry]);\r\n\r\n  // Load businesses when country and state are selected\r\n  useEffect(() => {\r\n    if (!selectedCountry || !selectedState) {\r\n      setBusinesses([]);\r\n      return;\r\n    }\r\n\r\n    const loadBusinesses = async () => {\r\n      if (!selectedCountry || !selectedState) {\r\n        console.log(\"Country or state not selected, not loading businesses\");\r\n        return;\r\n      }\r\n      \r\n      setIsLoading(true);\r\n      setError(null);\r\n      \r\n      try {\r\n        // Use directoryType for the API call\r\n        const encodedDirectory = encodeURIComponent(directoryType);\r\n        const encodedCountry = encodeURIComponent(selectedCountry);\r\n        const encodedState = encodeURIComponent(selectedState);\r\n        \r\n        // Use the full URL with base URL from config\r\n        const url = `http://localhost:8000/api/directory-businesses/?directory_type=${encodedDirectory}&country=${encodedCountry}&state=${encodedState}`;\r\n        console.log(`Fetching businesses from: ${url}`);\r\n        \r\n        const response = await fetch(url, {\r\n          method: 'GET',\r\n          headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n          },\r\n          credentials: 'include',\r\n        });\r\n        \r\n        console.log(`Response status: ${response.status}`);\r\n        console.log('Response headers:', Object.fromEntries([...response.headers]));\r\n        \r\n        if (!response.ok) {\r\n          const errorText = await response.text();\r\n          console.error('Error response body:', errorText);\r\n          \r\n          if (response.status === 404) {\r\n            throw new Error(`API endpoint not found. Please check if the backend server is running.`);\r\n          } else {\r\n            throw new Error(`HTTP error! Status: ${response.status}`);\r\n          }\r\n        }\r\n        \r\n        const data = await response.json();\r\n        console.log('Businesses data:', data);\r\n        \r\n        // Debug function to find potential name fields in the data\r\n        const findPotentialNameFields = (obj) => {\r\n          const nameRelatedFields = [];\r\n          if (!obj || typeof obj !== 'object') return nameRelatedFields;\r\n          \r\n          Object.keys(obj).forEach(key => {\r\n            const value = obj[key];\r\n            if (typeof value === 'string') {\r\n              // Check if the key might be related to a name\r\n              if (\r\n                key.toLowerCase().includes('name') || \r\n                key.toLowerCase().includes('title') || \r\n                key.toLowerCase().includes('label') ||\r\n                key.toLowerCase().includes('business') ||\r\n                key.toLowerCase().includes('company') ||\r\n                key.toLowerCase().includes('organization')\r\n              ) {\r\n                nameRelatedFields.push({ key, value });\r\n              }\r\n            }\r\n          });\r\n          \r\n          return nameRelatedFields;\r\n        };\r\n        \r\n        // Check if data is an array and has the expected structure\r\n        if (Array.isArray(data) && data.length > 0) {\r\n          // Log the first item to see its structure\r\n          console.log('First business item structure:', data[0]);\r\n          \r\n          // Find potential name fields in the first item\r\n          const potentialNameFields = findPotentialNameFields(data[0]);\r\n          console.log('Potential name fields found:', potentialNameFields);\r\n          \r\n          // Ensure each business has a name property by checking various possible name fields\r\n          const processedData = data.map(business => {\r\n            // Check for different possible name fields in the data\r\n            const businessName = \r\n              business.name || \r\n              business.Name || \r\n              business.business_name || \r\n              business.BusinessName || \r\n              business.company_name || \r\n              business.CompanyName || \r\n              business.organization_name || \r\n              business.OrganizationName ||\r\n              business.title ||\r\n              business.Title ||\r\n              business.company ||\r\n              business.Company ||\r\n              business.organization ||\r\n              business.Organization ||\r\n              business.business ||\r\n              business.Business ||\r\n              business.label ||\r\n              business.Label ||\r\n              (business.id ? `Business ${business.id}` : \r\n               business.ID ? `Business ${business.ID}` : \r\n               'Business Name Not Available');\r\n            \r\n            return {\r\n              ...business,\r\n              name: businessName\r\n            };\r\n          });\r\n          \r\n          console.log('Processed data with names:', processedData);\r\n          setBusinesses(processedData);\r\n        } else {\r\n          console.warn('Received empty or invalid data format:', data);\r\n          throw new Error('No businesses found or invalid data format received');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error loading businesses:', error);\r\n        setError(error.message);\r\n        \r\n        // For development/testing - create mock data if API fails\r\n        console.log('Using mock data since API failed');\r\n        \r\n        // Generate 10 mock businesses\r\n        const mockBusinesses = Array.from({ length: 10 }, (_, index) => ({\r\n          id: index + 1,\r\n          name: [\r\n            'America Angora Goat Breeders Association',\r\n            'American Boar Goat Association',\r\n            'California Dairy Association',\r\n            'Tech Industry Alliance',\r\n            'Farmers Market Cooperative',\r\n            'Small Business Network',\r\n            'Organic Farmers Coalition',\r\n            'Digital Marketing Group',\r\n            'Healthcare Providers Association',\r\n            'Restaurant Owners Network'\r\n          ][index] || `Business ${index + 1}`\r\n        }));\r\n        \r\n        setBusinesses(mockBusinesses);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    \r\n    loadBusinesses();\r\n  }, [selectedCountry, selectedState, directoryType]);\r\n\r\n  return (\r\n    <div className=\"directory-detail\">\r\n      {/* Rest of the component content */}\r\n      {/* Results section */}\r\n      <div className=\"results-section\">\r\n        <h2 className=\"results-header\">Result: {businesses.length} Businesses</h2>\r\n        \r\n        {error && <div className=\"error-message\">{error}</div>}\r\n        \r\n        {isLoading ? (\r\n          <div className=\"loading\">Loading businesses...</div>\r\n        ) : (\r\n          <div className=\"business-grid\">\r\n            {businesses.length > 0 ? (\r\n              businesses.map((business, index) => (\r\n                <div key={business.id || business.ID || index} className=\"business-card\">\r\n                  <div className=\"business-name\">\r\n                    {business.name && business.name !== \"Business undefined\" \r\n                      ? business.name \r\n                      : \"Business Name Not Available\"}\r\n                  </div>\r\n                  <div className=\"business-actions\">\r\n                    <button \r\n                      className=\"open-button\"\r\n                      onClick={() => handleOpenBusiness(business.id || business.ID || index)}\r\n                    >\r\n                      Open\r\n                    </button>\r\n                    <button \r\n                      className=\"detail-button\"\r\n                      onClick={() => toggleBusinessDetails(business.id || business.ID || index)}\r\n                    >\r\n                      Detail\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              ))\r\n            ) : (\r\n              <div className=\"no-results\">\r\n                <p>No businesses found with the current filters. Try changing your selection or clearing filters.</p>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DirectoryDetail;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}