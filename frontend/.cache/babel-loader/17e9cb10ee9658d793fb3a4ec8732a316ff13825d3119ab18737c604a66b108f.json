{"ast":null,"code":"import axios from 'axios';\n\n// Create an axios instance with the base URL\nconst api = axios.create({\n  baseURL: 'http://127.0.0.1:8000',\n  // Updated to match the exact running server address\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor - adds auth token if available\napi.interceptors.request.use(config => {\n  // Get token from localStorage\n  const token = localStorage.getItem('token');\n\n  // Check if token exists\n  if (token) {\n    console.log(`API Request: Using token for ${config.url}`);\n\n    // Check if the token starts with \"eyJ\" which indicates it's likely a JWT\n    if (token.startsWith('eyJ')) {\n      // The token itself is already the JWT value, no need to prefix it\n      config.headers.Authorization = `Bearer ${token}`;\n      console.log('Using Bearer JWT format');\n    } else {\n      // Use Token format for other token types\n      config.headers.Authorization = `Token ${token}`;\n    }\n\n    // Debugging log\n    console.log('Authorization header:', config.headers.Authorization.substring(0, 15) + '...');\n  } else {\n    console.log('API Request: No token found');\n  }\n  return config;\n}, error => {\n  console.error('Request interceptor error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor - handles auth errors\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  // Handle 401 Unauthorized errors\n  if (error.response && error.response.status === 401) {\n    console.error('401 Unauthorized error from API:', {\n      url: error.config.url,\n      method: error.config.method,\n      headers: error.config.headers.Authorization ? error.config.headers.Authorization.substring(0, 15) + '...' : 'none'\n    });\n  }\n  return Promise.reject(error);\n});\n\n// Auth functions\nexport const loginUser = async credentials => {\n  try {\n    console.log('API: Sending login request');\n\n    // Handle both object credentials and direct email/password parameters\n    let email, password;\n    if (typeof credentials === 'object' && credentials !== null) {\n      // Handle credentials as an object\n      email = credentials.email;\n      password = credentials.password;\n    } else {\n      // This should never happen, but we'll handle it for robustness\n      console.error('Invalid credentials format:', credentials);\n      throw new Error('Invalid login request format');\n    }\n\n    // Log the email we're using (but never log passwords)\n    console.log('API: Login attempt for:', email);\n\n    // Define different payload formats to try\n    const payloadFormats = [{\n      endpoint: '/api/auth/login/',\n      payload: {\n        email,\n        password\n      }\n    }, {\n      endpoint: '/api/auth/login/',\n      payload: {\n        username: email,\n        password\n      }\n    }, {\n      endpoint: '/api/login/',\n      payload: {\n        email,\n        password\n      }\n    }, {\n      endpoint: '/api/token/',\n      payload: {\n        username: email,\n        password\n      }\n    }, {\n      endpoint: '/api/token/',\n      payload: {\n        email,\n        password\n      }\n    }];\n\n    // Try each payload format\n    let lastError = null;\n    let response = null;\n    for (const attempt of payloadFormats) {\n      try {\n        console.log(`Trying login with endpoint: ${attempt.endpoint}`);\n        console.log('Using payload keys:', Object.keys(attempt.payload).join(', '));\n        response = await api.post(attempt.endpoint, attempt.payload);\n        console.log(`Successful login with ${attempt.endpoint}`);\n        break; // Break the loop if successful\n      } catch (error) {\n        lastError = error;\n        console.log(`Login attempt failed with ${attempt.endpoint}:`, error.response ? error.response.status : error.message);\n\n        // Don't retry if we got a 401 (invalid credentials)\n        if (error.response && error.response.status === 401) {\n          throw error; // Re-throw to handle invalid credentials properly\n        }\n\n        // Continue to next attempt for other errors\n      }\n    }\n\n    // If all attempts failed, throw the last error\n    if (!response) {\n      console.error('All login attempts failed');\n      throw lastError || new Error('Failed to connect to backend');\n    }\n    console.log('Login response structure:', Object.keys(response.data).join(', '));\n\n    // Extract token from various possible formats\n    let token = null;\n    if (response.data.token) {\n      token = response.data.token;\n      console.log('Found token in response.data.token');\n    } else if (response.data.access) {\n      token = response.data.access;\n      console.log('Found token in response.data.access');\n    } else if (response.data.key) {\n      token = response.data.key;\n      console.log('Found token in response.data.key');\n    } else if (typeof response.data === 'string') {\n      // Sometimes the API returns the token directly as a string\n      token = response.data;\n      console.log('Response data is a string, using as token');\n    } else {\n      // Loop through all properties to find one that might be a token\n      for (const key in response.data) {\n        if (typeof response.data[key] === 'string' && (response.data[key].length > 20 || key.toLowerCase().includes('token'))) {\n          token = response.data[key];\n          console.log(`Found possible token in response.data.${key}`);\n          break;\n        }\n      }\n    }\n    if (!token) {\n      console.error('No token found in login response:', response.data);\n      throw new Error('Authentication failed: No token in response');\n    }\n\n    // Log details about the token to help with debugging\n    console.log('Token length:', token.length);\n    console.log('Token starts with:', token.substring(0, 10) + '...');\n    console.log('Appears to be JWT:', token.startsWith('eyJ'));\n\n    // Store the token\n    localStorage.setItem('token', token);\n\n    // Store user info if available in the response\n    if (response.data.user) {\n      console.log('User data found in response:', Object.keys(response.data.user).join(', '));\n      const userData = response.data.user;\n      if (userData.email) {\n        sessionStorage.setItem('lastLoginEmail', userData.email);\n      } else if (typeof email === 'string') {\n        sessionStorage.setItem('lastLoginEmail', email);\n      }\n      if (userData.name) {\n        sessionStorage.setItem('userName', userData.name);\n      } else if (userData.username) {\n        sessionStorage.setItem('userName', userData.username);\n      } else if (userData.first_name) {\n        const fullName = userData.last_name ? `${userData.first_name} ${userData.last_name}` : userData.first_name;\n        sessionStorage.setItem('userName', fullName);\n      } else if (userData.id) {\n        // If we only have user ID, store that\n        sessionStorage.setItem('userId', userData.id.toString());\n      }\n    } else {\n      // If we don't have user info, store the email we logged in with\n      if (typeof email === 'string') {\n        sessionStorage.setItem('lastLoginEmail', email);\n\n        // Extract username from email for a fallback user name\n        const username = email.split('@')[0];\n        if (username) {\n          // Capitalize first letter of username for better display\n          const displayName = username.charAt(0).toUpperCase() + username.slice(1);\n          sessionStorage.setItem('userName', displayName);\n        }\n      }\n    }\n    return {\n      ...response.data,\n      token: token,\n      // Ensure token is in the returned data\n      success: true\n    };\n  } catch (error) {\n    console.error('Login error:', error.response ? `${error.response.status}: ${JSON.stringify(error.response.data)}` : error.message);\n    throw error;\n  }\n};\nexport const signupUser = async userData => {\n  try {\n    const response = await api.post('/api/auth/signup/', userData);\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    console.error('API: Signup error:', error.message);\n    throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Signup failed. Please try again.');\n  }\n};\n\n// User profile\nexport const getUserProfile = async () => {\n  try {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('Authentication required');\n    }\n\n    // Determine the correct authentication header based on token format\n    const headers = {};\n    if (token.startsWith('eyJ')) {\n      // Looks like a JWT token\n      headers.Authorization = `Bearer ${token}`;\n      console.log('Using Bearer format for JWT token');\n    } else {\n      // Use Token format for other types\n      headers.Authorization = `Token ${token}`;\n      console.log('Using Token format');\n    }\n\n    // Try multiple profile endpoints that might exist\n    const possibleEndpoints = ['/apiV1/profile/', '/api/auth/profile/', '/api/user/profile/', '/api/profile/'];\n    let lastError = null;\n    let userData = null;\n\n    // Try each endpoint until one works\n    for (const endpoint of possibleEndpoints) {\n      try {\n        console.log(`Trying to fetch profile from ${endpoint}`);\n        const response = await api.get(endpoint, {\n          headers\n        });\n        if (response.status === 200 && response.data) {\n          console.log(`Profile found at ${endpoint}:`, response.status);\n          userData = response.data;\n          break;\n        }\n      } catch (endpointError) {\n        console.log(`Profile not found at ${endpoint}:`, endpointError.response ? endpointError.response.status : 'network error');\n        lastError = endpointError;\n        // Continue to the next endpoint\n      }\n    }\n\n    // If we found user data from any endpoint\n    if (userData) {\n      console.log('Profile data found:', Object.keys(userData).join(', '));\n\n      // Store key user info in session storage for fallback\n      if (userData.email) {\n        sessionStorage.setItem('lastLoginEmail', userData.email);\n      }\n      if (userData.name) {\n        sessionStorage.setItem('userName', userData.name);\n      } else if (userData.username) {\n        sessionStorage.setItem('userName', userData.username);\n      } else if (userData.first_name) {\n        const fullName = userData.last_name ? `${userData.first_name} ${userData.last_name}` : userData.first_name;\n        sessionStorage.setItem('userName', fullName);\n      }\n      return userData;\n    }\n\n    // If we get here, no endpoints worked but we have a token\n    // Create a fallback profile based on stored session data\n    console.log('No profile endpoints successful, using fallback data');\n    const email = sessionStorage.getItem('lastLoginEmail');\n    const name = sessionStorage.getItem('userName');\n    if (email) {\n      return {\n        email: email,\n        name: name || 'User',\n        profile_picture: null\n      };\n    }\n\n    // If we have no email, re-throw the last error\n    throw lastError || new Error('Failed to fetch profile from all endpoints');\n  } catch (error) {\n    console.error('Error fetching user profile:', error.response ? `${error.response.status}: ${JSON.stringify(error.response.data)}` : error.message);\n\n    // Create a fallback user object if profile fetch fails\n    const email = sessionStorage.getItem('lastLoginEmail');\n    if (email) {\n      return {\n        email: email,\n        name: sessionStorage.getItem('userName') || 'User',\n        profile_picture: null\n      };\n    }\n    throw error;\n  }\n};\n\n// Directories\nexport const getDirectories = async () => {\n  try {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('Authentication required');\n    }\n\n    // Try with trailing slash first (Django often requires this)\n    const response = await api.get('/apiV1/directories/', {\n      headers: {\n        Authorization: `Token ${token}` // Using Token format for Django REST Framework\n      }\n    });\n    console.log('Directories response:', response.status, response.data);\n    return response.data;\n  } catch (error) {\n    // If we get a 404 with trailing slash, try without\n    if (error.response && error.response.status === 404) {\n      try {\n        const response = await api.get('/apiV1/directories', {\n          headers: {\n            Authorization: `Token ${token}`\n          }\n        });\n        console.log('Directories response (without trailing slash):', response.status, response.data);\n        return response.data;\n      } catch (retryError) {\n        console.error('Error fetching directories (retry):', retryError.response ? retryError.response.status : retryError.message);\n        throw retryError;\n      }\n    }\n    console.error('Error fetching directories:', error.response ? error.response.status : error.message);\n\n    // Return some mock directory data if the API fails\n    return [{\n      id: 1,\n      name: 'Documents',\n      path: '/documents',\n      color: '#4285F4'\n    }, {\n      id: 2,\n      name: 'Images',\n      path: '/images',\n      color: '#34A853'\n    }, {\n      id: 3,\n      name: 'Projects',\n      path: '/projects',\n      color: '#FBBC05'\n    }, {\n      id: 4,\n      name: 'Reports',\n      path: '/reports',\n      color: '#EA4335'\n    }];\n  }\n};\n\n// Chat API Functions\nexport const getChatHistory = async () => {\n  try {\n    // Since there's no specific chat history endpoint, we'll return an empty array\n    // The Chat component will handle creating the initial welcome message\n    return [];\n  } catch (error) {\n    console.error('Error fetching chat history:', error);\n    return [];\n  }\n};\nexport const sendChatMessage = async message => {\n  try {\n    // Handle test connection request\n    if (message === '__test_connection__') {\n      console.log('Testing connection to Azure RAG pipeline...');\n      try {\n        const token = localStorage.getItem('token');\n        if (!token) {\n          return {\n            success: false,\n            error: 'No authentication token'\n          };\n        }\n\n        // Determine the correct authentication header based on token format\n        const authHeader = token.startsWith('eyJ') ? `Bearer ${token}` : `Token ${token}`;\n\n        // Just check if the chat endpoint is accessible\n        const response = await api.get('/apiV1/chat/', {\n          headers: {\n            Authorization: authHeader\n          }\n        });\n        return {\n          success: true\n        };\n      } catch (error) {\n        console.error('Connection test failed:', error.response ? `${error.response.status}: ${JSON.stringify(error.response.data)}` : error.message);\n\n        // Check specifically for authorization errors\n        if (error.response && (error.response.status === 401 || error.response.status === 403)) {\n          var _error$response$data2;\n          return {\n            success: false,\n            error: 'Authentication error',\n            authError: true,\n            status: error.response.status,\n            message: ((_error$response$data2 = error.response.data) === null || _error$response$data2 === void 0 ? void 0 : _error$response$data2.detail) || 'Invalid authentication credentials'\n          };\n        }\n        return {\n          success: false,\n          error: error.response ? `Server error (${error.response.status})` : 'Network error',\n          offline: true\n        };\n      }\n    }\n\n    // Regular message sending\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('Authentication required');\n    }\n\n    // Determine the correct authentication header based on token format\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    if (token.startsWith('eyJ')) {\n      // Looks like a JWT token\n      headers.Authorization = `Bearer ${token}`;\n      console.log('Using Bearer format for JWT token');\n    } else {\n      // Use Token format for other types\n      headers.Authorization = `Token ${token}`;\n      console.log('Using Token format');\n    }\n    console.log('Sending message to Azure-powered RAG pipeline...');\n    const response = await api.post('/apiV1/chat/', {\n      message\n    }, {\n      headers\n    });\n    console.log('Chat response received:', response.status);\n    return {\n      success: true,\n      ai_response: response.data.response,\n      sources: response.data.sources || []\n    };\n  } catch (error) {\n    console.error('Chat error:', error.response ? `${error.response.status}: ${JSON.stringify(error.response.data)}` : error.message);\n\n    // Check specifically for authorization errors\n    if (error.response && (error.response.status === 401 || error.response.status === 403)) {\n      var _error$response$data3;\n      return {\n        success: false,\n        error: 'Authentication error',\n        authError: true,\n        status: error.response.status,\n        message: ((_error$response$data3 = error.response.data) === null || _error$response$data3 === void 0 ? void 0 : _error$response$data3.detail) || 'Invalid authentication credentials'\n      };\n    }\n    return {\n      success: false,\n      error: error.response ? `Server error (${error.response.status})` : 'Network error',\n      offline: true\n    };\n  }\n};\n\n// Function to diagnose API endpoints\nexport const checkApiEndpoints = async () => {\n  const token = localStorage.getItem('token');\n  if (!token) {\n    console.error('No authentication token available');\n    return {\n      authenticated: false,\n      endpoints: []\n    };\n  }\n\n  // Prepare headers\n  const headers = {\n    Authorization: `Token ${token}`\n  };\n\n  // List of endpoints to test\n  const endpoints = [\n  // Common API endpoints\n  {\n    method: 'GET',\n    url: '/api/auth/profile/'\n  }, {\n    method: 'GET',\n    url: '/api/directories/'\n  }, {\n    method: 'GET',\n    url: '/api/chat/'\n  }, {\n    method: 'POST',\n    url: '/api/chat/',\n    data: {\n      message: 'test'\n    }\n  },\n  // V1 API endpoints \n  {\n    method: 'GET',\n    url: '/apiV1/profile/'\n  }, {\n    method: 'GET',\n    url: '/apiV1/directories/'\n  }, {\n    method: 'GET',\n    url: '/apiV1/ping/'\n  }, {\n    method: 'POST',\n    url: '/apiV1/chat/',\n    data: {\n      message: 'test'\n    }\n  },\n  // Azure-specific endpoints (if any)\n  {\n    method: 'GET',\n    url: '/apiV1/azure/status/'\n  }];\n  const results = [];\n\n  // Test each endpoint\n  for (const endpoint of endpoints) {\n    try {\n      console.log(`Testing ${endpoint.method} ${endpoint.url}...`);\n      const config = {\n        method: endpoint.method,\n        url: endpoint.url,\n        headers: headers,\n        data: endpoint.data || null\n      };\n      const response = await axios(config);\n      results.push({\n        endpoint: endpoint.url,\n        method: endpoint.method,\n        status: response.status,\n        available: true,\n        data: typeof response.data === 'object' ? 'Object received' : 'Data received'\n      });\n      console.log(`✅ ${endpoint.method} ${endpoint.url} - Status: ${response.status}`);\n    } catch (error) {\n      var _error$response2, _error$response3, _error$response4;\n      results.push({\n        endpoint: endpoint.url,\n        method: endpoint.method,\n        status: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) || 'Network Error',\n        available: false,\n        error: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error.message\n      });\n      console.log(`❌ ${endpoint.method} ${endpoint.url} - Error: ${((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status) || error.message}`);\n    }\n  }\n\n  // Log the summary\n  const availableEndpoints = results.filter(e => e.available);\n  console.log(`API Endpoint Check Summary: ${availableEndpoints.length}/${endpoints.length} endpoints available`);\n  console.table(results);\n  return {\n    authenticated: true,\n    endpoints: results,\n    availableCount: availableEndpoints.length,\n    totalCount: endpoints.length\n  };\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","console","log","url","startsWith","Authorization","substring","error","Promise","reject","response","status","method","loginUser","credentials","email","password","Error","payloadFormats","endpoint","payload","username","lastError","attempt","Object","keys","join","post","message","data","access","key","length","toLowerCase","includes","setItem","user","userData","sessionStorage","name","first_name","fullName","last_name","id","toString","split","displayName","charAt","toUpperCase","slice","success","JSON","stringify","signupUser","_error$response","_error$response$data","getUserProfile","possibleEndpoints","get","endpointError","profile_picture","getDirectories","retryError","path","color","getChatHistory","sendChatMessage","authHeader","_error$response$data2","authError","detail","offline","ai_response","sources","_error$response$data3","checkApiEndpoints","authenticated","endpoints","results","push","available","_error$response2","_error$response3","_error$response4","availableEndpoints","filter","e","table","availableCount","totalCount"],"sources":["C:/Users/STSC/Downloads/Agent-Backend-main (3)/my-app/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create an axios instance with the base URL\r\nconst api = axios.create({\r\n  baseURL: 'http://127.0.0.1:8000', // Updated to match the exact running server address\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  }\r\n});\r\n\r\n// Request interceptor - adds auth token if available\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    // Get token from localStorage\r\n    const token = localStorage.getItem('token');\r\n    \r\n    // Check if token exists\r\n    if (token) {\r\n      console.log(`API Request: Using token for ${config.url}`);\r\n      \r\n      // Check if the token starts with \"eyJ\" which indicates it's likely a JWT\r\n      if (token.startsWith('eyJ')) {\r\n        // The token itself is already the JWT value, no need to prefix it\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n        console.log('Using Bearer JWT format');\r\n      } else {\r\n        // Use Token format for other token types\r\n        config.headers.Authorization = `Token ${token}`;\r\n      }\r\n      \r\n      // Debugging log\r\n      console.log('Authorization header:', config.headers.Authorization.substring(0, 15) + '...');\r\n    } else {\r\n      console.log('API Request: No token found');\r\n    }\r\n    \r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('Request interceptor error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor - handles auth errors\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    // Handle 401 Unauthorized errors\r\n    if (error.response && error.response.status === 401) {\r\n      console.error('401 Unauthorized error from API:', {\r\n        url: error.config.url,\r\n        method: error.config.method,\r\n        headers: error.config.headers.Authorization ? \r\n          error.config.headers.Authorization.substring(0, 15) + '...' : 'none'\r\n      });\r\n    }\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Auth functions\r\nexport const loginUser = async (credentials) => {\r\n  try {\r\n    console.log('API: Sending login request');\r\n    \r\n    // Handle both object credentials and direct email/password parameters\r\n    let email, password;\r\n    \r\n    if (typeof credentials === 'object' && credentials !== null) {\r\n      // Handle credentials as an object\r\n      email = credentials.email;\r\n      password = credentials.password;\r\n    } else {\r\n      // This should never happen, but we'll handle it for robustness\r\n      console.error('Invalid credentials format:', credentials);\r\n      throw new Error('Invalid login request format');\r\n    }\r\n    \r\n    // Log the email we're using (but never log passwords)\r\n    console.log('API: Login attempt for:', email);\r\n    \r\n    // Define different payload formats to try\r\n    const payloadFormats = [\r\n      { endpoint: '/api/auth/login/', payload: { email, password } },\r\n      { endpoint: '/api/auth/login/', payload: { username: email, password } },\r\n      { endpoint: '/api/login/', payload: { email, password } },\r\n      { endpoint: '/api/token/', payload: { username: email, password } },\r\n      { endpoint: '/api/token/', payload: { email, password } }\r\n    ];\r\n    \r\n    // Try each payload format\r\n    let lastError = null;\r\n    let response = null;\r\n    \r\n    for (const attempt of payloadFormats) {\r\n      try {\r\n        console.log(`Trying login with endpoint: ${attempt.endpoint}`);\r\n        console.log('Using payload keys:', Object.keys(attempt.payload).join(', '));\r\n        \r\n        response = await api.post(attempt.endpoint, attempt.payload);\r\n        console.log(`Successful login with ${attempt.endpoint}`);\r\n        break; // Break the loop if successful\r\n      } catch (error) {\r\n        lastError = error;\r\n        console.log(`Login attempt failed with ${attempt.endpoint}:`, \r\n          error.response ? error.response.status : error.message);\r\n        \r\n        // Don't retry if we got a 401 (invalid credentials)\r\n        if (error.response && error.response.status === 401) {\r\n          throw error; // Re-throw to handle invalid credentials properly\r\n        }\r\n        \r\n        // Continue to next attempt for other errors\r\n      }\r\n    }\r\n    \r\n    // If all attempts failed, throw the last error\r\n    if (!response) {\r\n      console.error('All login attempts failed');\r\n      throw lastError || new Error('Failed to connect to backend');\r\n    }\r\n    \r\n    console.log('Login response structure:', Object.keys(response.data).join(', '));\r\n    \r\n    // Extract token from various possible formats\r\n    let token = null;\r\n    \r\n    if (response.data.token) {\r\n      token = response.data.token;\r\n      console.log('Found token in response.data.token');\r\n    } else if (response.data.access) {\r\n      token = response.data.access;\r\n      console.log('Found token in response.data.access');\r\n    } else if (response.data.key) {\r\n      token = response.data.key;\r\n      console.log('Found token in response.data.key');\r\n    } else if (typeof response.data === 'string') {\r\n      // Sometimes the API returns the token directly as a string\r\n      token = response.data;\r\n      console.log('Response data is a string, using as token');\r\n    } else {\r\n      // Loop through all properties to find one that might be a token\r\n      for (const key in response.data) {\r\n        if (\r\n          typeof response.data[key] === 'string' && \r\n          (response.data[key].length > 20 || key.toLowerCase().includes('token'))\r\n        ) {\r\n          token = response.data[key];\r\n          console.log(`Found possible token in response.data.${key}`);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    \r\n    if (!token) {\r\n      console.error('No token found in login response:', response.data);\r\n      throw new Error('Authentication failed: No token in response');\r\n    }\r\n    \r\n    // Log details about the token to help with debugging\r\n    console.log('Token length:', token.length);\r\n    console.log('Token starts with:', token.substring(0, 10) + '...');\r\n    console.log('Appears to be JWT:', token.startsWith('eyJ'));\r\n    \r\n    // Store the token\r\n    localStorage.setItem('token', token);\r\n    \r\n    // Store user info if available in the response\r\n    if (response.data.user) {\r\n      console.log('User data found in response:', Object.keys(response.data.user).join(', '));\r\n      const userData = response.data.user;\r\n      \r\n      if (userData.email) {\r\n        sessionStorage.setItem('lastLoginEmail', userData.email);\r\n      } else if (typeof email === 'string') {\r\n        sessionStorage.setItem('lastLoginEmail', email);\r\n      }\r\n      \r\n      if (userData.name) {\r\n        sessionStorage.setItem('userName', userData.name);\r\n      } else if (userData.username) {\r\n        sessionStorage.setItem('userName', userData.username);\r\n      } else if (userData.first_name) {\r\n        const fullName = userData.last_name \r\n          ? `${userData.first_name} ${userData.last_name}`\r\n          : userData.first_name;\r\n        sessionStorage.setItem('userName', fullName);\r\n      } else if (userData.id) {\r\n        // If we only have user ID, store that\r\n        sessionStorage.setItem('userId', userData.id.toString());\r\n      }\r\n    } else {\r\n      // If we don't have user info, store the email we logged in with\r\n      if (typeof email === 'string') {\r\n        sessionStorage.setItem('lastLoginEmail', email);\r\n        \r\n        // Extract username from email for a fallback user name\r\n        const username = email.split('@')[0];\r\n        if (username) {\r\n          // Capitalize first letter of username for better display\r\n          const displayName = username.charAt(0).toUpperCase() + username.slice(1);\r\n          sessionStorage.setItem('userName', displayName);\r\n        }\r\n      }\r\n    }\r\n    \r\n    return {\r\n      ...response.data,\r\n      token: token, // Ensure token is in the returned data\r\n      success: true\r\n    };\r\n  } catch (error) {\r\n    console.error('Login error:', error.response ? `${error.response.status}: ${JSON.stringify(error.response.data)}` : error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const signupUser = async (userData) => {\r\n  try {\r\n    const response = await api.post('/api/auth/signup/', userData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('API: Signup error:', error.message);\r\n    throw new Error(error.response?.data?.message || 'Signup failed. Please try again.');\r\n  }\r\n};\r\n\r\n// User profile\r\nexport const getUserProfile = async () => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n      throw new Error('Authentication required');\r\n    }\r\n\r\n    // Determine the correct authentication header based on token format\r\n    const headers = {};\r\n    if (token.startsWith('eyJ')) {\r\n      // Looks like a JWT token\r\n      headers.Authorization = `Bearer ${token}`;\r\n      console.log('Using Bearer format for JWT token');\r\n    } else {\r\n      // Use Token format for other types\r\n      headers.Authorization = `Token ${token}`;\r\n      console.log('Using Token format');\r\n    }\r\n\r\n    // Try multiple profile endpoints that might exist\r\n    const possibleEndpoints = [\r\n      '/apiV1/profile/',\r\n      '/api/auth/profile/',\r\n      '/api/user/profile/',\r\n      '/api/profile/'\r\n    ];\r\n    \r\n    let lastError = null;\r\n    let userData = null;\r\n    \r\n    // Try each endpoint until one works\r\n    for (const endpoint of possibleEndpoints) {\r\n      try {\r\n        console.log(`Trying to fetch profile from ${endpoint}`);\r\n        const response = await api.get(endpoint, { headers });\r\n        \r\n        if (response.status === 200 && response.data) {\r\n          console.log(`Profile found at ${endpoint}:`, response.status);\r\n          userData = response.data;\r\n          break;\r\n        }\r\n      } catch (endpointError) {\r\n        console.log(`Profile not found at ${endpoint}:`, \r\n          endpointError.response ? endpointError.response.status : 'network error');\r\n        lastError = endpointError;\r\n        // Continue to the next endpoint\r\n      }\r\n    }\r\n    \r\n    // If we found user data from any endpoint\r\n    if (userData) {\r\n      console.log('Profile data found:', Object.keys(userData).join(', '));\r\n      \r\n      // Store key user info in session storage for fallback\r\n      if (userData.email) {\r\n        sessionStorage.setItem('lastLoginEmail', userData.email);\r\n      }\r\n      \r\n      if (userData.name) {\r\n        sessionStorage.setItem('userName', userData.name);\r\n      } else if (userData.username) {\r\n        sessionStorage.setItem('userName', userData.username);\r\n      } else if (userData.first_name) {\r\n        const fullName = userData.last_name \r\n          ? `${userData.first_name} ${userData.last_name}`\r\n          : userData.first_name;\r\n        sessionStorage.setItem('userName', fullName);\r\n      }\r\n      \r\n      return userData;\r\n    }\r\n    \r\n    // If we get here, no endpoints worked but we have a token\r\n    // Create a fallback profile based on stored session data\r\n    console.log('No profile endpoints successful, using fallback data');\r\n    const email = sessionStorage.getItem('lastLoginEmail');\r\n    const name = sessionStorage.getItem('userName');\r\n    \r\n    if (email) {\r\n      return {\r\n        email: email,\r\n        name: name || 'User',\r\n        profile_picture: null,\r\n      };\r\n    }\r\n    \r\n    // If we have no email, re-throw the last error\r\n    throw lastError || new Error('Failed to fetch profile from all endpoints');\r\n  } catch (error) {\r\n    console.error('Error fetching user profile:', \r\n      error.response ? `${error.response.status}: ${JSON.stringify(error.response.data)}` : error.message);\r\n    \r\n    // Create a fallback user object if profile fetch fails\r\n    const email = sessionStorage.getItem('lastLoginEmail');\r\n    if (email) {\r\n      return {\r\n        email: email,\r\n        name: sessionStorage.getItem('userName') || 'User',\r\n        profile_picture: null,\r\n      };\r\n    }\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Directories\r\nexport const getDirectories = async () => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n      throw new Error('Authentication required');\r\n    }\r\n\r\n    // Try with trailing slash first (Django often requires this)\r\n    const response = await api.get('/apiV1/directories/', {\r\n      headers: {\r\n        Authorization: `Token ${token}`, // Using Token format for Django REST Framework\r\n      },\r\n    });\r\n\r\n    console.log('Directories response:', response.status, response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    // If we get a 404 with trailing slash, try without\r\n    if (error.response && error.response.status === 404) {\r\n      try {\r\n        const response = await api.get('/apiV1/directories', {\r\n          headers: {\r\n            Authorization: `Token ${token}`,\r\n          },\r\n        });\r\n        console.log('Directories response (without trailing slash):', response.status, response.data);\r\n        return response.data;\r\n      } catch (retryError) {\r\n        console.error('Error fetching directories (retry):', retryError.response ? retryError.response.status : retryError.message);\r\n        throw retryError;\r\n      }\r\n    }\r\n\r\n    console.error('Error fetching directories:', error.response ? error.response.status : error.message);\r\n    \r\n    // Return some mock directory data if the API fails\r\n    return [\r\n      { id: 1, name: 'Documents', path: '/documents', color: '#4285F4' },\r\n      { id: 2, name: 'Images', path: '/images', color: '#34A853' },\r\n      { id: 3, name: 'Projects', path: '/projects', color: '#FBBC05' },\r\n      { id: 4, name: 'Reports', path: '/reports', color: '#EA4335' },\r\n    ];\r\n  }\r\n};\r\n\r\n// Chat API Functions\r\nexport const getChatHistory = async () => {\r\n  try {\r\n    // Since there's no specific chat history endpoint, we'll return an empty array\r\n    // The Chat component will handle creating the initial welcome message\r\n    return [];\r\n  } catch (error) {\r\n    console.error('Error fetching chat history:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const sendChatMessage = async (message) => {\r\n  try {\r\n    // Handle test connection request\r\n    if (message === '__test_connection__') {\r\n      console.log('Testing connection to Azure RAG pipeline...');\r\n      try {\r\n        const token = localStorage.getItem('token');\r\n        if (!token) {\r\n          return { success: false, error: 'No authentication token' };\r\n        }\r\n        \r\n        // Determine the correct authentication header based on token format\r\n        const authHeader = token.startsWith('eyJ') ? `Bearer ${token}` : `Token ${token}`;\r\n        \r\n        // Just check if the chat endpoint is accessible\r\n        const response = await api.get('/apiV1/chat/', {\r\n          headers: { Authorization: authHeader }\r\n        });\r\n        \r\n        return { success: true };\r\n      } catch (error) {\r\n        console.error('Connection test failed:', \r\n          error.response ? `${error.response.status}: ${JSON.stringify(error.response.data)}` : error.message);\r\n        \r\n        // Check specifically for authorization errors\r\n        if (error.response && (error.response.status === 401 || error.response.status === 403)) {\r\n          return { \r\n            success: false, \r\n            error: 'Authentication error', \r\n            authError: true,\r\n            status: error.response.status,\r\n            message: error.response.data?.detail || 'Invalid authentication credentials'\r\n          };\r\n        }\r\n        \r\n        return { \r\n          success: false, \r\n          error: error.response ? `Server error (${error.response.status})` : 'Network error',\r\n          offline: true\r\n        };\r\n      }\r\n    }\r\n    \r\n    // Regular message sending\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n      throw new Error('Authentication required');\r\n    }\r\n    \r\n    // Determine the correct authentication header based on token format\r\n    const headers = { 'Content-Type': 'application/json' };\r\n    if (token.startsWith('eyJ')) {\r\n      // Looks like a JWT token\r\n      headers.Authorization = `Bearer ${token}`;\r\n      console.log('Using Bearer format for JWT token');\r\n    } else {\r\n      // Use Token format for other types\r\n      headers.Authorization = `Token ${token}`;\r\n      console.log('Using Token format');\r\n    }\r\n    \r\n    console.log('Sending message to Azure-powered RAG pipeline...');\r\n    const response = await api.post('/apiV1/chat/', { message }, { headers });\r\n    \r\n    console.log('Chat response received:', response.status);\r\n    return {\r\n      success: true,\r\n      ai_response: response.data.response,\r\n      sources: response.data.sources || [],\r\n    };\r\n  } catch (error) {\r\n    console.error('Chat error:', \r\n      error.response ? `${error.response.status}: ${JSON.stringify(error.response.data)}` : error.message);\r\n    \r\n    // Check specifically for authorization errors\r\n    if (error.response && (error.response.status === 401 || error.response.status === 403)) {\r\n      return { \r\n        success: false, \r\n        error: 'Authentication error', \r\n        authError: true,\r\n        status: error.response.status,\r\n        message: error.response.data?.detail || 'Invalid authentication credentials'\r\n      };\r\n    }\r\n    \r\n    return {\r\n      success: false,\r\n      error: error.response ? `Server error (${error.response.status})` : 'Network error',\r\n      offline: true\r\n    };\r\n  }\r\n};\r\n\r\n// Function to diagnose API endpoints\r\nexport const checkApiEndpoints = async () => {\r\n  const token = localStorage.getItem('token');\r\n  if (!token) {\r\n    console.error('No authentication token available');\r\n    return { authenticated: false, endpoints: [] };\r\n  }\r\n  \r\n  // Prepare headers\r\n  const headers = {\r\n    Authorization: `Token ${token}`,\r\n  };\r\n  \r\n  // List of endpoints to test\r\n  const endpoints = [\r\n    // Common API endpoints\r\n    { method: 'GET', url: '/api/auth/profile/' },\r\n    { method: 'GET', url: '/api/directories/' },\r\n    { method: 'GET', url: '/api/chat/' },\r\n    { method: 'POST', url: '/api/chat/', data: { message: 'test' } },\r\n    \r\n    // V1 API endpoints \r\n    { method: 'GET', url: '/apiV1/profile/' },\r\n    { method: 'GET', url: '/apiV1/directories/' },\r\n    { method: 'GET', url: '/apiV1/ping/' },\r\n    { method: 'POST', url: '/apiV1/chat/', data: { message: 'test' } },\r\n    \r\n    // Azure-specific endpoints (if any)\r\n    { method: 'GET', url: '/apiV1/azure/status/' },\r\n  ];\r\n  \r\n  const results = [];\r\n  \r\n  // Test each endpoint\r\n  for (const endpoint of endpoints) {\r\n    try {\r\n      console.log(`Testing ${endpoint.method} ${endpoint.url}...`);\r\n      \r\n      const config = {\r\n        method: endpoint.method,\r\n        url: endpoint.url,\r\n        headers: headers,\r\n        data: endpoint.data || null\r\n      };\r\n      \r\n      const response = await axios(config);\r\n      \r\n      results.push({\r\n        endpoint: endpoint.url,\r\n        method: endpoint.method,\r\n        status: response.status,\r\n        available: true,\r\n        data: typeof response.data === 'object' ? 'Object received' : 'Data received'\r\n      });\r\n      \r\n      console.log(`✅ ${endpoint.method} ${endpoint.url} - Status: ${response.status}`);\r\n    } catch (error) {\r\n      results.push({\r\n        endpoint: endpoint.url,\r\n        method: endpoint.method,\r\n        status: error.response?.status || 'Network Error',\r\n        available: false,\r\n        error: error.response?.data || error.message\r\n      });\r\n      \r\n      console.log(`❌ ${endpoint.method} ${endpoint.url} - Error: ${error.response?.status || error.message}`);\r\n    }\r\n  }\r\n  \r\n  // Log the summary\r\n  const availableEndpoints = results.filter(e => e.available);\r\n  console.log(`API Endpoint Check Summary: ${availableEndpoints.length}/${endpoints.length} endpoints available`);\r\n  console.table(results);\r\n  \r\n  return {\r\n    authenticated: true,\r\n    endpoints: results,\r\n    availableCount: availableEndpoints.length,\r\n    totalCount: endpoints.length\r\n  };\r\n};\r\n\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}