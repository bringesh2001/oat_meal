{"ast":null,"code":"import axios from 'axios';\n\n// Make sure this points to your Django backend\nconst API_URL = 'http://localhost:8000';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  // Add withCredentials to handle CORS with credentials\n  withCredentials: false\n});\n\n// Add request/response interceptors for better error handling\napi.interceptors.request.use(config => {\n  console.log('Sending request to:', config.url, 'with data:', config.data);\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  console.error('API Request Error:', error);\n  return Promise.reject(error);\n});\napi.interceptors.response.use(response => response, error => {\n  console.error('API Response Error:', error);\n  if (error.response) {\n    console.error('Response data:', error.response.data);\n    console.error('Response status:', error.response.status);\n    console.error('Response headers:', error.response.headers);\n  } else if (error.request) {\n    console.error('No response received. Request:', error.request);\n  }\n  return Promise.reject(error);\n});\n\n// Auth API calls\nexport const loginUser = async credentials => {\n  try {\n    console.log('Logging in with:', credentials);\n    console.log('API URL:', API_URL);\n\n    // Try using direct fetch for more control\n    const response = await fetch(`${API_URL}/api/auth/login/`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(credentials)\n    });\n    console.log('Login response status:', response.status);\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({\n        message: 'Login failed'\n      }));\n      throw errorData;\n    }\n    const data = await response.json();\n    console.log('Login response data:', data);\n\n    // Store token right away for immediate use\n    if (data.token) {\n      console.log('Token received, storing in localStorage');\n      localStorage.setItem('token', data.token);\n\n      // Create a basic user if no user data provided\n      if (!data.user) {\n        const basicUser = {\n          email: credentials.email || 'user@example.com',\n          isAuthenticated: true\n        };\n        data.user = basicUser;\n        localStorage.setItem('user', JSON.stringify(basicUser));\n      } else {\n        localStorage.setItem('user', JSON.stringify(data.user));\n      }\n    } else {\n      console.error('No token in response:', data);\n    }\n    return data;\n  } catch (error) {\n    console.error('Login error details:', error);\n    throw {\n      message: error.message || 'Login failed. Server may be unavailable.'\n    };\n  }\n};\nexport const registerUser = async userData => {\n  try {\n    console.log('Registering with:', userData);\n\n    // Try using fetch directly instead of axios\n    const response = await fetch(`${API_URL}/api/auth/signup/`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData),\n      mode: 'cors' // Explicitly set CORS mode\n    });\n    console.log('Registration response status:', response.status);\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({\n        message: 'Registration failed'\n      }));\n      throw errorData;\n    }\n    const data = await response.json();\n    console.log('Registration response data:', data);\n\n    // Store authentication data right away\n    if (data.token) {\n      localStorage.setItem('token', data.token);\n    }\n    if (data.user) {\n      localStorage.setItem('user', JSON.stringify(data.user));\n    } else if (userData.email) {\n      // Create a basic user object if not provided by server\n      const basicUser = {\n        email: userData.email,\n        fullName: userData.fullName,\n        isAuthenticated: true\n      };\n      data.user = basicUser;\n      localStorage.setItem('user', JSON.stringify(basicUser));\n    }\n    return data;\n  } catch (error) {\n    console.error('Registration error details:', error);\n    throw error.message ? {\n      message: error.message\n    } : {\n      message: 'Registration failed'\n    };\n  }\n};\nexport const getUserProfile = async () => {\n  try {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('No authentication token found');\n    }\n    console.log('Getting user profile with token:', token ? 'Token exists' : 'No token');\n    const response = await api.get('/api/auth/profile/');\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    console.error('Profile fetch error:', error);\n    throw ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || {\n      message: 'Failed to fetch profile'\n    };\n  }\n};\n\n// Chat API calls\nexport const sendChatMessage = message => apiCall('/chat/', {\n  method: 'POST',\n  body: JSON.stringify({\n    message\n  })\n});\nexport const getChatHistory = () => apiCall('/chat/history/', {\n  method: 'GET'\n});\n\n// Helper function for API calls\nconst apiCall = async (endpoint, options = {}) => {\n  const token = localStorage.getItem('token');\n  const defaultHeaders = {\n    'Content-Type': 'application/json',\n    ...(token && {\n      Authorization: `Bearer ${token}`\n    })\n  };\n  const config = {\n    ...options,\n    headers: {\n      ...defaultHeaders,\n      ...options.headers\n    }\n  };\n  const response = await fetch(`${API_URL}${endpoint}`, config);\n  if (!response.ok) {\n    const error = await response.json();\n    throw error;\n  }\n  return response.json();\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","headers","withCredentials","interceptors","request","use","config","console","log","url","data","token","localStorage","getItem","Authorization","error","Promise","reject","response","status","loginUser","credentials","fetch","method","body","JSON","stringify","ok","errorData","json","catch","message","setItem","user","basicUser","email","isAuthenticated","registerUser","userData","mode","fullName","getUserProfile","Error","get","_error$response","sendChatMessage","apiCall","getChatHistory","endpoint","options","defaultHeaders"],"sources":["C:/Users/STSC/Downloads/Agent-Backend-main (3)/my-app/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Make sure this points to your Django backend\r\nconst API_URL = 'http://localhost:8000';\r\n\r\n// Create axios instance with default config\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n  // Add withCredentials to handle CORS with credentials\r\n  withCredentials: false\r\n});\r\n\r\n// Add request/response interceptors for better error handling\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    console.log('Sending request to:', config.url, 'with data:', config.data);\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('API Request Error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    console.error('API Response Error:', error);\r\n    if (error.response) {\r\n      console.error('Response data:', error.response.data);\r\n      console.error('Response status:', error.response.status);\r\n      console.error('Response headers:', error.response.headers);\r\n    } else if (error.request) {\r\n      console.error('No response received. Request:', error.request);\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Auth API calls\r\nexport const loginUser = async (credentials) => {\r\n  try {\r\n    console.log('Logging in with:', credentials);\r\n    console.log('API URL:', API_URL);\r\n    \r\n    // Try using direct fetch for more control\r\n    const response = await fetch(`${API_URL}/api/auth/login/`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(credentials),\r\n    });\r\n    \r\n    console.log('Login response status:', response.status);\r\n    \r\n    if (!response.ok) {\r\n      const errorData = await response.json().catch(() => ({ message: 'Login failed' }));\r\n      throw errorData;\r\n    }\r\n    \r\n    const data = await response.json();\r\n    console.log('Login response data:', data);\r\n    \r\n    // Store token right away for immediate use\r\n    if (data.token) {\r\n      console.log('Token received, storing in localStorage');\r\n      localStorage.setItem('token', data.token);\r\n      \r\n      // Create a basic user if no user data provided\r\n      if (!data.user) {\r\n        const basicUser = { \r\n          email: credentials.email || 'user@example.com',\r\n          isAuthenticated: true\r\n        };\r\n        data.user = basicUser;\r\n        localStorage.setItem('user', JSON.stringify(basicUser));\r\n      } else {\r\n        localStorage.setItem('user', JSON.stringify(data.user));\r\n      }\r\n    } else {\r\n      console.error('No token in response:', data);\r\n    }\r\n    \r\n    return data;\r\n  } catch (error) {\r\n    console.error('Login error details:', error);\r\n    throw { message: error.message || 'Login failed. Server may be unavailable.' };\r\n  }\r\n};\r\n\r\nexport const registerUser = async (userData) => {\r\n  try {\r\n    console.log('Registering with:', userData);\r\n    \r\n    // Try using fetch directly instead of axios\r\n    const response = await fetch(`${API_URL}/api/auth/signup/`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(userData),\r\n      mode: 'cors', // Explicitly set CORS mode\r\n    });\r\n    \r\n    console.log('Registration response status:', response.status);\r\n    \r\n    if (!response.ok) {\r\n      const errorData = await response.json().catch(() => ({ message: 'Registration failed' }));\r\n      throw errorData;\r\n    }\r\n    \r\n    const data = await response.json();\r\n    console.log('Registration response data:', data);\r\n    \r\n    // Store authentication data right away\r\n    if (data.token) {\r\n      localStorage.setItem('token', data.token);\r\n    }\r\n    \r\n    if (data.user) {\r\n      localStorage.setItem('user', JSON.stringify(data.user));\r\n    } else if (userData.email) {\r\n      // Create a basic user object if not provided by server\r\n      const basicUser = {\r\n        email: userData.email,\r\n        fullName: userData.fullName,\r\n        isAuthenticated: true\r\n      };\r\n      data.user = basicUser;\r\n      localStorage.setItem('user', JSON.stringify(basicUser));\r\n    }\r\n    \r\n    return data;\r\n  } catch (error) {\r\n    console.error('Registration error details:', error);\r\n    throw error.message ? { message: error.message } : { message: 'Registration failed' };\r\n  }\r\n};\r\n\r\nexport const getUserProfile = async () => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n      throw new Error('No authentication token found');\r\n    }\r\n    \r\n    console.log('Getting user profile with token:', token ? 'Token exists' : 'No token');\r\n    const response = await api.get('/api/auth/profile/');\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Profile fetch error:', error);\r\n    throw error.response?.data || { message: 'Failed to fetch profile' };\r\n  }\r\n};\r\n\r\n// Chat API calls\r\nexport const sendChatMessage = (message) =>\r\n  apiCall('/chat/', {\r\n    method: 'POST',\r\n    body: JSON.stringify({ message }),\r\n  });\r\n\r\nexport const getChatHistory = () =>\r\n  apiCall('/chat/history/', {\r\n    method: 'GET',\r\n  });\r\n\r\n// Helper function for API calls\r\nconst apiCall = async (endpoint, options = {}) => {\r\n  const token = localStorage.getItem('token');\r\n  \r\n  const defaultHeaders = {\r\n    'Content-Type': 'application/json',\r\n    ...(token && { Authorization: `Bearer ${token}` }),\r\n  };\r\n\r\n  const config = {\r\n    ...options,\r\n    headers: {\r\n      ...defaultHeaders,\r\n      ...options.headers,\r\n    },\r\n  };\r\n\r\n  const response = await fetch(`${API_URL}${endpoint}`, config);\r\n  \r\n  if (!response.ok) {\r\n    const error = await response.json();\r\n    throw error;\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}