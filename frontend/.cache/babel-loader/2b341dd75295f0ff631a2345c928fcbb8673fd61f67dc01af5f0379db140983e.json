{"ast":null,"code":"import axios from 'axios';\n\n// Create an axios instance with the base URL\nconst api = axios.create({\n  baseURL: 'http://127.0.0.1:8000/apiV1/',\n  // Ensure this matches your Django server\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor - adds auth token if available\napi.interceptors.request.use(config => {\n  // Get token from localStorage\n  const token = localStorage.getItem('token');\n\n  // Check if token exists\n  if (token) {\n    console.log(`API Request: Using token for ${config.url}`);\n\n    // Check token format - use Bearer for JWT tokens\n    if (token.startsWith('eyJ')) {\n      // JWT format tokens should use Bearer prefix\n      config.headers.Authorization = `Bearer ${token}`;\n      console.log('Using JWT token with Bearer prefix');\n    } else {\n      // Other token formats use the Django REST Framework Token format\n      config.headers.Authorization = `Token ${token}`;\n      console.log('Using Django REST Framework Token format');\n    }\n\n    // Add detailed debug info for troubleshooting\n    console.log('Authorization header format:', config.headers.Authorization.includes(' ') ? `${config.headers.Authorization.split(' ')[0]} + token` : 'Direct token (no prefix)');\n    console.log('Token length:', token.length);\n  } else {\n    console.log('API Request: No token found');\n  }\n  console.log('Sending token:', token);\n  return config;\n}, error => {\n  console.error('Request interceptor error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor - handles auth errors\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  // Handle 401 Unauthorized errors\n  if (error.response && error.response.status === 401) {\n    console.error('401 Unauthorized error from API:', {\n      url: error.config.url,\n      method: error.config.method,\n      headers: error.config.headers.Authorization ? error.config.headers.Authorization.substring(0, 20) + '...' : 'none',\n      data: error.response.data\n    });\n\n    // Log the full error response for debugging\n    console.error('Full 401 response:', {\n      detail: error.response.data.detail || 'No detail provided',\n      message: error.response.data.message || 'No message provided',\n      rawData: JSON.stringify(error.response.data)\n    });\n\n    // Check if token was invalid\n    if (error.response.data && (error.response.data.detail === 'Invalid token' || error.response.data.message === 'Invalid token')) {\n      console.error('Token was rejected by server - may need to log in again');\n\n      // Keep the token for now, but log the issue\n      // Don't automatically clear it to prevent logout loops\n    }\n  }\n  return Promise.reject(error);\n});\n\n// Auth functions\nexport const loginUser = async ({\n  email,\n  password\n}) => {\n  const API_URL = 'http://127.0.0.1:8000/api/auth/'; // Update base URL if necessary\n  try {\n    console.log('API: Sending login request');\n\n    // Log the email we're using (but never log passwords)\n    console.log('API: Login attempt for:', email);\n    const response = await axios.post(`${API_URL}login/`, {\n      email,\n      password\n    }); // Ensure this matches your backend\n    console.log(`Successful login with ${API_URL}login/`);\n    console.log('Login response structure:', Object.keys(response.data).join(', '));\n\n    // Extract token from various possible formats\n    let token = null;\n    if (response.data.token) {\n      token = response.data.token;\n      console.log('Found token in response.data.token');\n    } else if (response.data.access) {\n      token = response.data.access;\n      console.log('Found token in response.data.access');\n    } else if (response.data.key) {\n      token = response.data.key;\n      console.log('Found token in response.data.key');\n    } else if (typeof response.data === 'string') {\n      // Sometimes the API returns the token directly as a string\n      token = response.data;\n      console.log('Response data is a string, using as token');\n    } else {\n      // Loop through all properties to find one that might be a token\n      for (const key in response.data) {\n        if (typeof response.data[key] === 'string' && (response.data[key].length > 20 || key.toLowerCase().includes('token'))) {\n          token = response.data[key];\n          console.log(`Found possible token in response.data.${key}`);\n          break;\n        }\n      }\n    }\n    if (!token) {\n      console.error('No token found in login response:', response.data);\n      throw new Error('Authentication failed: No token in response');\n    }\n\n    // Log details about the token to help with debugging\n    console.log('Token length:', token.length);\n    console.log('Token starts with:', token.substring(0, 10) + '...');\n    console.log('Appears to be JWT:', token.startsWith('eyJ'));\n\n    // Store the token\n    localStorage.setItem('token', token);\n\n    // Store user info if available in the response\n    if (response.data.user) {\n      console.log('User data found in response:', Object.keys(response.data.user).join(', '));\n      const userData = response.data.user;\n      if (userData.email) {\n        sessionStorage.setItem('lastLoginEmail', userData.email);\n      } else if (typeof email === 'string') {\n        sessionStorage.setItem('lastLoginEmail', email);\n      }\n      if (userData.name) {\n        sessionStorage.setItem('userName', userData.name);\n      } else if (userData.username) {\n        sessionStorage.setItem('userName', userData.username);\n      } else if (userData.first_name) {\n        const fullName = userData.last_name ? `${userData.first_name} ${userData.last_name}` : userData.first_name;\n        sessionStorage.setItem('userName', fullName);\n      } else if (userData.id) {\n        // If we only have user ID, store that\n        sessionStorage.setItem('userId', userData.id.toString());\n      }\n    } else {\n      // If we don't have user info, store the email we logged in with\n      if (typeof email === 'string') {\n        sessionStorage.setItem('lastLoginEmail', email);\n\n        // Extract username from email for a fallback user name\n        const username = email.split('@')[0];\n        if (username) {\n          // Capitalize first letter of username for better display\n          const displayName = username.charAt(0).toUpperCase() + username.slice(1);\n          sessionStorage.setItem('userName', displayName);\n        }\n      }\n    }\n    return {\n      ...response.data,\n      token: token,\n      // Ensure token is in the returned data\n      success: true\n    };\n  } catch (error) {\n    console.error('Login error:', error.response ? `${error.response.status}: ${JSON.stringify(error.response.data)}` : error.message);\n    throw error;\n  }\n};\nexport const signupUser = async userData => {\n  try {\n    console.log('Attempting to sign up user with data:', {\n      ...userData,\n      password: userData.password ? '********' : undefined\n    });\n\n    // Try multiple potential endpoints\n    const possibleEndpoints = ['/api/auth/signup/', '/apiV1/api/auth/signup/', '/users/api/register/', '/apiV1/users/api/register/'];\n    let lastError = null;\n    for (const endpoint of possibleEndpoints) {\n      try {\n        console.log(`Trying signup endpoint: ${endpoint}`);\n        const response = await api.post(endpoint, userData);\n        if (response.status >= 200 && response.status < 300) {\n          console.log(`Signup successful with endpoint: ${endpoint}`);\n          return response.data;\n        }\n      } catch (endpointError) {\n        console.warn(`Signup failed with endpoint ${endpoint}:`, endpointError.response ? endpointError.response.status : 'network error');\n        lastError = endpointError;\n        // Continue to next endpoint\n      }\n    }\n\n    // If we get here, all endpoints failed\n    throw lastError || new Error('All signup endpoints failed');\n  } catch (error) {\n    console.error('API: Signup error:', error.message);\n\n    // Extract meaningful error message\n    let errorMessage = 'Signup failed. Please try again.';\n    if (error.response) {\n      if (error.response.data && typeof error.response.data === 'object') {\n        // Try to extract error message from response data\n        if (error.response.data.message) {\n          errorMessage = error.response.data.message;\n        } else if (error.response.data.error) {\n          errorMessage = error.response.data.error;\n        } else if (error.response.data.detail) {\n          errorMessage = error.response.data.detail;\n        } else {\n          // Format validation errors if they exist\n          const errors = [];\n          Object.entries(error.response.data).forEach(([field, messages]) => {\n            if (Array.isArray(messages)) {\n              errors.push(`${field}: ${messages.join(', ')}`);\n            } else if (typeof messages === 'string') {\n              errors.push(`${field}: ${messages}`);\n            }\n          });\n          if (errors.length > 0) {\n            errorMessage = errors.join('; ');\n          }\n        }\n      } else if (typeof error.response.data === 'string') {\n        errorMessage = error.response.data;\n      }\n    }\n    throw new Error(errorMessage);\n  }\n};\n\n// User profile\nexport const getUserProfile = async () => {\n  try {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('Authentication required');\n    }\n\n    // Determine the correct authentication header based on token format\n    let headers = {};\n    if (token.startsWith('eyJ')) {\n      // For JWT, try direct token approach (no prefix)\n      headers.Authorization = token;\n      console.log('getUserProfile: Using direct JWT token (no prefix)');\n    } else {\n      // Use Token format for other types\n      headers.Authorization = `Token ${token}`;\n      console.log('getUserProfile: Using Django REST Framework Token format');\n    }\n\n    // Try multiple profile endpoints that might exist\n    const possibleEndpoints = ['/apiV1/profile/', '/apiV1/user/profile/', '/apiV1/user/', '/api/auth/profile/', '/api/auth/user/', '/api/user/profile/', '/api/user/', '/api/profile/', '/api/me/', '/admin/' // Try admin endpoint as a test for authentication\n    ];\n    let lastError = null;\n    let userData = null;\n\n    // Try each endpoint until one works\n    for (const endpoint of possibleEndpoints) {\n      try {\n        console.log(`Trying to fetch profile from ${endpoint}`);\n        const response = await api.get(endpoint, {\n          headers\n        });\n        if (response.status === 200 && response.data) {\n          console.log(`Profile found at ${endpoint}:`, response.status);\n          userData = response.data;\n          break;\n        }\n      } catch (endpointError) {\n        console.log(`Profile not found at ${endpoint}:`, endpointError.response ? endpointError.response.status : 'network error');\n        lastError = endpointError;\n        // Continue to the next endpoint\n      }\n    }\n\n    // If we found user data from any endpoint\n    if (userData) {\n      console.log('Profile data found:', Object.keys(userData).join(', '));\n\n      // Store key user info in session storage for fallback\n      if (userData.email) {\n        sessionStorage.setItem('lastLoginEmail', userData.email);\n      }\n      if (userData.name) {\n        sessionStorage.setItem('userName', userData.name);\n      } else if (userData.username) {\n        sessionStorage.setItem('userName', userData.username);\n      } else if (userData.first_name) {\n        const fullName = userData.last_name ? `${userData.first_name} ${userData.last_name}` : userData.first_name;\n        sessionStorage.setItem('userName', fullName);\n      }\n      return userData;\n    }\n\n    // If we get here, no endpoints worked but we have a token\n    // Create a fallback profile based on stored session data\n    console.log('No profile endpoints successful, using fallback data');\n    const email = sessionStorage.getItem('lastLoginEmail');\n    const name = sessionStorage.getItem('userName');\n    if (email) {\n      return {\n        email: email,\n        name: name || 'User',\n        profile_picture: null\n      };\n    }\n\n    // If we have no email, re-throw the last error\n    throw lastError || new Error('Failed to fetch profile from all endpoints');\n  } catch (error) {\n    console.error('Error fetching user profile:', error.response ? `${error.response.status}: ${JSON.stringify(error.response.data)}` : error.message);\n\n    // Create a fallback user object if profile fetch fails\n    const email = sessionStorage.getItem('lastLoginEmail');\n    if (email) {\n      return {\n        email: email,\n        name: sessionStorage.getItem('userName') || 'User',\n        profile_picture: null\n      };\n    }\n    throw error;\n  }\n};\n\n// Directories\nexport const getDirectories = async () => {\n  try {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('Authentication required');\n    }\n\n    // Try with trailing slash first (Django often requires this)\n    const response = await api.get('/apiV1/directories/', {\n      headers: {\n        Authorization: `Token ${token}` // Using Token format for Django REST Framework\n      }\n    });\n    console.log('Directories response:', response.status, response.data);\n    return response.data;\n  } catch (error) {\n    // If we get a 404 with trailing slash, try without\n    if (error.response && error.response.status === 404) {\n      try {\n        const response = await api.get('/apiV1/directories', {\n          headers: {\n            Authorization: `Token ${token}`\n          }\n        });\n        console.log('Directories response (without trailing slash):', response.status, response.data);\n        return response.data;\n      } catch (retryError) {\n        console.error('Error fetching directories (retry):', retryError.response ? retryError.response.status : retryError.message);\n        throw retryError;\n      }\n    }\n    console.error('Error fetching directories:', error.response ? error.response.status : error.message);\n\n    // Return some mock directory data if the API fails\n    return [{\n      id: 1,\n      name: 'Documents',\n      path: '/documents',\n      color: '#4285F4'\n    }, {\n      id: 2,\n      name: 'Images',\n      path: '/images',\n      color: '#34A853'\n    }, {\n      id: 3,\n      name: 'Projects',\n      path: '/projects',\n      color: '#FBBC05'\n    }, {\n      id: 4,\n      name: 'Reports',\n      path: '/reports',\n      color: '#EA4335'\n    }];\n  }\n};\n\n// Chat API Functions\nexport const getChatHistory = async () => {\n  try {\n    // For initial implementation, we'll create a welcome message\n    return [{\n      id: 'welcome',\n      sender: 'bot',\n      content: 'Welcome to FarmSphere.AI, your intelligent farming assistant. How can I help you today?',\n      timestamp: new Date().toISOString()\n    }];\n  } catch (error) {\n    console.error('Error fetching chat history:', error);\n    return [];\n  }\n};\nexport const sendChatMessage = async message => {\n  try {\n    const token = localStorage.getItem('token');\n\n    // Log token status for debugging\n    console.log('Sending chat message with token:', token ? 'Token exists' : 'No token');\n\n    // Set up headers with proper authentication\n    let headers = {};\n    if (token) {\n      if (token.startsWith('eyJ')) {\n        headers.Authorization = `Bearer ${token}`;\n        console.log('Using JWT Bearer token format');\n      } else {\n        headers.Authorization = `Token ${token}`;\n        console.log('Using Django Token format');\n      }\n    }\n\n    // Log the actual authorization header for debugging\n    console.log('Authorization header:', headers.Authorization || 'None');\n\n    // Make request with explicit full URL to avoid any path issues\n    const response = await axios.post('http://127.0.0.1:8000/apiV1/chat/', {\n      message\n    }, {\n      headers\n    });\n    console.log('Chat response received:', response.data);\n    return {\n      content: response.data.response,\n      sender: 'bot',\n      timestamp: response.data.timestamp || new Date().toISOString()\n    };\n  } catch (error) {\n    console.error('Error sending chat message:', error);\n\n    // Check for specific auth errors and handle appropriately\n    if (error.response && error.response.status === 401) {\n      console.warn('Authentication failed - you may need to log in again');\n      // Optional: Redirect to login or reset auth state\n      // localStorage.removeItem('token');\n      // window.location.href = '/login';\n    }\n    throw new Error('Failed to send message. Please try again.');\n  }\n};\n\n// Function to diagnose API endpoints\nexport const checkApiEndpoints = async () => {\n  const token = localStorage.getItem('token');\n  if (!token) {\n    console.error('No authentication token available');\n    return {\n      authenticated: false,\n      endpoints: []\n    };\n  }\n\n  // Prepare headers\n  const headers = {\n    Authorization: `Token ${token}`\n  };\n\n  // List of endpoints to test\n  const endpoints = [\n  // Common API endpoints\n  {\n    method: 'GET',\n    url: '/api/auth/profile/'\n  }, {\n    method: 'GET',\n    url: '/api/directories/'\n  }, {\n    method: 'GET',\n    url: '/api/chat/'\n  }, {\n    method: 'POST',\n    url: '/api/chat/',\n    data: {\n      message: 'test'\n    }\n  },\n  // V1 API endpoints \n  {\n    method: 'GET',\n    url: '/apiV1/profile/'\n  }, {\n    method: 'GET',\n    url: '/apiV1/directories/'\n  }, {\n    method: 'GET',\n    url: '/apiV1/ping/'\n  }, {\n    method: 'POST',\n    url: '/apiV1/chat/',\n    data: {\n      message: 'test'\n    }\n  },\n  // Azure-specific endpoints (if any)\n  {\n    method: 'GET',\n    url: '/apiV1/azure/status/'\n  }];\n  const results = [];\n\n  // Test each endpoint\n  for (const endpoint of endpoints) {\n    try {\n      console.log(`Testing ${endpoint.method} ${endpoint.url}...`);\n      const config = {\n        method: endpoint.method,\n        url: endpoint.url,\n        headers: headers,\n        data: endpoint.data || null\n      };\n      const response = await axios(config);\n      results.push({\n        endpoint: endpoint.url,\n        method: endpoint.method,\n        status: response.status,\n        available: true,\n        data: typeof response.data === 'object' ? 'Object received' : 'Data received'\n      });\n      console.log(`✅ ${endpoint.method} ${endpoint.url} - Status: ${response.status}`);\n    } catch (error) {\n      var _error$response, _error$response2, _error$response3;\n      results.push({\n        endpoint: endpoint.url,\n        method: endpoint.method,\n        status: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) || 'Network Error',\n        available: false,\n        error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message\n      });\n      console.log(`❌ ${endpoint.method} ${endpoint.url} - Error: ${((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) || error.message}`);\n    }\n  }\n\n  // Log the summary\n  const availableEndpoints = results.filter(e => e.available);\n  console.log(`API Endpoint Check Summary: ${availableEndpoints.length}/${endpoints.length} endpoints available`);\n  console.table(results);\n  return {\n    authenticated: true,\n    endpoints: results,\n    availableCount: availableEndpoints.length,\n    totalCount: endpoints.length\n  };\n};\n\n/**\r\n * Tests a specific endpoint and returns detailed status information\r\n * @param {string} endpoint - The endpoint path to test (e.g., '/api/chat/')\r\n * @returns {Object} - Object containing status information\r\n */\nexport const testEndpoint = async endpoint => {\n  const baseUrl = 'http://127.0.0.1:8000'; // Django backend URL\n  const url = `${baseUrl}${endpoint}`;\n  try {\n    // Get token if available and use appropriate format\n    const token = localStorage.getItem('token');\n    let headers = {};\n    if (token) {\n      if (token.startsWith('eyJ')) {\n        // For JWT, try direct token approach (no prefix)\n        headers.Authorization = token;\n        console.log('Using direct JWT token (no prefix)');\n      } else {\n        // Other token formats use the Django REST Framework Token format\n        headers.Authorization = `Token ${token}`;\n        console.log('Using Django REST Framework Token format');\n      }\n    }\n    console.log(`Testing endpoint: ${url}`);\n    console.log('Authorization header:', token ? headers.Authorization.substring(0, 15) + '...' : 'None');\n\n    // For GET endpoints\n    const response = await axios.get(url, {\n      headers,\n      // Don't throw error on non-2xx responses - we want to handle them ourselves\n      validateStatus: () => true\n    });\n    console.log(`Endpoint ${url} response:`, response.status, response.statusText);\n\n    // A 404 means the server is running but endpoint doesn't exist\n    if (response.status === 404) {\n      return {\n        url,\n        status: 404,\n        available: false,\n        serverRunning: true,\n        message: \"Endpoint not found, but server is running\",\n        data: response.data\n      };\n    }\n\n    // Auth errors\n    if (response.status === 401 || response.status === 403) {\n      return {\n        url,\n        status: response.status,\n        available: false,\n        authError: true,\n        message: response.status === 401 ? \"Unauthorized - Invalid or missing token\" : \"Forbidden\",\n        data: response.data\n      };\n    }\n\n    // Success (2xx) responses\n    if (response.status >= 200 && response.status < 300) {\n      return {\n        url,\n        status: response.status,\n        available: true,\n        message: \"Endpoint available\",\n        data: response.data\n      };\n    }\n\n    // Other responses\n    return {\n      url,\n      status: response.status,\n      available: false,\n      message: `Endpoint responded with: ${response.status} ${response.statusText}`,\n      data: response.data\n    };\n  } catch (error) {\n    var _error$response4;\n    console.error(`Error testing endpoint ${url}:`, error);\n\n    // Network errors (server not running)\n    if (error.code === 'ERR_NETWORK') {\n      return {\n        url,\n        status: 'Network Error',\n        available: false,\n        serverRunning: false,\n        message: \"Server not running or network error\",\n        error: error.message\n      };\n    }\n    return {\n      url,\n      status: ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status) || 'Error',\n      available: false,\n      message: `Error: ${error.message}`,\n      error: error.message\n    };\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","console","log","url","startsWith","Authorization","includes","split","length","error","Promise","reject","response","status","method","substring","data","detail","message","rawData","JSON","stringify","loginUser","email","password","API_URL","post","Object","keys","join","access","key","toLowerCase","Error","setItem","user","userData","sessionStorage","name","username","first_name","fullName","last_name","id","toString","displayName","charAt","toUpperCase","slice","success","signupUser","undefined","possibleEndpoints","lastError","endpoint","endpointError","warn","errorMessage","errors","entries","forEach","field","messages","Array","isArray","push","getUserProfile","get","profile_picture","getDirectories","retryError","path","color","getChatHistory","sender","content","timestamp","Date","toISOString","sendChatMessage","checkApiEndpoints","authenticated","endpoints","results","available","_error$response","_error$response2","_error$response3","availableEndpoints","filter","e","table","availableCount","totalCount","testEndpoint","baseUrl","validateStatus","statusText","serverRunning","authError","_error$response4","code"],"sources":["C:/Users/STSC/Downloads/Agent-Backend-main (3)/my-app/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create an axios instance with the base URL\r\nconst api = axios.create({\r\n  baseURL: 'http://127.0.0.1:8000/apiV1/', // Ensure this matches your Django server\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  }\r\n});\r\n\r\n// Request interceptor - adds auth token if available\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    // Get token from localStorage\r\n    const token = localStorage.getItem('token');\r\n    \r\n    // Check if token exists\r\n    if (token) {\r\n      console.log(`API Request: Using token for ${config.url}`);\r\n      \r\n      // Check token format - use Bearer for JWT tokens\r\n      if (token.startsWith('eyJ')) {\r\n        // JWT format tokens should use Bearer prefix\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n        console.log('Using JWT token with Bearer prefix');\r\n      } else {\r\n        // Other token formats use the Django REST Framework Token format\r\n        config.headers.Authorization = `Token ${token}`;\r\n        console.log('Using Django REST Framework Token format');\r\n      }\r\n      \r\n      // Add detailed debug info for troubleshooting\r\n      console.log('Authorization header format:', config.headers.Authorization.includes(' ') ? \r\n        `${config.headers.Authorization.split(' ')[0]} + token` : 'Direct token (no prefix)');\r\n      console.log('Token length:', token.length);\r\n    } else {\r\n      console.log('API Request: No token found');\r\n    }\r\n    \r\n    console.log('Sending token:', token);\r\n    \r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('Request interceptor error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor - handles auth errors\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    // Handle 401 Unauthorized errors\r\n    if (error.response && error.response.status === 401) {\r\n      console.error('401 Unauthorized error from API:', {\r\n        url: error.config.url,\r\n        method: error.config.method,\r\n        headers: error.config.headers.Authorization ? \r\n          error.config.headers.Authorization.substring(0, 20) + '...' : 'none',\r\n        data: error.response.data\r\n      });\r\n      \r\n      // Log the full error response for debugging\r\n      console.error('Full 401 response:', {\r\n        detail: error.response.data.detail || 'No detail provided',\r\n        message: error.response.data.message || 'No message provided',\r\n        rawData: JSON.stringify(error.response.data)\r\n      });\r\n      \r\n      // Check if token was invalid\r\n      if (error.response.data && \r\n          (error.response.data.detail === 'Invalid token' || \r\n           error.response.data.message === 'Invalid token')) {\r\n        console.error('Token was rejected by server - may need to log in again');\r\n        \r\n        // Keep the token for now, but log the issue\r\n        // Don't automatically clear it to prevent logout loops\r\n      }\r\n    }\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Auth functions\r\nexport const loginUser = async ({ email, password }) => {\r\n  const API_URL = 'http://127.0.0.1:8000/api/auth/'; // Update base URL if necessary\r\n  try {\r\n    console.log('API: Sending login request');\r\n    \r\n    // Log the email we're using (but never log passwords)\r\n    console.log('API: Login attempt for:', email);\r\n    \r\n    const response = await axios.post(`${API_URL}login/`, { email, password }); // Ensure this matches your backend\r\n    console.log(`Successful login with ${API_URL}login/`);\r\n    \r\n    console.log('Login response structure:', Object.keys(response.data).join(', '));\r\n    \r\n    // Extract token from various possible formats\r\n    let token = null;\r\n    \r\n    if (response.data.token) {\r\n      token = response.data.token;\r\n      console.log('Found token in response.data.token');\r\n    } else if (response.data.access) {\r\n      token = response.data.access;\r\n      console.log('Found token in response.data.access');\r\n    } else if (response.data.key) {\r\n      token = response.data.key;\r\n      console.log('Found token in response.data.key');\r\n    } else if (typeof response.data === 'string') {\r\n      // Sometimes the API returns the token directly as a string\r\n      token = response.data;\r\n      console.log('Response data is a string, using as token');\r\n    } else {\r\n      // Loop through all properties to find one that might be a token\r\n      for (const key in response.data) {\r\n        if (\r\n          typeof response.data[key] === 'string' && \r\n          (response.data[key].length > 20 || key.toLowerCase().includes('token'))\r\n        ) {\r\n          token = response.data[key];\r\n          console.log(`Found possible token in response.data.${key}`);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    \r\n    if (!token) {\r\n      console.error('No token found in login response:', response.data);\r\n      throw new Error('Authentication failed: No token in response');\r\n    }\r\n    \r\n    // Log details about the token to help with debugging\r\n    console.log('Token length:', token.length);\r\n    console.log('Token starts with:', token.substring(0, 10) + '...');\r\n    console.log('Appears to be JWT:', token.startsWith('eyJ'));\r\n    \r\n    // Store the token\r\n    localStorage.setItem('token', token);\r\n    \r\n    // Store user info if available in the response\r\n    if (response.data.user) {\r\n      console.log('User data found in response:', Object.keys(response.data.user).join(', '));\r\n      const userData = response.data.user;\r\n      \r\n      if (userData.email) {\r\n        sessionStorage.setItem('lastLoginEmail', userData.email);\r\n      } else if (typeof email === 'string') {\r\n        sessionStorage.setItem('lastLoginEmail', email);\r\n      }\r\n      \r\n      if (userData.name) {\r\n        sessionStorage.setItem('userName', userData.name);\r\n      } else if (userData.username) {\r\n        sessionStorage.setItem('userName', userData.username);\r\n      } else if (userData.first_name) {\r\n        const fullName = userData.last_name \r\n          ? `${userData.first_name} ${userData.last_name}`\r\n          : userData.first_name;\r\n        sessionStorage.setItem('userName', fullName);\r\n      } else if (userData.id) {\r\n        // If we only have user ID, store that\r\n        sessionStorage.setItem('userId', userData.id.toString());\r\n      }\r\n    } else {\r\n      // If we don't have user info, store the email we logged in with\r\n      if (typeof email === 'string') {\r\n        sessionStorage.setItem('lastLoginEmail', email);\r\n        \r\n        // Extract username from email for a fallback user name\r\n        const username = email.split('@')[0];\r\n        if (username) {\r\n          // Capitalize first letter of username for better display\r\n          const displayName = username.charAt(0).toUpperCase() + username.slice(1);\r\n          sessionStorage.setItem('userName', displayName);\r\n        }\r\n      }\r\n    }\r\n    \r\n    return {\r\n      ...response.data,\r\n      token: token, // Ensure token is in the returned data\r\n      success: true\r\n    };\r\n  } catch (error) {\r\n    console.error('Login error:', error.response ? `${error.response.status}: ${JSON.stringify(error.response.data)}` : error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const signupUser = async (userData) => {\r\n  try {\r\n    console.log('Attempting to sign up user with data:', {\r\n      ...userData,\r\n      password: userData.password ? '********' : undefined\r\n    });\r\n    \r\n    // Try multiple potential endpoints\r\n    const possibleEndpoints = [\r\n      '/api/auth/signup/',\r\n      '/apiV1/api/auth/signup/',\r\n      '/users/api/register/',\r\n      '/apiV1/users/api/register/'\r\n    ];\r\n    \r\n    let lastError = null;\r\n    \r\n    for (const endpoint of possibleEndpoints) {\r\n      try {\r\n        console.log(`Trying signup endpoint: ${endpoint}`);\r\n        const response = await api.post(endpoint, userData);\r\n        \r\n        if (response.status >= 200 && response.status < 300) {\r\n          console.log(`Signup successful with endpoint: ${endpoint}`);\r\n          return response.data;\r\n        }\r\n      } catch (endpointError) {\r\n        console.warn(`Signup failed with endpoint ${endpoint}:`, \r\n          endpointError.response ? endpointError.response.status : 'network error');\r\n        lastError = endpointError;\r\n        // Continue to next endpoint\r\n      }\r\n    }\r\n    \r\n    // If we get here, all endpoints failed\r\n    throw lastError || new Error('All signup endpoints failed');\r\n  } catch (error) {\r\n    console.error('API: Signup error:', error.message);\r\n    \r\n    // Extract meaningful error message\r\n    let errorMessage = 'Signup failed. Please try again.';\r\n    \r\n    if (error.response) {\r\n      if (error.response.data && typeof error.response.data === 'object') {\r\n        // Try to extract error message from response data\r\n        if (error.response.data.message) {\r\n          errorMessage = error.response.data.message;\r\n        } else if (error.response.data.error) {\r\n          errorMessage = error.response.data.error;\r\n        } else if (error.response.data.detail) {\r\n          errorMessage = error.response.data.detail;\r\n        } else {\r\n          // Format validation errors if they exist\r\n          const errors = [];\r\n          Object.entries(error.response.data).forEach(([field, messages]) => {\r\n            if (Array.isArray(messages)) {\r\n              errors.push(`${field}: ${messages.join(', ')}`);\r\n            } else if (typeof messages === 'string') {\r\n              errors.push(`${field}: ${messages}`);\r\n            }\r\n          });\r\n          \r\n          if (errors.length > 0) {\r\n            errorMessage = errors.join('; ');\r\n          }\r\n        }\r\n      } else if (typeof error.response.data === 'string') {\r\n        errorMessage = error.response.data;\r\n      }\r\n    }\r\n    \r\n    throw new Error(errorMessage);\r\n  }\r\n};\r\n\r\n// User profile\r\nexport const getUserProfile = async () => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n      throw new Error('Authentication required');\r\n    }\r\n\r\n    // Determine the correct authentication header based on token format\r\n    let headers = {};\r\n    if (token.startsWith('eyJ')) {\r\n      // For JWT, try direct token approach (no prefix)\r\n      headers.Authorization = token;\r\n      console.log('getUserProfile: Using direct JWT token (no prefix)');\r\n    } else {\r\n      // Use Token format for other types\r\n      headers.Authorization = `Token ${token}`;\r\n      console.log('getUserProfile: Using Django REST Framework Token format');\r\n    }\r\n\r\n    // Try multiple profile endpoints that might exist\r\n    const possibleEndpoints = [\r\n      '/apiV1/profile/',\r\n      '/apiV1/user/profile/',\r\n      '/apiV1/user/',\r\n      '/api/auth/profile/',\r\n      '/api/auth/user/',\r\n      '/api/user/profile/',\r\n      '/api/user/',\r\n      '/api/profile/',\r\n      '/api/me/',\r\n      '/admin/'  // Try admin endpoint as a test for authentication\r\n    ];\r\n    \r\n    let lastError = null;\r\n    let userData = null;\r\n    \r\n    // Try each endpoint until one works\r\n    for (const endpoint of possibleEndpoints) {\r\n      try {\r\n        console.log(`Trying to fetch profile from ${endpoint}`);\r\n        const response = await api.get(endpoint, { headers });\r\n        \r\n        if (response.status === 200 && response.data) {\r\n          console.log(`Profile found at ${endpoint}:`, response.status);\r\n          userData = response.data;\r\n          break;\r\n        }\r\n      } catch (endpointError) {\r\n        console.log(`Profile not found at ${endpoint}:`, \r\n          endpointError.response ? endpointError.response.status : 'network error');\r\n        lastError = endpointError;\r\n        // Continue to the next endpoint\r\n      }\r\n    }\r\n    \r\n    // If we found user data from any endpoint\r\n    if (userData) {\r\n      console.log('Profile data found:', Object.keys(userData).join(', '));\r\n      \r\n      // Store key user info in session storage for fallback\r\n      if (userData.email) {\r\n        sessionStorage.setItem('lastLoginEmail', userData.email);\r\n      }\r\n      \r\n      if (userData.name) {\r\n        sessionStorage.setItem('userName', userData.name);\r\n      } else if (userData.username) {\r\n        sessionStorage.setItem('userName', userData.username);\r\n      } else if (userData.first_name) {\r\n        const fullName = userData.last_name \r\n          ? `${userData.first_name} ${userData.last_name}`\r\n          : userData.first_name;\r\n        sessionStorage.setItem('userName', fullName);\r\n      }\r\n      \r\n      return userData;\r\n    }\r\n    \r\n    // If we get here, no endpoints worked but we have a token\r\n    // Create a fallback profile based on stored session data\r\n    console.log('No profile endpoints successful, using fallback data');\r\n    const email = sessionStorage.getItem('lastLoginEmail');\r\n    const name = sessionStorage.getItem('userName');\r\n    \r\n    if (email) {\r\n      return {\r\n        email: email,\r\n        name: name || 'User',\r\n        profile_picture: null,\r\n      };\r\n    }\r\n    \r\n    // If we have no email, re-throw the last error\r\n    throw lastError || new Error('Failed to fetch profile from all endpoints');\r\n  } catch (error) {\r\n    console.error('Error fetching user profile:', \r\n      error.response ? `${error.response.status}: ${JSON.stringify(error.response.data)}` : error.message);\r\n    \r\n    // Create a fallback user object if profile fetch fails\r\n    const email = sessionStorage.getItem('lastLoginEmail');\r\n    if (email) {\r\n      return {\r\n        email: email,\r\n        name: sessionStorage.getItem('userName') || 'User',\r\n        profile_picture: null,\r\n      };\r\n    }\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Directories\r\nexport const getDirectories = async () => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n      throw new Error('Authentication required');\r\n    }\r\n\r\n    // Try with trailing slash first (Django often requires this)\r\n    const response = await api.get('/apiV1/directories/', {\r\n      headers: {\r\n        Authorization: `Token ${token}`, // Using Token format for Django REST Framework\r\n      },\r\n    });\r\n\r\n    console.log('Directories response:', response.status, response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    // If we get a 404 with trailing slash, try without\r\n    if (error.response && error.response.status === 404) {\r\n      try {\r\n        const response = await api.get('/apiV1/directories', {\r\n          headers: {\r\n            Authorization: `Token ${token}`,\r\n          },\r\n        });\r\n        console.log('Directories response (without trailing slash):', response.status, response.data);\r\n        return response.data;\r\n      } catch (retryError) {\r\n        console.error('Error fetching directories (retry):', retryError.response ? retryError.response.status : retryError.message);\r\n        throw retryError;\r\n      }\r\n    }\r\n\r\n    console.error('Error fetching directories:', error.response ? error.response.status : error.message);\r\n    \r\n    // Return some mock directory data if the API fails\r\n    return [\r\n      { id: 1, name: 'Documents', path: '/documents', color: '#4285F4' },\r\n      { id: 2, name: 'Images', path: '/images', color: '#34A853' },\r\n      { id: 3, name: 'Projects', path: '/projects', color: '#FBBC05' },\r\n      { id: 4, name: 'Reports', path: '/reports', color: '#EA4335' },\r\n    ];\r\n  }\r\n};\r\n\r\n// Chat API Functions\r\nexport const getChatHistory = async () => {\r\n  try {\r\n    // For initial implementation, we'll create a welcome message\r\n    return [\r\n      {\r\n        id: 'welcome',\r\n        sender: 'bot',\r\n        content: 'Welcome to FarmSphere.AI, your intelligent farming assistant. How can I help you today?',\r\n        timestamp: new Date().toISOString()\r\n      }\r\n    ];\r\n  } catch (error) {\r\n    console.error('Error fetching chat history:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const sendChatMessage = async (message) => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    \r\n    // Log token status for debugging\r\n    console.log('Sending chat message with token:', token ? 'Token exists' : 'No token');\r\n    \r\n    // Set up headers with proper authentication\r\n    let headers = {};\r\n    if (token) {\r\n      if (token.startsWith('eyJ')) {\r\n        headers.Authorization = `Bearer ${token}`;\r\n        console.log('Using JWT Bearer token format');\r\n      } else {\r\n        headers.Authorization = `Token ${token}`;\r\n        console.log('Using Django Token format');\r\n      }\r\n    }\r\n    \r\n    // Log the actual authorization header for debugging\r\n    console.log('Authorization header:', headers.Authorization || 'None');\r\n    \r\n    // Make request with explicit full URL to avoid any path issues\r\n    const response = await axios.post(\r\n      'http://127.0.0.1:8000/apiV1/chat/', \r\n      { message }, \r\n      { headers }\r\n    );\r\n    \r\n    console.log('Chat response received:', response.data);\r\n    \r\n    return {\r\n      content: response.data.response,\r\n      sender: 'bot',\r\n      timestamp: response.data.timestamp || new Date().toISOString()\r\n    };\r\n  } catch (error) {\r\n    console.error('Error sending chat message:', error);\r\n    \r\n    // Check for specific auth errors and handle appropriately\r\n    if (error.response && error.response.status === 401) {\r\n      console.warn('Authentication failed - you may need to log in again');\r\n      // Optional: Redirect to login or reset auth state\r\n      // localStorage.removeItem('token');\r\n      // window.location.href = '/login';\r\n    }\r\n    \r\n    throw new Error('Failed to send message. Please try again.');\r\n  }\r\n};\r\n\r\n// Function to diagnose API endpoints\r\nexport const checkApiEndpoints = async () => {\r\n  const token = localStorage.getItem('token');\r\n  if (!token) {\r\n    console.error('No authentication token available');\r\n    return { authenticated: false, endpoints: [] };\r\n  }\r\n  \r\n  // Prepare headers\r\n  const headers = {\r\n    Authorization: `Token ${token}`,\r\n  };\r\n  \r\n  // List of endpoints to test\r\n  const endpoints = [\r\n    // Common API endpoints\r\n    { method: 'GET', url: '/api/auth/profile/' },\r\n    { method: 'GET', url: '/api/directories/' },\r\n    { method: 'GET', url: '/api/chat/' },\r\n    { method: 'POST', url: '/api/chat/', data: { message: 'test' } },\r\n    \r\n    // V1 API endpoints \r\n    { method: 'GET', url: '/apiV1/profile/' },\r\n    { method: 'GET', url: '/apiV1/directories/' },\r\n    { method: 'GET', url: '/apiV1/ping/' },\r\n    { method: 'POST', url: '/apiV1/chat/', data: { message: 'test' } },\r\n    \r\n    // Azure-specific endpoints (if any)\r\n    { method: 'GET', url: '/apiV1/azure/status/' },\r\n  ];\r\n  \r\n  const results = [];\r\n  \r\n  // Test each endpoint\r\n  for (const endpoint of endpoints) {\r\n    try {\r\n      console.log(`Testing ${endpoint.method} ${endpoint.url}...`);\r\n      \r\n      const config = {\r\n        method: endpoint.method,\r\n        url: endpoint.url,\r\n        headers: headers,\r\n        data: endpoint.data || null\r\n      };\r\n      \r\n      const response = await axios(config);\r\n      \r\n      results.push({\r\n        endpoint: endpoint.url,\r\n        method: endpoint.method,\r\n        status: response.status,\r\n        available: true,\r\n        data: typeof response.data === 'object' ? 'Object received' : 'Data received'\r\n      });\r\n      \r\n      console.log(`✅ ${endpoint.method} ${endpoint.url} - Status: ${response.status}`);\r\n    } catch (error) {\r\n      results.push({\r\n        endpoint: endpoint.url,\r\n        method: endpoint.method,\r\n        status: error.response?.status || 'Network Error',\r\n        available: false,\r\n        error: error.response?.data || error.message\r\n      });\r\n      \r\n      console.log(`❌ ${endpoint.method} ${endpoint.url} - Error: ${error.response?.status || error.message}`);\r\n    }\r\n  }\r\n  \r\n  // Log the summary\r\n  const availableEndpoints = results.filter(e => e.available);\r\n  console.log(`API Endpoint Check Summary: ${availableEndpoints.length}/${endpoints.length} endpoints available`);\r\n  console.table(results);\r\n  \r\n  return {\r\n    authenticated: true,\r\n    endpoints: results,\r\n    availableCount: availableEndpoints.length,\r\n    totalCount: endpoints.length\r\n  };\r\n};\r\n\r\n/**\r\n * Tests a specific endpoint and returns detailed status information\r\n * @param {string} endpoint - The endpoint path to test (e.g., '/api/chat/')\r\n * @returns {Object} - Object containing status information\r\n */\r\nexport const testEndpoint = async (endpoint) => {\r\n  const baseUrl = 'http://127.0.0.1:8000'; // Django backend URL\r\n  const url = `${baseUrl}${endpoint}`;\r\n  \r\n  try {\r\n    // Get token if available and use appropriate format\r\n    const token = localStorage.getItem('token');\r\n    let headers = {};\r\n    \r\n    if (token) {\r\n      if (token.startsWith('eyJ')) {\r\n        // For JWT, try direct token approach (no prefix)\r\n        headers.Authorization = token;\r\n        console.log('Using direct JWT token (no prefix)');\r\n      } else {\r\n        // Other token formats use the Django REST Framework Token format\r\n        headers.Authorization = `Token ${token}`;\r\n        console.log('Using Django REST Framework Token format');\r\n      }\r\n    }\r\n    \r\n    console.log(`Testing endpoint: ${url}`);\r\n    console.log('Authorization header:', token ? headers.Authorization.substring(0, 15) + '...' : 'None');\r\n    \r\n    // For GET endpoints\r\n    const response = await axios.get(url, { \r\n      headers,\r\n      // Don't throw error on non-2xx responses - we want to handle them ourselves\r\n      validateStatus: () => true\r\n    });\r\n    \r\n    console.log(`Endpoint ${url} response:`, response.status, response.statusText);\r\n    \r\n    // A 404 means the server is running but endpoint doesn't exist\r\n    if (response.status === 404) {\r\n      return {\r\n        url,\r\n        status: 404,\r\n        available: false,\r\n        serverRunning: true,\r\n        message: \"Endpoint not found, but server is running\",\r\n        data: response.data\r\n      };\r\n    }\r\n    \r\n    // Auth errors\r\n    if (response.status === 401 || response.status === 403) {\r\n      return {\r\n        url,\r\n        status: response.status,\r\n        available: false,\r\n        authError: true,\r\n        message: response.status === 401 ? \"Unauthorized - Invalid or missing token\" : \"Forbidden\",\r\n        data: response.data\r\n      };\r\n    }\r\n    \r\n    // Success (2xx) responses\r\n    if (response.status >= 200 && response.status < 300) {\r\n      return {\r\n        url,\r\n        status: response.status,\r\n        available: true,\r\n        message: \"Endpoint available\",\r\n        data: response.data\r\n      };\r\n    }\r\n    \r\n    // Other responses\r\n    return {\r\n      url,\r\n      status: response.status,\r\n      available: false,\r\n      message: `Endpoint responded with: ${response.status} ${response.statusText}`,\r\n      data: response.data\r\n    };\r\n  } catch (error) {\r\n    console.error(`Error testing endpoint ${url}:`, error);\r\n    \r\n    // Network errors (server not running)\r\n    if (error.code === 'ERR_NETWORK') {\r\n      return {\r\n        url,\r\n        status: 'Network Error',\r\n        available: false,\r\n        serverRunning: false,\r\n        message: \"Server not running or network error\",\r\n        error: error.message\r\n      };\r\n    }\r\n    \r\n    return {\r\n      url,\r\n      status: error.response?.status || 'Error',\r\n      available: false,\r\n      message: `Error: ${error.message}`,\r\n      error: error.message\r\n    };\r\n  }\r\n};\r\n\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}