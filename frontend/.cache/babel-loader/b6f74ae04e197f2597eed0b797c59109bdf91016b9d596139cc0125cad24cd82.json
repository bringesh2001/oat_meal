{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\STSC\\\\Downloads\\\\Agent-Backend-main (3)\\\\my-app\\\\src\\\\pages\\\\Chat.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Navigate, useNavigate } from 'react-router-dom';\nimport { getChatHistory, sendChatMessage, getUserProfile, checkApiEndpoints } from '../services/api';\nimport '../styles/Chat.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chat() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState('checking'); // 'checking', 'online', 'offline'\n  const [retryCount, setRetryCount] = useState(0);\n  const [userProfile, setUserProfile] = useState(null);\n  const [diagnosticMode, setDiagnosticMode] = useState(false);\n  const [diagnosticResults, setDiagnosticResults] = useState(null);\n  const [authError, setAuthError] = useState(null);\n  const messagesEndRef = useRef(null);\n  const navigate = useNavigate();\n\n  // Function to handle logout\n  const handleLogout = () => {\n    localStorage.removeItem('token');\n    sessionStorage.removeItem('userName');\n    sessionStorage.removeItem('lastLoginEmail');\n    setIsAuthenticated(false);\n    navigate('/login');\n  };\n\n  // Check authentication first\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      setIsAuthenticated(true);\n\n      // Check if token appears to be JWT format (starts with eyJ)\n      const isJWT = token.startsWith('eyJ');\n      console.log('Token appears to be JWT format:', isJWT);\n\n      // Try to get user profile\n      getUserProfile().then(profile => {\n        console.log('Loaded user profile:', profile);\n        setUserProfile(profile);\n        sessionStorage.setItem('userName', profile.name || profile.email || 'User');\n        setAuthError(null); // Clear any auth errors\n      }).catch(err => {\n        console.error('Failed to load profile:', err);\n\n        // If we get a specific authentication error\n        if (err.message === 'Authentication required' || err.message === 'Session expired. Please log in again.') {\n          setAuthError(err.message);\n          // Delay logout to allow error to be displayed\n          setTimeout(() => handleLogout(), 3000);\n        }\n      });\n    } else {\n      setIsAuthenticated(false);\n    }\n    setLoading(false);\n  }, []);\n\n  // Test connectivity to backend\n  const testBackendConnection = async () => {\n    try {\n      setConnectionStatus('checking');\n      const result = await sendChatMessage('__test_connection__');\n      if (result.success) {\n        setConnectionStatus('online');\n      } else if (result.authError) {\n        console.error('Authentication error during connection test:', result.message);\n        setAuthError(`Authentication error: ${result.message}`);\n        setTimeout(() => handleLogout(), 3000);\n      } else {\n        setConnectionStatus('offline');\n        console.error('Backend connection test failed:', result.error);\n      }\n    } catch (error) {\n      setConnectionStatus('offline');\n      console.error('Error testing backend connection:', error);\n\n      // Handle authentication errors\n      if (error.response && (error.response.status === 401 || error.response.status === 403)) {\n        var _error$response$data;\n        setAuthError('Authentication error: ' + (((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || 'Invalid token'));\n        setTimeout(() => handleLogout(), 3000);\n      }\n    }\n  };\n\n  // Function to run API diagnostics\n  const runDiagnostics = async () => {\n    setDiagnosticMode(true);\n    try {\n      const results = await checkApiEndpoints();\n      setDiagnosticResults(results);\n\n      // Add a diagnostic message to the chat\n      const diagMessage = {\n        id: Date.now(),\n        content: `API Diagnostics: ${results.availableCount}/${results.totalCount} endpoints available. Check browser console for details.`,\n        sender: 'System',\n        timestamp: new Date().toISOString(),\n        isCurrentUser: false,\n        isDiagnostic: true\n      };\n      setMessages(prev => [...prev, diagMessage]);\n\n      // If we found working endpoints, try connecting again\n      if (results.availableCount > 0) {\n        const workingChatEndpoint = results.endpoints.find(e => e.available && e.method === 'POST' && e.url.includes('/chat/'));\n        if (workingChatEndpoint) {\n          await testBackendConnection();\n        }\n      }\n    } catch (error) {\n      console.error('Diagnostics failed:', error);\n\n      // Add error message\n      const errorMessage = {\n        id: Date.now(),\n        content: \"Diagnostics failed. Please check your network connection and browser console for details.\",\n        sender: 'System',\n        timestamp: new Date().toISOString(),\n        isCurrentUser: false,\n        isDiagnostic: true\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setDiagnosticMode(false);\n    }\n  };\n\n  // Fetch messages when component mounts\n  useEffect(() => {\n    if (!isAuthenticated) return;\n    const fetchMessages = async () => {\n      try {\n        setLoading(true);\n        const data = await getChatHistory();\n        if (Array.isArray(data) && data.length > 0) {\n          setMessages(data);\n          // If we got history, we're online\n          setConnectionStatus('online');\n        } else if (messages.length === 0) {\n          // Add a welcome message if we don't have any messages\n          setMessages([{\n            id: Date.now(),\n            content: \"Hello! I'm the AI Assistant powered by Azure OpenAI. How can I help you today?\",\n            sender: 'Azure AI',\n            timestamp: new Date().toISOString(),\n            isCurrentUser: false\n          }]);\n\n          // Try to connect to backend to set proper status\n          await testBackendConnection();\n        }\n      } catch (error) {\n        console.error(\"Failed to fetch messages:\", error);\n\n        // If we've tried less than 3 times, attempt to test connectivity again\n        if (retryCount < 3) {\n          setRetryCount(prevCount => prevCount + 1);\n          await testBackendConnection();\n        } else {\n          setConnectionStatus('offline');\n        }\n\n        // If no messages are present, add a welcome message\n        if (messages.length === 0) {\n          setMessages([{\n            id: Date.now(),\n            content: \"Hello! I'm the AI Assistant powered by Azure OpenAI. I might be operating in offline mode, but I'll do my best to assist you.\",\n            sender: 'Azure AI',\n            timestamp: new Date().toISOString(),\n            isCurrentUser: false\n          }]);\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchMessages();\n\n    // We'll also explicitly test the connection\n    const checkConnection = async () => {\n      await testBackendConnection();\n    };\n\n    // Check connection every 30 seconds\n    const intervalId = setInterval(checkConnection, 30000);\n\n    // Initial connection check\n    checkConnection();\n    return () => clearInterval(intervalId);\n  }, [isAuthenticated, retryCount]);\n\n  // Scroll to bottom when new messages arrive\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n  const handleSendMessage = async e => {\n    e.preventDefault();\n    if (!newMessage.trim() || isProcessing) return;\n    try {\n      setIsProcessing(true);\n\n      // Add user message to UI immediately\n      const userMessageContent = newMessage.trim();\n      const userMessage = {\n        id: Date.now(),\n        content: userMessageContent,\n        sender: 'User',\n        timestamp: new Date().toISOString(),\n        isCurrentUser: true\n      };\n      setMessages(prevMessages => [...prevMessages, userMessage]);\n      setNewMessage('');\n\n      // Add temporary \"thinking\" message\n      const thinkingMessage = {\n        id: Date.now() + 1,\n        content: \"Thinking...\",\n        sender: 'Azure AI',\n        timestamp: new Date().toISOString(),\n        isCurrentUser: false,\n        isThinking: true\n      };\n      setMessages(prevMessages => [...prevMessages, thinkingMessage]);\n\n      // Send message to Azure RAG pipeline\n      const response = await sendChatMessage(userMessageContent);\n\n      // Replace thinking message with actual response\n      setMessages(prevMessages => {\n        const filteredMessages = prevMessages.filter(msg => !msg.isThinking);\n        return [...filteredMessages, response.aiResponse];\n      });\n\n      // If we got a successful response, we're online\n      setConnectionStatus('online');\n    } catch (error) {\n      console.error(\"Failed to process message:\", error);\n      setConnectionStatus('offline');\n\n      // Add error message\n      const errorMessage = {\n        id: Date.now() + 2,\n        content: \"Sorry, I couldn't connect to the Azure OpenAI service. I might be operating in offline mode at the moment. Please try again later.\",\n        sender: 'Azure AI',\n        timestamp: new Date().toISOString(),\n        isCurrentUser: false\n      };\n      setMessages(prevMessages => {\n        const filteredMessages = prevMessages.filter(msg => !msg.isThinking);\n        return [...filteredMessages, errorMessage];\n      });\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-spinner\",\n      children: \"Loading chat...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Redirect to login if not authenticated\n  if (!isAuthenticated) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Get display name - first from profile, then session, then fallback\n  const displayName = userProfile && (userProfile.name || userProfile.username) || sessionStorage.getItem('userName') || sessionStorage.getItem('lastLoginEmail') || 'User';\n  const firstName = displayName.split(' ')[0];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"AI Assistant (Azure OpenAI)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 9\n      }, this), connectionStatus !== 'checking' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `connection-status ${connectionStatus}`,\n        children: connectionStatus === 'online' ? 'Connected to Azure' : 'Azure Offline'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 7\n    }, this), authError && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"auth-error-notice\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: authError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Redirecting to login page...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-container\",\n      children: [messages.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-messages\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Hello \", firstName, \", welcome to the AI Assistant!\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"hint\",\n          children: \"Try asking: \\\"What can this application do for me?\\\" or \\\"Tell me about this project\\\"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 11\n      }, this) : messages.map(msg => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.isCurrentUser ? 'message-mine' : 'message-other'} ${msg.isThinking ? 'thinking' : ''} ${msg.isDiagnostic ? 'diagnostic' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-sender\",\n          children: msg.isCurrentUser ? displayName : msg.sender\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: [msg.content, msg.sources && msg.sources.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-sources\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"sources-title\",\n              children: \"Sources:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 337,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: msg.sources.map((source, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [source.title || source.url || source.path || \"Reference document\", source.url && /*#__PURE__*/_jsxDEV(\"a\", {\n                  href: source.url,\n                  target: \"_blank\",\n                  rel: \"noopener noreferrer\",\n                  children: \" (link)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 342,\n                  columnNumber: 42\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 340,\n                columnNumber: 25\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 338,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-time\",\n          children: new Date(msg.timestamp).toLocaleTimeString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 15\n        }, this)]\n      }, msg.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSendMessage,\n      className: \"message-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newMessage,\n        onChange: e => setNewMessage(e.target.value),\n        placeholder: \"Ask me anything...\",\n        className: \"message-input\",\n        disabled: isProcessing\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: `send-button ${isProcessing ? 'disabled' : ''}`,\n        disabled: isProcessing,\n        children: isProcessing ? 'Sending...' : 'Send'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 7\n    }, this), connectionStatus === 'offline' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"offline-notice\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"You're currently disconnected from Azure OpenAI services. The assistant will provide general responses without accessing the full knowledge base.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"offline-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => testBackendConnection(),\n          className: \"retry-button\",\n          disabled: isProcessing || diagnosticMode,\n          children: \"Retry Azure Connection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: runDiagnostics,\n          className: \"diagnostic-button\",\n          disabled: isProcessing || diagnosticMode,\n          children: diagnosticMode ? 'Running Diagnostics...' : 'Run API Diagnostics'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"troubleshooting-tips\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"tips-header\",\n          children: \"Troubleshooting Tips:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Ensure your Django backend server is running\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 398,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Check if Azure OpenAI services are properly configured in the backend\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Look at the browser console for detailed error messages\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 400,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Verify Azure API keys in your backend environment variables\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 401,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 303,\n    columnNumber: 5\n  }, this);\n}\n_s(Chat, \"86B1LYtF6OXfdMyS+Tyzi6yMxt8=\", false, function () {\n  return [useNavigate];\n});\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Navigate","useNavigate","getChatHistory","sendChatMessage","getUserProfile","checkApiEndpoints","jsxDEV","_jsxDEV","Chat","_s","messages","setMessages","newMessage","setNewMessage","loading","setLoading","isAuthenticated","setIsAuthenticated","isProcessing","setIsProcessing","connectionStatus","setConnectionStatus","retryCount","setRetryCount","userProfile","setUserProfile","diagnosticMode","setDiagnosticMode","diagnosticResults","setDiagnosticResults","authError","setAuthError","messagesEndRef","navigate","handleLogout","localStorage","removeItem","sessionStorage","token","getItem","isJWT","startsWith","console","log","then","profile","setItem","name","email","catch","err","error","message","setTimeout","testBackendConnection","result","success","response","status","_error$response$data","data","detail","runDiagnostics","results","diagMessage","id","Date","now","content","availableCount","totalCount","sender","timestamp","toISOString","isCurrentUser","isDiagnostic","prev","workingChatEndpoint","endpoints","find","e","available","method","url","includes","errorMessage","fetchMessages","Array","isArray","length","prevCount","checkConnection","intervalId","setInterval","clearInterval","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSendMessage","preventDefault","trim","userMessageContent","userMessage","prevMessages","thinkingMessage","isThinking","filteredMessages","filter","msg","aiResponse","className","children","fileName","_jsxFileName","lineNumber","columnNumber","to","displayName","username","firstName","split","map","sources","source","index","title","path","href","target","rel","toLocaleTimeString","ref","onSubmit","type","value","onChange","placeholder","disabled","onClick","_c","$RefreshReg$"],"sources":["C:/Users/STSC/Downloads/Agent-Backend-main (3)/my-app/src/pages/Chat.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { Navigate, useNavigate } from 'react-router-dom';\r\nimport { getChatHistory, sendChatMessage, getUserProfile, checkApiEndpoints } from '../services/api';\r\nimport '../styles/Chat.css';\r\n\r\nfunction Chat() {\r\n  const [messages, setMessages] = useState([]);\r\n  const [newMessage, setNewMessage] = useState('');\r\n  const [loading, setLoading] = useState(true);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [connectionStatus, setConnectionStatus] = useState('checking'); // 'checking', 'online', 'offline'\r\n  const [retryCount, setRetryCount] = useState(0);\r\n  const [userProfile, setUserProfile] = useState(null);\r\n  const [diagnosticMode, setDiagnosticMode] = useState(false);\r\n  const [diagnosticResults, setDiagnosticResults] = useState(null);\r\n  const [authError, setAuthError] = useState(null);\r\n  const messagesEndRef = useRef(null);\r\n  const navigate = useNavigate();\r\n  \r\n  // Function to handle logout\r\n  const handleLogout = () => {\r\n    localStorage.removeItem('token');\r\n    sessionStorage.removeItem('userName');\r\n    sessionStorage.removeItem('lastLoginEmail');\r\n    setIsAuthenticated(false);\r\n    navigate('/login');\r\n  };\r\n  \r\n  // Check authentication first\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      setIsAuthenticated(true);\r\n      \r\n      // Check if token appears to be JWT format (starts with eyJ)\r\n      const isJWT = token.startsWith('eyJ');\r\n      console.log('Token appears to be JWT format:', isJWT);\r\n      \r\n      // Try to get user profile\r\n      getUserProfile()\r\n        .then(profile => {\r\n          console.log('Loaded user profile:', profile);\r\n          setUserProfile(profile);\r\n          sessionStorage.setItem('userName', profile.name || profile.email || 'User');\r\n          setAuthError(null); // Clear any auth errors\r\n        })\r\n        .catch(err => {\r\n          console.error('Failed to load profile:', err);\r\n          \r\n          // If we get a specific authentication error\r\n          if (err.message === 'Authentication required' || \r\n              err.message === 'Session expired. Please log in again.') {\r\n            setAuthError(err.message);\r\n            // Delay logout to allow error to be displayed\r\n            setTimeout(() => handleLogout(), 3000);\r\n          }\r\n        });\r\n    } else {\r\n      setIsAuthenticated(false);\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n  \r\n  // Test connectivity to backend\r\n  const testBackendConnection = async () => {\r\n    try {\r\n      setConnectionStatus('checking');\r\n      const result = await sendChatMessage('__test_connection__');\r\n      \r\n      if (result.success) {\r\n        setConnectionStatus('online');\r\n      } else if (result.authError) {\r\n        console.error('Authentication error during connection test:', result.message);\r\n        setAuthError(`Authentication error: ${result.message}`);\r\n        setTimeout(() => handleLogout(), 3000);\r\n      } else {\r\n        setConnectionStatus('offline');\r\n        console.error('Backend connection test failed:', result.error);\r\n      }\r\n    } catch (error) {\r\n      setConnectionStatus('offline');\r\n      console.error('Error testing backend connection:', error);\r\n      \r\n      // Handle authentication errors\r\n      if (error.response && (error.response.status === 401 || error.response.status === 403)) {\r\n        setAuthError('Authentication error: ' + (error.response.data?.detail || 'Invalid token'));\r\n        setTimeout(() => handleLogout(), 3000);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Function to run API diagnostics\r\n  const runDiagnostics = async () => {\r\n    setDiagnosticMode(true);\r\n    try {\r\n      const results = await checkApiEndpoints();\r\n      setDiagnosticResults(results);\r\n      \r\n      // Add a diagnostic message to the chat\r\n      const diagMessage = {\r\n        id: Date.now(),\r\n        content: `API Diagnostics: ${results.availableCount}/${results.totalCount} endpoints available. Check browser console for details.`,\r\n        sender: 'System',\r\n        timestamp: new Date().toISOString(),\r\n        isCurrentUser: false,\r\n        isDiagnostic: true\r\n      };\r\n      \r\n      setMessages(prev => [...prev, diagMessage]);\r\n      \r\n      // If we found working endpoints, try connecting again\r\n      if (results.availableCount > 0) {\r\n        const workingChatEndpoint = results.endpoints.find(\r\n          e => e.available && e.method === 'POST' && e.url.includes('/chat/')\r\n        );\r\n        \r\n        if (workingChatEndpoint) {\r\n          await testBackendConnection();\r\n        }\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('Diagnostics failed:', error);\r\n      \r\n      // Add error message\r\n      const errorMessage = {\r\n        id: Date.now(),\r\n        content: \"Diagnostics failed. Please check your network connection and browser console for details.\",\r\n        sender: 'System',\r\n        timestamp: new Date().toISOString(),\r\n        isCurrentUser: false,\r\n        isDiagnostic: true\r\n      };\r\n      \r\n      setMessages(prev => [...prev, errorMessage]);\r\n    } finally {\r\n      setDiagnosticMode(false);\r\n    }\r\n  };\r\n\r\n  // Fetch messages when component mounts\r\n  useEffect(() => {\r\n    if (!isAuthenticated) return;\r\n\r\n    const fetchMessages = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const data = await getChatHistory();\r\n        if (Array.isArray(data) && data.length > 0) {\r\n          setMessages(data);\r\n          // If we got history, we're online\r\n          setConnectionStatus('online');\r\n        } else if (messages.length === 0) {\r\n          // Add a welcome message if we don't have any messages\r\n          setMessages([{\r\n            id: Date.now(),\r\n            content: \"Hello! I'm the AI Assistant powered by Azure OpenAI. How can I help you today?\",\r\n            sender: 'Azure AI',\r\n            timestamp: new Date().toISOString(),\r\n            isCurrentUser: false\r\n          }]);\r\n          \r\n          // Try to connect to backend to set proper status\r\n          await testBackendConnection();\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Failed to fetch messages:\", error);\r\n        \r\n        // If we've tried less than 3 times, attempt to test connectivity again\r\n        if (retryCount < 3) {\r\n          setRetryCount(prevCount => prevCount + 1);\r\n          await testBackendConnection();\r\n        } else {\r\n          setConnectionStatus('offline');\r\n        }\r\n        \r\n        // If no messages are present, add a welcome message\r\n        if (messages.length === 0) {\r\n          setMessages([{\r\n            id: Date.now(),\r\n            content: \"Hello! I'm the AI Assistant powered by Azure OpenAI. I might be operating in offline mode, but I'll do my best to assist you.\",\r\n            sender: 'Azure AI',\r\n            timestamp: new Date().toISOString(),\r\n            isCurrentUser: false\r\n          }]);\r\n        }\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchMessages();\r\n    \r\n    // We'll also explicitly test the connection\r\n    const checkConnection = async () => {\r\n      await testBackendConnection();\r\n    };\r\n    \r\n    // Check connection every 30 seconds\r\n    const intervalId = setInterval(checkConnection, 30000); \r\n    \r\n    // Initial connection check\r\n    checkConnection();\r\n    \r\n    return () => clearInterval(intervalId);\r\n  }, [isAuthenticated, retryCount]);\r\n  \r\n  // Scroll to bottom when new messages arrive\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [messages]);\r\n  \r\n  const handleSendMessage = async (e) => {\r\n    e.preventDefault();\r\n    if (!newMessage.trim() || isProcessing) return;\r\n    \r\n    try {\r\n      setIsProcessing(true);\r\n      \r\n      // Add user message to UI immediately\r\n      const userMessageContent = newMessage.trim();\r\n      const userMessage = {\r\n        id: Date.now(),\r\n        content: userMessageContent,\r\n        sender: 'User',\r\n        timestamp: new Date().toISOString(),\r\n        isCurrentUser: true\r\n      };\r\n      \r\n      setMessages(prevMessages => [...prevMessages, userMessage]);\r\n      setNewMessage('');\r\n      \r\n      // Add temporary \"thinking\" message\r\n      const thinkingMessage = {\r\n        id: Date.now() + 1,\r\n        content: \"Thinking...\",\r\n        sender: 'Azure AI',\r\n        timestamp: new Date().toISOString(),\r\n        isCurrentUser: false,\r\n        isThinking: true\r\n      };\r\n      \r\n      setMessages(prevMessages => [...prevMessages, thinkingMessage]);\r\n      \r\n      // Send message to Azure RAG pipeline\r\n      const response = await sendChatMessage(userMessageContent);\r\n      \r\n      // Replace thinking message with actual response\r\n      setMessages(prevMessages => {\r\n        const filteredMessages = prevMessages.filter(msg => !msg.isThinking);\r\n        return [\r\n          ...filteredMessages, \r\n          response.aiResponse\r\n        ];\r\n      });\r\n      \r\n      // If we got a successful response, we're online\r\n      setConnectionStatus('online');\r\n      \r\n    } catch (error) {\r\n      console.error(\"Failed to process message:\", error);\r\n      setConnectionStatus('offline');\r\n      \r\n      // Add error message\r\n      const errorMessage = {\r\n        id: Date.now() + 2,\r\n        content: \"Sorry, I couldn't connect to the Azure OpenAI service. I might be operating in offline mode at the moment. Please try again later.\",\r\n        sender: 'Azure AI',\r\n        timestamp: new Date().toISOString(),\r\n        isCurrentUser: false\r\n      };\r\n      \r\n      setMessages(prevMessages => {\r\n        const filteredMessages = prevMessages.filter(msg => !msg.isThinking);\r\n        return [...filteredMessages, errorMessage];\r\n      });\r\n      \r\n    } finally {\r\n      setIsProcessing(false);\r\n    }\r\n  };\r\n  \r\n  if (loading) {\r\n    return <div className=\"loading-spinner\">Loading chat...</div>;\r\n  }\r\n\r\n  // Redirect to login if not authenticated\r\n  if (!isAuthenticated) {\r\n    return <Navigate to=\"/login\" />;\r\n  }\r\n  \r\n  // Get display name - first from profile, then session, then fallback\r\n  const displayName = \r\n    (userProfile && (userProfile.name || userProfile.username)) || \r\n    sessionStorage.getItem('userName') ||\r\n    sessionStorage.getItem('lastLoginEmail') || \r\n    'User';\r\n    \r\n  const firstName = displayName.split(' ')[0];\r\n  \r\n  return (\r\n    <div className=\"chat-container\">\r\n      <div className=\"chat-header\">\r\n        <h2>AI Assistant (Azure OpenAI)</h2>\r\n        {connectionStatus !== 'checking' && (\r\n          <div className={`connection-status ${connectionStatus}`}>\r\n            {connectionStatus === 'online' ? 'Connected to Azure' : 'Azure Offline'}\r\n          </div>\r\n        )}\r\n      </div>\r\n      \r\n      {authError && (\r\n        <div className=\"auth-error-notice\">\r\n          <p>{authError}</p>\r\n          <p>Redirecting to login page...</p>\r\n        </div>\r\n      )}\r\n      \r\n      <div className=\"messages-container\">\r\n        {messages.length === 0 ? (\r\n          <div className=\"no-messages\">\r\n            <p>Hello {firstName}, welcome to the AI Assistant!</p>\r\n            <p className=\"hint\">Try asking: \"What can this application do for me?\" or \"Tell me about this project\"</p>\r\n          </div>\r\n        ) : (\r\n          messages.map((msg) => (\r\n            <div \r\n              key={msg.id} \r\n              className={`message ${msg.isCurrentUser ? 'message-mine' : 'message-other'} ${msg.isThinking ? 'thinking' : ''} ${msg.isDiagnostic ? 'diagnostic' : ''}`}\r\n            >\r\n              <div className=\"message-sender\">{msg.isCurrentUser ? displayName : msg.sender}</div>\r\n              <div className=\"message-content\">\r\n                {msg.content}\r\n                {msg.sources && msg.sources.length > 0 && (\r\n                  <div className=\"message-sources\">\r\n                    <p className=\"sources-title\">Sources:</p>\r\n                    <ul>\r\n                      {msg.sources.map((source, index) => (\r\n                        <li key={index}>\r\n                          {source.title || source.url || source.path || \"Reference document\"}\r\n                          {source.url && <a href={source.url} target=\"_blank\" rel=\"noopener noreferrer\"> (link)</a>}\r\n                        </li>\r\n                      ))}\r\n                    </ul>\r\n                  </div>\r\n                )}\r\n              </div>\r\n              <div className=\"message-time\">\r\n                {new Date(msg.timestamp).toLocaleTimeString()}\r\n              </div>\r\n            </div>\r\n          ))\r\n        )}\r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n      \r\n      <form onSubmit={handleSendMessage} className=\"message-form\">\r\n        <input\r\n          type=\"text\"\r\n          value={newMessage}\r\n          onChange={(e) => setNewMessage(e.target.value)}\r\n          placeholder=\"Ask me anything...\"\r\n          className=\"message-input\"\r\n          disabled={isProcessing}\r\n        />\r\n        <button \r\n          type=\"submit\" \r\n          className={`send-button ${isProcessing ? 'disabled' : ''}`}\r\n          disabled={isProcessing}\r\n        >\r\n          {isProcessing ? 'Sending...' : 'Send'}\r\n        </button>\r\n      </form>\r\n      \r\n      {connectionStatus === 'offline' && (\r\n        <div className=\"offline-notice\">\r\n          <p>You're currently disconnected from Azure OpenAI services. The assistant will provide general responses without accessing the full knowledge base.</p>\r\n          <div className=\"offline-actions\">\r\n            <button \r\n              onClick={() => testBackendConnection()} \r\n              className=\"retry-button\"\r\n              disabled={isProcessing || diagnosticMode}\r\n            >\r\n              Retry Azure Connection\r\n            </button>\r\n            <button \r\n              onClick={runDiagnostics}\r\n              className=\"diagnostic-button\"\r\n              disabled={isProcessing || diagnosticMode}\r\n            >\r\n              {diagnosticMode ? 'Running Diagnostics...' : 'Run API Diagnostics'}\r\n            </button>\r\n          </div>\r\n          <div className=\"troubleshooting-tips\">\r\n            <p className=\"tips-header\">Troubleshooting Tips:</p>\r\n            <ul>\r\n              <li>Ensure your Django backend server is running</li>\r\n              <li>Check if Azure OpenAI services are properly configured in the backend</li>\r\n              <li>Look at the browser console for detailed error messages</li>\r\n              <li>Verify Azure API keys in your backend environment variables</li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}