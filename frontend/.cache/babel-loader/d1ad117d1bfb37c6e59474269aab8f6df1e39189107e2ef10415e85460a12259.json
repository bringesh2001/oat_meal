{"ast":null,"code":"import axios from 'axios';\n\n// Create an axios instance with the base URL\nconst api = axios.create({\n  baseURL: 'http://localhost:8000',\n  // Updated to correct backend URL\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor - adds auth token if available\napi.interceptors.request.use(config => {\n  // Get token from localStorage\n  const token = localStorage.getItem('token');\n\n  // Check if token exists\n  if (token) {\n    console.log(`API Request: Using token for ${config.url}`);\n\n    // JWT tokens should use Bearer prefix, not Token\n    config.headers.Authorization = `Bearer ${token}`;\n\n    // Debugging log\n    console.log('Authorization header:', config.headers.Authorization.substring(0, 15) + '...');\n  } else {\n    console.log('API Request: No token found');\n  }\n  return config;\n}, error => {\n  console.error('Request interceptor error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor - handles auth errors\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  // Handle 401 Unauthorized errors\n  if (error.response && error.response.status === 401) {\n    console.error('401 Unauthorized error from API:', {\n      url: error.config.url,\n      method: error.config.method,\n      headers: error.config.headers.Authorization ? error.config.headers.Authorization.substring(0, 15) + '...' : 'none'\n    });\n  }\n  return Promise.reject(error);\n});\n\n// Auth functions\nexport const loginUser = async credentials => {\n  try {\n    console.log('API: Sending login request with:', credentials.email);\n    const response = await api.post('/api/auth/login/', credentials);\n    console.log('API: Login response status:', response.status);\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    console.error('API: Login error:', error.message);\n    if (error.response) {\n      console.error('API: Server response:', error.response.data);\n    }\n    throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Login failed. Please try again.');\n  }\n};\nexport const signupUser = async userData => {\n  try {\n    const response = await api.post('/api/auth/signup/', userData);\n    return response.data;\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    console.error('API: Signup error:', error.message);\n    throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Signup failed. Please try again.');\n  }\n};\n\n// User profile\nexport const getUserProfile = async () => {\n  // Use fetch API directly for better control\n  try {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      console.error('API: Cannot fetch profile - No token available');\n      throw new Error('Authentication required');\n    }\n    console.log('API: Fetching user profile with token');\n\n    // Try with 'Token' prefix (Django REST Framework default)\n    const headers = {\n      'Authorization': `Token ${token}`,\n      'Content-Type': 'application/json'\n    };\n    console.log('Profile request headers:', {\n      Authorization: headers.Authorization.substring(0, 15) + '...'\n    });\n\n    // Updated URL to match the backend path\n    const response = await fetch('http://localhost:8000/api/auth/profile/', {\n      method: 'GET',\n      headers: headers\n    });\n\n    // Log response status\n    console.log('API: Profile fetch response status:', response.status);\n    if (!response.ok) {\n      console.error('API: Profile fetch failed:', response.status, response.statusText);\n      throw new Error(`Failed to fetch profile: ${response.statusText}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('API: Error fetching user profile:', error.message);\n    throw error;\n  }\n};\n\n// Directories\nexport const getDirectories = async () => {\n  try {\n    console.log('API: Fetching directories');\n\n    // Get token from localStorage\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('Authentication required');\n    }\n    console.log('Using token for directories (first few chars):', token.substring(0, 10) + '...');\n\n    // Use fetch API directly like profile API for consistency\n    const headers = {\n      'Authorization': `Token ${token}`,\n      'Content-Type': 'application/json'\n    };\n\n    // Updated URL to match the backend path\n    const response = await fetch('http://localhost:8000/api/directories/', {\n      method: 'GET',\n      headers: headers\n    });\n\n    // Log response status\n    console.log('API: Directories fetch response status:', response.status);\n    if (!response.ok) {\n      console.error('API: Directories fetch failed:', response.status, response.statusText);\n      throw new Error(`Failed to fetch directories: ${response.statusText}`);\n    }\n    const data = await response.json();\n    console.log('API: Directories fetch successful:', data);\n    return data;\n  } catch (error) {\n    console.error('API: Error fetching directories:', error.message);\n\n    // Return mock data if real data fetch fails\n    console.log('Returning mock directory data');\n    return [{\n      id: 1,\n      name: 'Documents',\n      path: '/documents',\n      color: '#4285F4'\n    }, {\n      id: 2,\n      name: 'Images',\n      path: '/images',\n      color: '#34A853'\n    }, {\n      id: 3,\n      name: 'Projects',\n      path: '/projects',\n      color: '#FBBC05'\n    }, {\n      id: 4,\n      name: 'Templates',\n      path: '/templates',\n      color: '#EA4335'\n    }];\n  }\n};\n\n// Chat API Functions\nexport const getChatHistory = async () => {\n  try {\n    console.log('API: Fetching chat history from RAG pipeline');\n\n    // Get token from localStorage\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('Authentication required');\n    }\n    console.log('Using token for chat history (first few chars):', token.substring(0, 10) + '...');\n\n    // Use fetch API directly like other endpoints for consistency\n    const headers = {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    };\n\n    // Try with a standard chat history endpoint first\n    const response = await fetch('http://localhost:8000/api/chat/history', {\n      method: 'GET',\n      headers: headers\n    });\n\n    // Log response status\n    console.log('API: Chat history fetch response status:', response.status);\n    if (!response.ok) {\n      console.error('API: Chat history fetch failed:', response.status, response.statusText);\n      throw new Error(`Failed to fetch chat history: ${response.statusText}`);\n    }\n    const data = await response.json();\n    console.log('API: Chat history fetch successful');\n    return data;\n  } catch (error) {\n    console.error('API: Error fetching chat history:', error.message);\n\n    // Return mock data if real data fetch fails\n    console.log('Returning mock chat history data');\n    return [{\n      id: 1,\n      sender: 'System',\n      content: 'Hello! I\\'m the OatmealAI Assistant. How can I help you today?',\n      timestamp: new Date(Date.now() - 3600000).toISOString(),\n      isCurrentUser: false\n    }];\n  }\n};\nexport const sendChatMessage = async message => {\n  try {\n    console.log('API: Sending chat message to RAG pipeline');\n\n    // Get token from localStorage\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('Authentication required');\n    }\n\n    // Use fetch API directly like other endpoints for consistency\n    const headers = {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    };\n\n    // First, add the user message to the UI immediately\n    const userMessage = {\n      id: Date.now(),\n      content: message,\n      sender: 'User',\n      timestamp: new Date().toISOString(),\n      isCurrentUser: true\n    };\n\n    // Try the standard chat endpoint first\n    // If you know the exact RAG endpoint on your backend, replace this URL\n    const response = await fetch('http://localhost:8000/api/chat/message', {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify({\n        message: message,\n        // Include both possible parameter names to ensure compatibility\n        query: message,\n        conversation_id: \"default-chat\" // You can make this dynamic if needed\n      })\n    });\n\n    // Log response status\n    console.log('API: RAG query response status:', response.status);\n    if (!response.ok) {\n      console.error('API: RAG query failed:', response.status, response.statusText);\n      throw new Error(`Failed to process query: ${response.statusText}`);\n    }\n    const data = await response.json();\n    console.log('API: RAG response received:', data);\n\n    // Handle different possible response formats\n    let responseContent = '';\n    let responseSources = [];\n    if (data.response) {\n      // Format 1: { response: \"text\", sources: [...] }\n      responseContent = data.response;\n      responseSources = data.sources || [];\n    } else if (data.answer) {\n      // Format 2: { answer: \"text\", sources: [...] }\n      responseContent = data.answer;\n      responseSources = data.sources || [];\n    } else if (data.content) {\n      // Format 3: { content: \"text\", sources: [...] }\n      responseContent = data.content;\n      responseSources = data.sources || [];\n    } else if (data.message) {\n      // Format 4: { message: { content: \"text\" } }\n      responseContent = typeof data.message === 'object' ? data.message.content : data.message;\n      responseSources = data.sources || [];\n    } else if (typeof data === 'string') {\n      // Format 5: \"text\"\n      responseContent = data;\n    } else {\n      // Fallback\n      responseContent = \"I received your message but I'm not sure how to interpret the response.\";\n    }\n\n    // Return both the user message and the AI response\n    return {\n      userMessage: userMessage,\n      aiResponse: {\n        id: Date.now() + 1,\n        content: responseContent,\n        sender: 'OatmealAI',\n        timestamp: new Date().toISOString(),\n        isCurrentUser: false,\n        sources: responseSources\n      }\n    };\n  } catch (error) {\n    console.error('API: Error sending message to RAG:', error.message);\n\n    // Return a mock success response if the real request fails\n    console.log('Returning mock RAG response');\n    return {\n      userMessage: {\n        id: Date.now(),\n        content: message,\n        sender: 'User',\n        timestamp: new Date().toISOString(),\n        isCurrentUser: true\n      },\n      aiResponse: {\n        id: Date.now() + 1,\n        content: \"I'm sorry, I couldn't process your request at this time. Please try again later.\",\n        sender: 'OatmealAI',\n        timestamp: new Date().toISOString(),\n        isCurrentUser: false\n      }\n    };\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","console","log","url","Authorization","substring","error","Promise","reject","response","status","method","loginUser","credentials","email","post","data","_error$response","_error$response$data","message","Error","signupUser","userData","_error$response2","_error$response2$data","getUserProfile","fetch","ok","statusText","json","getDirectories","id","name","path","color","getChatHistory","sender","content","timestamp","Date","now","toISOString","isCurrentUser","sendChatMessage","userMessage","body","JSON","stringify","query","conversation_id","responseContent","responseSources","sources","answer","aiResponse"],"sources":["C:/Users/STSC/Downloads/Agent-Backend-main (3)/my-app/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create an axios instance with the base URL\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:8000', // Updated to correct backend URL\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  }\r\n});\r\n\r\n// Request interceptor - adds auth token if available\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    // Get token from localStorage\r\n    const token = localStorage.getItem('token');\r\n    \r\n    // Check if token exists\r\n    if (token) {\r\n      console.log(`API Request: Using token for ${config.url}`);\r\n      \r\n      // JWT tokens should use Bearer prefix, not Token\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n      \r\n      // Debugging log\r\n      console.log('Authorization header:', config.headers.Authorization.substring(0, 15) + '...');\r\n    } else {\r\n      console.log('API Request: No token found');\r\n    }\r\n    \r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('Request interceptor error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor - handles auth errors\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    // Handle 401 Unauthorized errors\r\n    if (error.response && error.response.status === 401) {\r\n      console.error('401 Unauthorized error from API:', {\r\n        url: error.config.url,\r\n        method: error.config.method,\r\n        headers: error.config.headers.Authorization ? \r\n          error.config.headers.Authorization.substring(0, 15) + '...' : 'none'\r\n      });\r\n    }\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Auth functions\r\nexport const loginUser = async (credentials) => {\r\n  try {\r\n    console.log('API: Sending login request with:', credentials.email);\r\n    const response = await api.post('/api/auth/login/', credentials);\r\n    console.log('API: Login response status:', response.status);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('API: Login error:', error.message);\r\n    if (error.response) {\r\n      console.error('API: Server response:', error.response.data);\r\n    }\r\n    throw new Error(error.response?.data?.message || 'Login failed. Please try again.');\r\n  }\r\n};\r\n\r\nexport const signupUser = async (userData) => {\r\n  try {\r\n    const response = await api.post('/api/auth/signup/', userData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('API: Signup error:', error.message);\r\n    throw new Error(error.response?.data?.message || 'Signup failed. Please try again.');\r\n  }\r\n};\r\n\r\n// User profile\r\nexport const getUserProfile = async () => {\r\n  // Use fetch API directly for better control\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    \r\n    if (!token) {\r\n      console.error('API: Cannot fetch profile - No token available');\r\n      throw new Error('Authentication required');\r\n    }\r\n    \r\n    console.log('API: Fetching user profile with token');\r\n    \r\n    // Try with 'Token' prefix (Django REST Framework default)\r\n    const headers = {\r\n      'Authorization': `Token ${token}`,\r\n      'Content-Type': 'application/json'\r\n    };\r\n    \r\n    console.log('Profile request headers:', {\r\n      Authorization: headers.Authorization.substring(0, 15) + '...'\r\n    });\r\n    \r\n    // Updated URL to match the backend path\r\n    const response = await fetch('http://localhost:8000/api/auth/profile/', {\r\n      method: 'GET',\r\n      headers: headers\r\n    });\r\n    \r\n    // Log response status\r\n    console.log('API: Profile fetch response status:', response.status);\r\n    \r\n    if (!response.ok) {\r\n      console.error('API: Profile fetch failed:', response.status, response.statusText);\r\n      throw new Error(`Failed to fetch profile: ${response.statusText}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('API: Error fetching user profile:', error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Directories\r\nexport const getDirectories = async () => {\r\n  try {\r\n    console.log('API: Fetching directories');\r\n    \r\n    // Get token from localStorage\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n      throw new Error('Authentication required');\r\n    }\r\n    \r\n    console.log('Using token for directories (first few chars):', token.substring(0, 10) + '...');\r\n    \r\n    // Use fetch API directly like profile API for consistency\r\n    const headers = {\r\n      'Authorization': `Token ${token}`,\r\n      'Content-Type': 'application/json'\r\n    };\r\n    \r\n    // Updated URL to match the backend path\r\n    const response = await fetch('http://localhost:8000/api/directories/', {\r\n      method: 'GET',\r\n      headers: headers\r\n    });\r\n    \r\n    // Log response status\r\n    console.log('API: Directories fetch response status:', response.status);\r\n    \r\n    if (!response.ok) {\r\n      console.error('API: Directories fetch failed:', response.status, response.statusText);\r\n      throw new Error(`Failed to fetch directories: ${response.statusText}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    console.log('API: Directories fetch successful:', data);\r\n    return data;\r\n  } catch (error) {\r\n    console.error('API: Error fetching directories:', error.message);\r\n    \r\n    // Return mock data if real data fetch fails\r\n    console.log('Returning mock directory data');\r\n    return [\r\n      { id: 1, name: 'Documents', path: '/documents', color: '#4285F4' },\r\n      { id: 2, name: 'Images', path: '/images', color: '#34A853' },\r\n      { id: 3, name: 'Projects', path: '/projects', color: '#FBBC05' },\r\n      { id: 4, name: 'Templates', path: '/templates', color: '#EA4335' }\r\n    ];\r\n  }\r\n};\r\n\r\n// Chat API Functions\r\nexport const getChatHistory = async () => {\r\n  try {\r\n    console.log('API: Fetching chat history from RAG pipeline');\r\n    \r\n    // Get token from localStorage\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n      throw new Error('Authentication required');\r\n    }\r\n    \r\n    console.log('Using token for chat history (first few chars):', token.substring(0, 10) + '...');\r\n    \r\n    // Use fetch API directly like other endpoints for consistency\r\n    const headers = {\r\n      'Authorization': `Bearer ${token}`,\r\n      'Content-Type': 'application/json'\r\n    };\r\n    \r\n    // Try with a standard chat history endpoint first\r\n    const response = await fetch('http://localhost:8000/api/chat/history', {\r\n      method: 'GET',\r\n      headers: headers\r\n    });\r\n    \r\n    // Log response status\r\n    console.log('API: Chat history fetch response status:', response.status);\r\n    \r\n    if (!response.ok) {\r\n      console.error('API: Chat history fetch failed:', response.status, response.statusText);\r\n      throw new Error(`Failed to fetch chat history: ${response.statusText}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    console.log('API: Chat history fetch successful');\r\n    return data;\r\n  } catch (error) {\r\n    console.error('API: Error fetching chat history:', error.message);\r\n    \r\n    // Return mock data if real data fetch fails\r\n    console.log('Returning mock chat history data');\r\n    return [\r\n      { \r\n        id: 1, \r\n        sender: 'System', \r\n        content: 'Hello! I\\'m the OatmealAI Assistant. How can I help you today?', \r\n        timestamp: new Date(Date.now() - 3600000).toISOString(),\r\n        isCurrentUser: false\r\n      }\r\n    ];\r\n  }\r\n};\r\n\r\nexport const sendChatMessage = async (message) => {\r\n  try {\r\n    console.log('API: Sending chat message to RAG pipeline');\r\n    \r\n    // Get token from localStorage\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n      throw new Error('Authentication required');\r\n    }\r\n    \r\n    // Use fetch API directly like other endpoints for consistency\r\n    const headers = {\r\n      'Authorization': `Bearer ${token}`,\r\n      'Content-Type': 'application/json'\r\n    };\r\n    \r\n    // First, add the user message to the UI immediately\r\n    const userMessage = { \r\n      id: Date.now(),\r\n      content: message,\r\n      sender: 'User',\r\n      timestamp: new Date().toISOString(),\r\n      isCurrentUser: true\r\n    };\r\n    \r\n    // Try the standard chat endpoint first\r\n    // If you know the exact RAG endpoint on your backend, replace this URL\r\n    const response = await fetch('http://localhost:8000/api/chat/message', {\r\n      method: 'POST',\r\n      headers: headers,\r\n      body: JSON.stringify({ \r\n        message: message,\r\n        // Include both possible parameter names to ensure compatibility\r\n        query: message,\r\n        conversation_id: \"default-chat\"  // You can make this dynamic if needed\r\n      })\r\n    });\r\n    \r\n    // Log response status\r\n    console.log('API: RAG query response status:', response.status);\r\n    \r\n    if (!response.ok) {\r\n      console.error('API: RAG query failed:', response.status, response.statusText);\r\n      throw new Error(`Failed to process query: ${response.statusText}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    console.log('API: RAG response received:', data);\r\n    \r\n    // Handle different possible response formats\r\n    let responseContent = '';\r\n    let responseSources = [];\r\n    \r\n    if (data.response) {\r\n      // Format 1: { response: \"text\", sources: [...] }\r\n      responseContent = data.response;\r\n      responseSources = data.sources || [];\r\n    } else if (data.answer) {\r\n      // Format 2: { answer: \"text\", sources: [...] }\r\n      responseContent = data.answer;\r\n      responseSources = data.sources || [];\r\n    } else if (data.content) {\r\n      // Format 3: { content: \"text\", sources: [...] }\r\n      responseContent = data.content;\r\n      responseSources = data.sources || [];\r\n    } else if (data.message) {\r\n      // Format 4: { message: { content: \"text\" } }\r\n      responseContent = typeof data.message === 'object' ? data.message.content : data.message;\r\n      responseSources = data.sources || [];\r\n    } else if (typeof data === 'string') {\r\n      // Format 5: \"text\"\r\n      responseContent = data;\r\n    } else {\r\n      // Fallback\r\n      responseContent = \"I received your message but I'm not sure how to interpret the response.\";\r\n    }\r\n    \r\n    // Return both the user message and the AI response\r\n    return {\r\n      userMessage: userMessage,\r\n      aiResponse: {\r\n        id: Date.now() + 1,\r\n        content: responseContent,\r\n        sender: 'OatmealAI',\r\n        timestamp: new Date().toISOString(),\r\n        isCurrentUser: false,\r\n        sources: responseSources\r\n      }\r\n    };\r\n  } catch (error) {\r\n    console.error('API: Error sending message to RAG:', error.message);\r\n    \r\n    // Return a mock success response if the real request fails\r\n    console.log('Returning mock RAG response');\r\n    return { \r\n      userMessage: {\r\n        id: Date.now(),\r\n        content: message,\r\n        sender: 'User',\r\n        timestamp: new Date().toISOString(),\r\n        isCurrentUser: true\r\n      },\r\n      aiResponse: {\r\n        id: Date.now() + 1,\r\n        content: \"I'm sorry, I couldn't process your request at this time. Please try again later.\",\r\n        sender: 'OatmealAI',\r\n        timestamp: new Date().toISOString(),\r\n        isCurrentUser: false\r\n      }\r\n    };\r\n  }\r\n};\r\n\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}