{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\STSC\\\\Downloads\\\\Agent-Backend-main (3)\\\\my-app\\\\src\\\\pages\\\\Chat.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { getChatHistory, sendChatMessage } from '../services/chatbotService';\nimport '../styles/Chat.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chat() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const messagesEndRef = useRef(null);\n\n  // Check authentication first\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      setIsAuthenticated(true);\n    }\n    setLoading(false);\n  }, []);\n\n  // Fetch messages when component mounts\n  useEffect(() => {\n    if (!isAuthenticated) return;\n    const fetchMessages = async () => {\n      try {\n        const data = await getChatHistory();\n        setMessages(data);\n      } catch (error) {\n        console.error(\"Failed to fetch messages:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchMessages();\n\n    // Option for real-time updates - can be replaced with WebSockets implementation\n    const intervalId = setInterval(fetchMessages, 5000);\n    return () => clearInterval(intervalId);\n  }, [isAuthenticated]);\n\n  // Scroll to bottom when new messages arrive\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n  const handleSendMessage = async e => {\n    e.preventDefault();\n    if (!newMessage.trim()) return;\n    try {\n      const azureResponse = await sendChatMessage(newMessage);\n      setMessages(prevMessages => [...prevMessages, {\n        id: Date.now(),\n        content: newMessage,\n        sender: 'You'\n      }, {\n        id: Date.now() + 1,\n        content: azureResponse.choices[0].text,\n        sender: 'Bot'\n      }]);\n      setNewMessage('');\n    } catch (error) {\n      console.error(\"Failed to send message:\", error);\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-spinner\",\n      children: \"Loading chat...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Redirect to login if not authenticated\n  if (!isAuthenticated) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-container\",\n      children: [messages.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-messages\",\n        children: \"No messages yet. Start a conversation!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this) : messages.map(msg => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.sender === 'You' ? 'message-mine' : 'message-other'}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-sender\",\n          children: msg.sender\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: msg.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-time\",\n          children: new Date(msg.timestamp).toLocaleTimeString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 15\n        }, this)]\n      }, msg.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSendMessage,\n      className: \"message-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newMessage,\n        onChange: e => setNewMessage(e.target.value),\n        placeholder: \"Type a message...\",\n        className: \"message-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"send-button\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n_s(Chat, \"PSgP7LNge6nWrOpyO2dZ3fB37K0=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Navigate","getChatHistory","sendChatMessage","jsxDEV","_jsxDEV","Chat","_s","messages","setMessages","newMessage","setNewMessage","loading","setLoading","isAuthenticated","setIsAuthenticated","messagesEndRef","token","localStorage","getItem","fetchMessages","data","error","console","intervalId","setInterval","clearInterval","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSendMessage","e","preventDefault","trim","azureResponse","prevMessages","id","Date","now","content","sender","choices","text","className","children","fileName","_jsxFileName","lineNumber","columnNumber","to","length","map","msg","timestamp","toLocaleTimeString","ref","onSubmit","type","value","onChange","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/STSC/Downloads/Agent-Backend-main (3)/my-app/src/pages/Chat.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { getChatHistory, sendChatMessage } from '../services/chatbotService';\nimport '../styles/Chat.css';\n\nfunction Chat() {\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const messagesEndRef = useRef(null);\n  \n  // Check authentication first\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      setIsAuthenticated(true);\n    }\n    setLoading(false);\n  }, []);\n\n  // Fetch messages when component mounts\n  useEffect(() => {\n    if (!isAuthenticated) return;\n\n    const fetchMessages = async () => {\n      try {\n        const data = await getChatHistory();\n        setMessages(data);\n      } catch (error) {\n        console.error(\"Failed to fetch messages:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    fetchMessages();\n    \n    // Option for real-time updates - can be replaced with WebSockets implementation\n    const intervalId = setInterval(fetchMessages, 5000);\n    return () => clearInterval(intervalId);\n  }, [isAuthenticated]);\n  \n  // Scroll to bottom when new messages arrive\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n  \n  const handleSendMessage = async (e) => {\n    e.preventDefault();\n    if (!newMessage.trim()) return;\n    \n    try {\n      const azureResponse = await sendChatMessage(newMessage);\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { id: Date.now(), content: newMessage, sender: 'You' },\n        { id: Date.now() + 1, content: azureResponse.choices[0].text, sender: 'Bot' },\n      ]);\n      setNewMessage('');\n    } catch (error) {\n      console.error(\"Failed to send message:\", error);\n    }\n  };\n  \n  if (loading) {\n    return <div className=\"loading-spinner\">Loading chat...</div>;\n  }\n\n  // Redirect to login if not authenticated\n  if (!isAuthenticated) {\n    return <Navigate to=\"/login\" />;\n  }\n  \n  return (\n    <div className=\"chat-container\">\n      <div className=\"messages-container\">\n        {messages.length === 0 ? (\n          <div className=\"no-messages\">No messages yet. Start a conversation!</div>\n        ) : (\n          messages.map((msg) => (\n            <div \n              key={msg.id} \n              className={`message ${msg.sender === 'You' ? 'message-mine' : 'message-other'}`}\n            >\n              <div className=\"message-sender\">{msg.sender}</div>\n              <div className=\"message-content\">{msg.content}</div>\n              <div className=\"message-time\">\n                {new Date(msg.timestamp).toLocaleTimeString()}\n              </div>\n            </div>\n          ))\n        )}\n        <div ref={messagesEndRef} />\n      </div>\n      \n      <form onSubmit={handleSendMessage} className=\"message-form\">\n        <input\n          type=\"text\"\n          value={newMessage}\n          onChange={(e) => setNewMessage(e.target.value)}\n          placeholder=\"Type a message...\"\n          className=\"message-input\"\n        />\n        <button type=\"submit\" className=\"send-button\">Send</button>\n      </form>\n    </div>\n  );\n}\n\nexport default Chat;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}