{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\STSC\\\\Downloads\\\\Agent-Backend-main (3)\\\\my-app\\\\src\\\\pages\\\\Chat.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { getChatHistory, sendChatMessage } from '../services/api';\nimport '../styles/Chat.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chat() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState('checking'); // 'checking', 'online', 'offline'\n  const [retryCount, setRetryCount] = useState(0);\n  const messagesEndRef = useRef(null);\n  const chatId = \"default-chat\";\n\n  // Check authentication first\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      setIsAuthenticated(true);\n    }\n    setLoading(false);\n  }, []);\n\n  // Function to test backend connectivity\n  const testBackendConnection = async () => {\n    try {\n      // Using a simple test message to check if backend responds\n      if (isAuthenticated) {\n        console.log('Attempting to connect to chat backend...');\n        const testResponse = await sendChatMessage('test_connection');\n\n        // If we get here, we successfully connected\n        console.log('Connection test successful');\n        setConnectionStatus('online');\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Connection test failed:', error);\n      setConnectionStatus('offline');\n      return false;\n    }\n  };\n\n  // Fetch messages when component mounts\n  useEffect(() => {\n    if (!isAuthenticated) return;\n    const fetchMessages = async () => {\n      try {\n        setLoading(true);\n        const data = await getChatHistory();\n        if (Array.isArray(data) && data.length > 0) {\n          setMessages(data);\n          // If we got history, we're online\n          setConnectionStatus('online');\n        } else if (messages.length === 0) {\n          // Add a welcome message if we don't have any messages\n          setMessages([{\n            id: Date.now(),\n            content: \"Hello! I'm the OatmealAI Assistant. How can I help you today?\",\n            sender: 'OatmealAI',\n            timestamp: new Date().toISOString(),\n            isCurrentUser: false\n          }]);\n\n          // Try to connect to backend to set proper status\n          await testBackendConnection();\n        }\n      } catch (error) {\n        console.error(\"Failed to fetch messages:\", error);\n\n        // If we've tried less than 3 times, attempt to test connectivity again\n        if (retryCount < 3) {\n          setRetryCount(prevCount => prevCount + 1);\n          await testBackendConnection();\n        } else {\n          setConnectionStatus('offline');\n        }\n\n        // If no messages are present, add a welcome message\n        if (messages.length === 0) {\n          setMessages([{\n            id: Date.now(),\n            content: \"Hello! I'm the OatmealAI Assistant. I might be operating in offline mode, but I'll do my best to assist you.\",\n            sender: 'OatmealAI',\n            timestamp: new Date().toISOString(),\n            isCurrentUser: false\n          }]);\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchMessages();\n\n    // We'll also explicitly test the connection\n    const checkConnection = async () => {\n      await testBackendConnection();\n    };\n\n    // Check connection every 30 seconds\n    const intervalId = setInterval(checkConnection, 30000);\n\n    // Initial connection check\n    checkConnection();\n    return () => clearInterval(intervalId);\n  }, [chatId, isAuthenticated, retryCount]);\n\n  // Scroll to bottom when new messages arrive\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n  const handleSendMessage = async e => {\n    e.preventDefault();\n    if (!newMessage.trim() || isProcessing) return;\n    try {\n      setIsProcessing(true);\n\n      // Add user message to UI immediately\n      const userMessageContent = newMessage.trim();\n      const userMessage = {\n        id: Date.now(),\n        content: userMessageContent,\n        sender: 'User',\n        timestamp: new Date().toISOString(),\n        isCurrentUser: true\n      };\n      setMessages(prevMessages => [...prevMessages, userMessage]);\n      setNewMessage('');\n\n      // Add temporary \"thinking\" message\n      const thinkingMessage = {\n        id: Date.now() + 1,\n        content: \"Thinking...\",\n        sender: 'OatmealAI',\n        timestamp: new Date().toISOString(),\n        isCurrentUser: false,\n        isThinking: true\n      };\n      setMessages(prevMessages => [...prevMessages, thinkingMessage]);\n\n      // Send message to RAG pipeline\n      const response = await sendChatMessage(userMessageContent);\n\n      // Replace thinking message with actual response\n      setMessages(prevMessages => {\n        const filteredMessages = prevMessages.filter(msg => !msg.isThinking);\n        return [...filteredMessages, response.aiResponse];\n      });\n\n      // If we got a successful response, we're online\n      setConnectionStatus('online');\n    } catch (error) {\n      console.error(\"Failed to process message:\", error);\n      setConnectionStatus('offline');\n\n      // Add error message\n      const errorMessage = {\n        id: Date.now() + 2,\n        content: \"Sorry, I couldn't process your request. I might be operating in offline mode at the moment. Please try again later.\",\n        sender: 'OatmealAI',\n        timestamp: new Date().toISOString(),\n        isCurrentUser: false\n      };\n      setMessages(prevMessages => {\n        const filteredMessages = prevMessages.filter(msg => !msg.isThinking);\n        return [...filteredMessages, errorMessage];\n      });\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-spinner\",\n      children: \"Loading chat...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Redirect to login if not authenticated\n  if (!isAuthenticated) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Get user name from session if available\n  const userName = sessionStorage.getItem('lastLoginEmail') || 'User';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"OatmealAI Assistant\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this), connectionStatus !== 'checking' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `connection-status ${connectionStatus}`,\n        children: connectionStatus === 'online' ? 'Connected' : 'Offline Mode'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-container\",\n      children: [messages.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-messages\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No messages yet. Ask me anything about our services!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"hint\",\n          children: \"Try asking: \\\"What can OatmealAI do for me?\\\" or \\\"How do I use this application?\\\"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 11\n      }, this) : messages.map(msg => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.isCurrentUser ? 'message-mine' : 'message-other'} ${msg.isThinking ? 'thinking' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-sender\",\n          children: msg.isCurrentUser ? userName : msg.sender\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: [msg.content, msg.sources && msg.sources.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-sources\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"sources-title\",\n              children: \"Sources:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: msg.sources.map((source, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [source.title || source.url || source.path || \"Reference document\", source.url && /*#__PURE__*/_jsxDEV(\"a\", {\n                  href: source.url,\n                  target: \"_blank\",\n                  rel: \"noopener noreferrer\",\n                  children: \" (link)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 234,\n                  columnNumber: 42\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 232,\n                columnNumber: 25\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-time\",\n          children: new Date(msg.timestamp).toLocaleTimeString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 15\n        }, this)]\n      }, msg.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSendMessage,\n      className: \"message-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newMessage,\n        onChange: e => setNewMessage(e.target.value),\n        placeholder: \"Ask me anything...\",\n        className: \"message-input\",\n        disabled: isProcessing\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: `send-button ${isProcessing ? 'disabled' : ''}`,\n        disabled: isProcessing,\n        children: isProcessing ? 'Sending...' : 'Send'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }, this), connectionStatus === 'offline' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"offline-notice\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"You're currently in offline mode. The assistant will provide general responses without accessing the full knowledge base.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => testBackendConnection(),\n        className: \"retry-button\",\n        children: \"Retry Connection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 202,\n    columnNumber: 5\n  }, this);\n}\n_s(Chat, \"gvxROIivnyNl4E3yW5PtfJSuR1s=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Navigate","getChatHistory","sendChatMessage","jsxDEV","_jsxDEV","Chat","_s","messages","setMessages","newMessage","setNewMessage","loading","setLoading","isAuthenticated","setIsAuthenticated","isProcessing","setIsProcessing","connectionStatus","setConnectionStatus","retryCount","setRetryCount","messagesEndRef","chatId","token","localStorage","getItem","testBackendConnection","console","log","testResponse","error","fetchMessages","data","Array","isArray","length","id","Date","now","content","sender","timestamp","toISOString","isCurrentUser","prevCount","checkConnection","intervalId","setInterval","clearInterval","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSendMessage","e","preventDefault","trim","userMessageContent","userMessage","prevMessages","thinkingMessage","isThinking","response","filteredMessages","filter","msg","aiResponse","errorMessage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","to","userName","sessionStorage","map","sources","source","index","title","url","path","href","target","rel","toLocaleTimeString","ref","onSubmit","type","value","onChange","placeholder","disabled","onClick","_c","$RefreshReg$"],"sources":["C:/Users/STSC/Downloads/Agent-Backend-main (3)/my-app/src/pages/Chat.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { Navigate } from 'react-router-dom';\r\nimport { getChatHistory, sendChatMessage } from '../services/api';\r\nimport '../styles/Chat.css';\r\n\r\nfunction Chat() {\r\n  const [messages, setMessages] = useState([]);\r\n  const [newMessage, setNewMessage] = useState('');\r\n  const [loading, setLoading] = useState(true);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [connectionStatus, setConnectionStatus] = useState('checking'); // 'checking', 'online', 'offline'\r\n  const [retryCount, setRetryCount] = useState(0);\r\n  const messagesEndRef = useRef(null);\r\n  const chatId = \"default-chat\";\r\n  \r\n  // Check authentication first\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      setIsAuthenticated(true);\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n  \r\n  // Function to test backend connectivity\r\n  const testBackendConnection = async () => {\r\n    try {\r\n      // Using a simple test message to check if backend responds\r\n      if (isAuthenticated) {\r\n        console.log('Attempting to connect to chat backend...');\r\n        const testResponse = await sendChatMessage('test_connection');\r\n        \r\n        // If we get here, we successfully connected\r\n        console.log('Connection test successful');\r\n        setConnectionStatus('online');\r\n        return true;\r\n      }\r\n      return false;\r\n    } catch (error) {\r\n      console.error('Connection test failed:', error);\r\n      setConnectionStatus('offline');\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Fetch messages when component mounts\r\n  useEffect(() => {\r\n    if (!isAuthenticated) return;\r\n\r\n    const fetchMessages = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const data = await getChatHistory();\r\n        if (Array.isArray(data) && data.length > 0) {\r\n          setMessages(data);\r\n          // If we got history, we're online\r\n          setConnectionStatus('online');\r\n        } else if (messages.length === 0) {\r\n          // Add a welcome message if we don't have any messages\r\n          setMessages([{\r\n            id: Date.now(),\r\n            content: \"Hello! I'm the OatmealAI Assistant. How can I help you today?\",\r\n            sender: 'OatmealAI',\r\n            timestamp: new Date().toISOString(),\r\n            isCurrentUser: false\r\n          }]);\r\n          \r\n          // Try to connect to backend to set proper status\r\n          await testBackendConnection();\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Failed to fetch messages:\", error);\r\n        \r\n        // If we've tried less than 3 times, attempt to test connectivity again\r\n        if (retryCount < 3) {\r\n          setRetryCount(prevCount => prevCount + 1);\r\n          await testBackendConnection();\r\n        } else {\r\n          setConnectionStatus('offline');\r\n        }\r\n        \r\n        // If no messages are present, add a welcome message\r\n        if (messages.length === 0) {\r\n          setMessages([{\r\n            id: Date.now(),\r\n            content: \"Hello! I'm the OatmealAI Assistant. I might be operating in offline mode, but I'll do my best to assist you.\",\r\n            sender: 'OatmealAI',\r\n            timestamp: new Date().toISOString(),\r\n            isCurrentUser: false\r\n          }]);\r\n        }\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchMessages();\r\n    \r\n    // We'll also explicitly test the connection\r\n    const checkConnection = async () => {\r\n      await testBackendConnection();\r\n    };\r\n    \r\n    // Check connection every 30 seconds\r\n    const intervalId = setInterval(checkConnection, 30000); \r\n    \r\n    // Initial connection check\r\n    checkConnection();\r\n    \r\n    return () => clearInterval(intervalId);\r\n  }, [chatId, isAuthenticated, retryCount]);\r\n  \r\n  // Scroll to bottom when new messages arrive\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [messages]);\r\n  \r\n  const handleSendMessage = async (e) => {\r\n    e.preventDefault();\r\n    if (!newMessage.trim() || isProcessing) return;\r\n    \r\n    try {\r\n      setIsProcessing(true);\r\n      \r\n      // Add user message to UI immediately\r\n      const userMessageContent = newMessage.trim();\r\n      const userMessage = {\r\n        id: Date.now(),\r\n        content: userMessageContent,\r\n        sender: 'User',\r\n        timestamp: new Date().toISOString(),\r\n        isCurrentUser: true\r\n      };\r\n      \r\n      setMessages(prevMessages => [...prevMessages, userMessage]);\r\n      setNewMessage('');\r\n      \r\n      // Add temporary \"thinking\" message\r\n      const thinkingMessage = {\r\n        id: Date.now() + 1,\r\n        content: \"Thinking...\",\r\n        sender: 'OatmealAI',\r\n        timestamp: new Date().toISOString(),\r\n        isCurrentUser: false,\r\n        isThinking: true\r\n      };\r\n      \r\n      setMessages(prevMessages => [...prevMessages, thinkingMessage]);\r\n      \r\n      // Send message to RAG pipeline\r\n      const response = await sendChatMessage(userMessageContent);\r\n      \r\n      // Replace thinking message with actual response\r\n      setMessages(prevMessages => {\r\n        const filteredMessages = prevMessages.filter(msg => !msg.isThinking);\r\n        return [\r\n          ...filteredMessages, \r\n          response.aiResponse\r\n        ];\r\n      });\r\n      \r\n      // If we got a successful response, we're online\r\n      setConnectionStatus('online');\r\n      \r\n    } catch (error) {\r\n      console.error(\"Failed to process message:\", error);\r\n      setConnectionStatus('offline');\r\n      \r\n      // Add error message\r\n      const errorMessage = {\r\n        id: Date.now() + 2,\r\n        content: \"Sorry, I couldn't process your request. I might be operating in offline mode at the moment. Please try again later.\",\r\n        sender: 'OatmealAI',\r\n        timestamp: new Date().toISOString(),\r\n        isCurrentUser: false\r\n      };\r\n      \r\n      setMessages(prevMessages => {\r\n        const filteredMessages = prevMessages.filter(msg => !msg.isThinking);\r\n        return [...filteredMessages, errorMessage];\r\n      });\r\n      \r\n    } finally {\r\n      setIsProcessing(false);\r\n    }\r\n  };\r\n  \r\n  if (loading) {\r\n    return <div className=\"loading-spinner\">Loading chat...</div>;\r\n  }\r\n\r\n  // Redirect to login if not authenticated\r\n  if (!isAuthenticated) {\r\n    return <Navigate to=\"/login\" />;\r\n  }\r\n  \r\n  // Get user name from session if available\r\n  const userName = sessionStorage.getItem('lastLoginEmail') || 'User';\r\n  \r\n  return (\r\n    <div className=\"chat-container\">\r\n      <div className=\"chat-header\">\r\n        <h2>OatmealAI Assistant</h2>\r\n        {connectionStatus !== 'checking' && (\r\n          <div className={`connection-status ${connectionStatus}`}>\r\n            {connectionStatus === 'online' ? 'Connected' : 'Offline Mode'}\r\n          </div>\r\n        )}\r\n      </div>\r\n      \r\n      <div className=\"messages-container\">\r\n        {messages.length === 0 ? (\r\n          <div className=\"no-messages\">\r\n            <p>No messages yet. Ask me anything about our services!</p>\r\n            <p className=\"hint\">Try asking: \"What can OatmealAI do for me?\" or \"How do I use this application?\"</p>\r\n          </div>\r\n        ) : (\r\n          messages.map((msg) => (\r\n            <div \r\n              key={msg.id} \r\n              className={`message ${msg.isCurrentUser ? 'message-mine' : 'message-other'} ${msg.isThinking ? 'thinking' : ''}`}\r\n            >\r\n              <div className=\"message-sender\">{msg.isCurrentUser ? userName : msg.sender}</div>\r\n              <div className=\"message-content\">\r\n                {msg.content}\r\n                {msg.sources && msg.sources.length > 0 && (\r\n                  <div className=\"message-sources\">\r\n                    <p className=\"sources-title\">Sources:</p>\r\n                    <ul>\r\n                      {msg.sources.map((source, index) => (\r\n                        <li key={index}>\r\n                          {source.title || source.url || source.path || \"Reference document\"}\r\n                          {source.url && <a href={source.url} target=\"_blank\" rel=\"noopener noreferrer\"> (link)</a>}\r\n                        </li>\r\n                      ))}\r\n                    </ul>\r\n                  </div>\r\n                )}\r\n              </div>\r\n              <div className=\"message-time\">\r\n                {new Date(msg.timestamp).toLocaleTimeString()}\r\n              </div>\r\n            </div>\r\n          ))\r\n        )}\r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n      \r\n      <form onSubmit={handleSendMessage} className=\"message-form\">\r\n        <input\r\n          type=\"text\"\r\n          value={newMessage}\r\n          onChange={(e) => setNewMessage(e.target.value)}\r\n          placeholder=\"Ask me anything...\"\r\n          className=\"message-input\"\r\n          disabled={isProcessing}\r\n        />\r\n        <button \r\n          type=\"submit\" \r\n          className={`send-button ${isProcessing ? 'disabled' : ''}`}\r\n          disabled={isProcessing}\r\n        >\r\n          {isProcessing ? 'Sending...' : 'Send'}\r\n        </button>\r\n      </form>\r\n      \r\n      {connectionStatus === 'offline' && (\r\n        <div className=\"offline-notice\">\r\n          <p>You're currently in offline mode. The assistant will provide general responses without accessing the full knowledge base.</p>\r\n          <button \r\n            onClick={() => testBackendConnection()} \r\n            className=\"retry-button\"\r\n          >\r\n            Retry Connection\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}