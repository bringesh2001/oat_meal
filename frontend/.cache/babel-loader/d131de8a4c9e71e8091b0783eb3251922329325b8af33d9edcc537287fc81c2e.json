{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\STSC\\\\Downloads\\\\Agent-Backend-main (3)\\\\my-app\\\\src\\\\pages\\\\DirectoryDetail.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport '../styles/DirectoryDetail.css';\nimport logo from '../images/OatmealaLogoi (1).png';\nimport { API_ENDPOINTS } from '../config';\n\n// Import images with the correct file extensions\nimport agriAssociaImg from '../images/agri_associa.png';\nimport artisianImg from '../images/artisian.jpg';\nimport brImg from '../images/br.jpg';\nimport crafOrgImg from '../images/craf_org.jpg';\nimport farmersMarketImg from '../images/farmers_market.jpg';\nimport farmsRanchesImg from '../images/farms_ranches.jpg';\nimport fiberImg from '../images/fiber.jpg';\nimport fiberMillsImg from '../images/fiber_mills.jpg';\nimport fisheriesImg from '../images/fisheries.jpeg';\nimport fishermenImg from '../images/fishermen.jpeg';\nimport foodCopImg from '../images/food_cop.jpg';\nimport foodHubImg from '../images/food_hub.jpg';\nimport groceryStoreImg from '../images/grocery_store.jpeg';\nimport manfacImg from '../images/manfac.jpeg';\nimport marinasImg from '../images/marinas.jpeg';\nimport meatImg from '../images/meat.jpg';\nimport realEstateImg from '../images/real_estate.webp';\nimport restaurantsImg from '../images/restaurants.jpg';\nimport retailersImg from '../images/retailers.png';\nimport serviceProvidersImg from '../images/service_providers.webp';\nimport universitiesImg from '../images/universities.jpeg';\nimport vetImg from '../images/vet.webp';\nimport vineyardsImg from '../images/vineyards.jpeg';\nimport wineriesImg from '../images/wineries.png';\nimport othersImg from '../images/others.jpg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DirectoryDetail() {\n  _s();\n  const {\n    directoryType\n  } = useParams();\n  const [countries, setCountries] = useState([]);\n  const [states, setStates] = useState([]);\n  const [businesses, setBusinesses] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState('');\n  const [selectedState, setSelectedState] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Format the directory type for display (convert path slugs to title)\n  const formatTitle = slug => {\n    if (!slug) return '';\n    return slug.split('-').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n  };\n  const title = formatTitle(directoryType);\n\n  // Map of directory type slugs to their corresponding images\n  const directoryImages = {\n    'agricultural-associations': agriAssociaImg,\n    'artisan-producers': artisianImg,\n    'business-resources': brImg,\n    'crafter-organizations': crafOrgImg,\n    'farmers-markets': farmersMarketImg,\n    'farms-ranches': farmsRanchesImg,\n    'fiber-cooperatives': fiberImg,\n    'fiber-mills': fiberMillsImg,\n    'fisheries': fisheriesImg,\n    'fishermen': fishermenImg,\n    'food-cooperatives': foodCopImg,\n    'food-hubs': foodHubImg,\n    'grocery-stores': groceryStoreImg,\n    'manufacturers': manfacImg,\n    'marinas': marinasImg,\n    'meat-wholesalers': meatImg,\n    'real-estate-agents': realEstateImg,\n    'restaurants': restaurantsImg,\n    'retailers': retailersImg,\n    'service-providers': serviceProvidersImg,\n    'universities': universitiesImg,\n    'veterinarians': vetImg,\n    'vineyards': vineyardsImg,\n    'wineries': wineriesImg,\n    'others': othersImg\n  };\n\n  // Get the correct image for the current directory type\n  const getHeaderImage = () => {\n    return directoryImages[directoryType] || othersImg; // Default to \"others\" if not found\n  };\n\n  // Load countries from API\n  useEffect(() => {\n    const loadCountries = async () => {\n      setIsLoading(true);\n      setError(null);\n      try {\n        // Test the CORS setup with a simple endpoint\n        console.log(\"Testing CORS with simple API:\", API_ENDPOINTS.test);\n        try {\n          const corsTestResponse = await fetch(API_ENDPOINTS.test);\n          console.log(\"CORS test response status:\", corsTestResponse.status);\n          if (corsTestResponse.ok) {\n            const corsTestData = await corsTestResponse.json();\n            console.log(\"CORS test received data:\", corsTestData);\n          } else {\n            console.error(\"CORS test failed\");\n          }\n        } catch (corsTestError) {\n          console.error(\"CORS test error:\", corsTestError);\n        }\n\n        // Make a direct request to test the countries API\n        const testUrl = 'http://localhost:8000/api/countries/';\n        console.log(\"Testing countries API directly:\", testUrl);\n\n        // First try a direct test\n        try {\n          const testResponse = await fetch(testUrl);\n          console.log(\"Direct test response status:\", testResponse.status);\n          if (testResponse.ok) {\n            const testData = await testResponse.json();\n            console.log(\"Direct test received data:\", testData);\n          } else {\n            console.error(\"Direct test failed\");\n          }\n        } catch (testError) {\n          console.error(\"Direct test error:\", testError);\n        }\n\n        // Now try the configured endpoint\n        console.log(\"Fetching countries from API...\");\n        console.log(\"Countries API URL:\", API_ENDPOINTS.countries);\n        const response = await fetch(API_ENDPOINTS.countries);\n        console.log(\"Countries API response status:\", response.status);\n        if (!response.ok) {\n          const errorText = await response.text();\n          console.error(\"Error response text:\", errorText);\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log(\"Countries data received:\", data);\n        if (Array.isArray(data)) {\n          setCountries(data);\n        } else {\n          console.error(\"Unexpected countries data format:\", data);\n          setError(\"Received invalid data format for countries\");\n        }\n      } catch (error) {\n        console.error(\"Error loading countries:\", error);\n        setError(`Failed to load countries: ${error.message}`);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    loadCountries();\n  }, []);\n\n  // Load states when country is selected\n  useEffect(() => {\n    if (!selectedCountry) {\n      setStates([]);\n      return;\n    }\n    const loadStates = async country => {\n      if (!country) return;\n      setIsLoading(true);\n      setError(null);\n      try {\n        console.log(`Fetching states for country: ${country}`);\n        const url = `${API_ENDPOINTS.states}?country=${encodeURIComponent(country)}`;\n        console.log(\"States API URL:\", url);\n        const response = await fetch(url);\n        console.log(\"States API response status:\", response.status);\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log(\"States data received:\", data);\n        if (Array.isArray(data)) {\n          setStates(data);\n        } else {\n          console.error(\"Unexpected states data format:\", data);\n          setError(\"Received invalid data format for states\");\n        }\n      } catch (error) {\n        console.error(`Error loading states for ${country}:`, error);\n        setError(`Failed to load states: ${error.message}`);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    loadStates(selectedCountry);\n  }, [selectedCountry]);\n\n  // Load businesses when country and state are selected\n  useEffect(() => {\n    if (!selectedCountry || !selectedState) {\n      setBusinesses([]);\n      return;\n    }\n    const loadBusinesses = async () => {\n      try {\n        setIsLoading(true);\n        setError(null);\n        const encodedTitle = encodeURIComponent(directoryType);\n        const encodedCountry = encodeURIComponent(selectedCountry);\n        const encodedState = encodeURIComponent(selectedState);\n\n        // Use the directoryBusinesses endpoint from the config\n        const apiUrl = `${API_ENDPOINTS.directoryBusinesses}?directory=${encodedTitle}&country=${encodedCountry}&state=${encodedState}`;\n        console.log(\"Fetching businesses from:\", apiUrl);\n        const response = await fetch(apiUrl);\n        if (!response.ok) {\n          const errorData = await response.text();\n          console.error(\"Businesses API error:\", errorData);\n          throw new Error(`Failed to fetch businesses: ${response.status} ${response.statusText}`);\n        }\n        const data = await response.json();\n        console.log(\"Businesses data:\", data);\n\n        // Check if the response is in the expected format\n        if (data.success && Array.isArray(data.businesses)) {\n          setBusinesses(data.businesses);\n        } else if (Array.isArray(data)) {\n          setBusinesses(data); // Fallback for direct array response\n        } else {\n          setBusinesses([]);\n          console.warn('Unexpected response format:', data);\n          if (data.error) {\n            setError(`Failed to load businesses: ${data.error}`);\n          } else {\n            setError('Received unexpected data format from server.');\n          }\n        }\n      } catch (error) {\n        console.error('Error loading businesses:', error);\n        setError(`Failed to load businesses: ${error.message}`);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    loadBusinesses();\n  }, [selectedCountry, selectedState, directoryType]);\n\n  // Clear all selections\n  const clearAll = () => {\n    setSelectedCountry('');\n    setSelectedState('');\n    setBusinesses([]);\n  };\n\n  // Debug location\n  const debugLocation = async () => {\n    if (!selectedCountry || !selectedState) {\n      alert('Please select both country and state first');\n      return;\n    }\n    try {\n      setIsLoading(true);\n      const response = await fetch(`/api/location-info/${encodeURIComponent(selectedCountry)}/${encodeURIComponent(selectedState)}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch location info');\n      }\n      const data = await response.json();\n      let message = `Location: ${selectedCountry}, ${selectedState}\\n`;\n      message += `Total businesses: ${data.total_businesses}\\n\\n`;\n      message += 'Business types available in this location:\\n';\n      for (const [type, count] of Object.entries(data.business_types)) {\n        message += `- ${type}: ${count} businesses\\n`;\n      }\n      alert(message);\n    } catch (error) {\n      console.error('Error checking location:', error);\n      alert('Failed to check location data');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        alt: \"Oatmeal AI Logo\",\n        className: \"sidebar-logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Oatmeal AI\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/\",\n            children: \"Home\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/chat\",\n            children: \"Chat\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: getHeaderImage(),\n          alt: `${title}`,\n          className: \"header-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filter-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Country\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: selectedCountry,\n            onChange: e => setSelectedCountry(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select Country\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 329,\n              columnNumber: 15\n            }, this), countries.map((country, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: country,\n              children: country\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 331,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filter-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"State\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: selectedState,\n            onChange: e => setSelectedState(e.target.value),\n            disabled: !selectedCountry,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select State\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 343,\n              columnNumber: 15\n            }, this), states.map((state, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: state,\n              children: state\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 345,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"clear-btn\",\n          onClick: clearAll,\n          children: \"Clear all\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"debug-btn\",\n          onClick: debugLocation,\n          children: \"Debug Location\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"candidates\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Result: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            id: \"resultCount\",\n            children: businesses.length\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 360,\n            columnNumber: 23\n          }, this), \" Businesses\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"business-list\",\n          children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"loading\",\n            children: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 363,\n            columnNumber: 15\n          }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"error-message\",\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 365,\n            columnNumber: 15\n          }, this) : businesses.length === 0 && selectedCountry && selectedState ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"error-message\",\n            children: \"No businesses found for this location. Please try a different selection.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 367,\n            columnNumber: 15\n          }, this) : businesses.map((business, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"candidate\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"candidate-info\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: business.business_name || business.name || (typeof business === 'string' ? business : 'Unnamed Business')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 372,\n                columnNumber: 21\n              }, this), business.description && /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"business-description\",\n                children: business.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 373,\n                columnNumber: 46\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"business-contact-info\",\n                children: [business.address && /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"business-address\",\n                  children: business.address\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 375,\n                  columnNumber: 44\n                }, this), business.city && business.state && /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"business-location\",\n                  children: [business.city, \", \", business.state, \" \", business.zip_code && business.zip_code]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 377,\n                  columnNumber: 25\n                }, this), business.phone && /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"business-phone\",\n                  children: [\"Phone: \", business.phone]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 381,\n                  columnNumber: 42\n                }, this), business.email && /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"business-email\",\n                  children: [\"Email: \", business.email]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 382,\n                  columnNumber: 42\n                }, this), business.website && /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"business-website\",\n                  children: [\"Website: \", /*#__PURE__*/_jsxDEV(\"a\", {\n                    href: business.website.startsWith('http') ? business.website : `https://${business.website}`,\n                    target: \"_blank\",\n                    rel: \"noopener noreferrer\",\n                    children: business.website\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 383,\n                    columnNumber: 85\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 383,\n                  columnNumber: 44\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 374,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 371,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"candidate-actions\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"open-btn\",\n                onClick: () => {\n                  const businessId = business.business_id || index;\n                  window.open(`/business/${businessId}`, '_blank');\n                },\n                children: \"Open\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 387,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"detail-btn\",\n                children: \"Detail\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 396,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 386,\n              columnNumber: 19\n            }, this)]\n          }, business.business_id || index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 302,\n    columnNumber: 5\n  }, this);\n}\n_s(DirectoryDetail, \"RrKg9gt0a5GxS0SyuRLbhvMe070=\", false, function () {\n  return [useParams];\n});\n_c = DirectoryDetail;\nexport default DirectoryDetail;\nvar _c;\n$RefreshReg$(_c, \"DirectoryDetail\");","map":{"version":3,"names":["React","useState","useEffect","useParams","Link","logo","API_ENDPOINTS","agriAssociaImg","artisianImg","brImg","crafOrgImg","farmersMarketImg","farmsRanchesImg","fiberImg","fiberMillsImg","fisheriesImg","fishermenImg","foodCopImg","foodHubImg","groceryStoreImg","manfacImg","marinasImg","meatImg","realEstateImg","restaurantsImg","retailersImg","serviceProvidersImg","universitiesImg","vetImg","vineyardsImg","wineriesImg","othersImg","jsxDEV","_jsxDEV","DirectoryDetail","_s","directoryType","countries","setCountries","states","setStates","businesses","setBusinesses","selectedCountry","setSelectedCountry","selectedState","setSelectedState","isLoading","setIsLoading","error","setError","formatTitle","slug","split","map","word","charAt","toUpperCase","slice","join","title","directoryImages","getHeaderImage","loadCountries","console","log","test","corsTestResponse","fetch","status","ok","corsTestData","json","corsTestError","testUrl","testResponse","testData","testError","response","errorText","text","Error","data","Array","isArray","message","loadStates","country","url","encodeURIComponent","loadBusinesses","encodedTitle","encodedCountry","encodedState","apiUrl","directoryBusinesses","errorData","statusText","success","warn","clearAll","debugLocation","alert","total_businesses","type","count","Object","entries","business_types","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","to","value","onChange","e","target","index","disabled","state","onClick","id","length","business","business_name","name","description","address","city","zip_code","phone","email","website","href","startsWith","rel","businessId","business_id","window","open","_c","$RefreshReg$"],"sources":["C:/Users/STSC/Downloads/Agent-Backend-main (3)/my-app/src/pages/DirectoryDetail.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams, Link } from 'react-router-dom';\r\nimport '../styles/DirectoryDetail.css';\r\nimport logo from '../images/OatmealaLogoi (1).png';\r\nimport { API_ENDPOINTS } from '../config';\r\n\r\n// Import images with the correct file extensions\r\nimport agriAssociaImg from '../images/agri_associa.png';\r\nimport artisianImg from '../images/artisian.jpg';\r\nimport brImg from '../images/br.jpg';\r\nimport crafOrgImg from '../images/craf_org.jpg';\r\nimport farmersMarketImg from '../images/farmers_market.jpg';\r\nimport farmsRanchesImg from '../images/farms_ranches.jpg';\r\nimport fiberImg from '../images/fiber.jpg';\r\nimport fiberMillsImg from '../images/fiber_mills.jpg';\r\nimport fisheriesImg from '../images/fisheries.jpeg';\r\nimport fishermenImg from '../images/fishermen.jpeg';\r\nimport foodCopImg from '../images/food_cop.jpg';\r\nimport foodHubImg from '../images/food_hub.jpg';\r\nimport groceryStoreImg from '../images/grocery_store.jpeg';\r\nimport manfacImg from '../images/manfac.jpeg';\r\nimport marinasImg from '../images/marinas.jpeg';\r\nimport meatImg from '../images/meat.jpg';\r\nimport realEstateImg from '../images/real_estate.webp';\r\nimport restaurantsImg from '../images/restaurants.jpg';\r\nimport retailersImg from '../images/retailers.png';\r\nimport serviceProvidersImg from '../images/service_providers.webp';\r\nimport universitiesImg from '../images/universities.jpeg';\r\nimport vetImg from '../images/vet.webp';\r\nimport vineyardsImg from '../images/vineyards.jpeg';\r\nimport wineriesImg from '../images/wineries.png';\r\nimport othersImg from '../images/others.jpg';\r\n\r\nfunction DirectoryDetail() {\r\n  const { directoryType } = useParams();\r\n  const [countries, setCountries] = useState([]);\r\n  const [states, setStates] = useState([]);\r\n  const [businesses, setBusinesses] = useState([]);\r\n  const [selectedCountry, setSelectedCountry] = useState('');\r\n  const [selectedState, setSelectedState] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Format the directory type for display (convert path slugs to title)\r\n  const formatTitle = (slug) => {\r\n    if (!slug) return '';\r\n    return slug.split('-')\r\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1))\r\n      .join(' ');\r\n  };\r\n\r\n  const title = formatTitle(directoryType);\r\n\r\n  // Map of directory type slugs to their corresponding images\r\n  const directoryImages = {\r\n    'agricultural-associations': agriAssociaImg,\r\n    'artisan-producers': artisianImg,\r\n    'business-resources': brImg,\r\n    'crafter-organizations': crafOrgImg,\r\n    'farmers-markets': farmersMarketImg,\r\n    'farms-ranches': farmsRanchesImg,\r\n    'fiber-cooperatives': fiberImg,\r\n    'fiber-mills': fiberMillsImg,\r\n    'fisheries': fisheriesImg,\r\n    'fishermen': fishermenImg,\r\n    'food-cooperatives': foodCopImg,\r\n    'food-hubs': foodHubImg,\r\n    'grocery-stores': groceryStoreImg,\r\n    'manufacturers': manfacImg,\r\n    'marinas': marinasImg,\r\n    'meat-wholesalers': meatImg,\r\n    'real-estate-agents': realEstateImg,\r\n    'restaurants': restaurantsImg,\r\n    'retailers': retailersImg,\r\n    'service-providers': serviceProvidersImg,\r\n    'universities': universitiesImg,\r\n    'veterinarians': vetImg,\r\n    'vineyards': vineyardsImg,\r\n    'wineries': wineriesImg,\r\n    'others': othersImg\r\n  };\r\n\r\n  // Get the correct image for the current directory type\r\n  const getHeaderImage = () => {\r\n    return directoryImages[directoryType] || othersImg; // Default to \"others\" if not found\r\n  };\r\n\r\n  // Load countries from API\r\n  useEffect(() => {\r\n    const loadCountries = async () => {\r\n      setIsLoading(true);\r\n      setError(null);\r\n      try {\r\n        // Test the CORS setup with a simple endpoint\r\n        console.log(\"Testing CORS with simple API:\", API_ENDPOINTS.test);\r\n        \r\n        try {\r\n          const corsTestResponse = await fetch(API_ENDPOINTS.test);\r\n          console.log(\"CORS test response status:\", corsTestResponse.status);\r\n          if (corsTestResponse.ok) {\r\n            const corsTestData = await corsTestResponse.json();\r\n            console.log(\"CORS test received data:\", corsTestData);\r\n          } else {\r\n            console.error(\"CORS test failed\");\r\n          }\r\n        } catch (corsTestError) {\r\n          console.error(\"CORS test error:\", corsTestError);\r\n        }\r\n        \r\n        // Make a direct request to test the countries API\r\n        const testUrl = 'http://localhost:8000/api/countries/';\r\n        console.log(\"Testing countries API directly:\", testUrl);\r\n        \r\n        // First try a direct test\r\n        try {\r\n          const testResponse = await fetch(testUrl);\r\n          console.log(\"Direct test response status:\", testResponse.status);\r\n          if (testResponse.ok) {\r\n            const testData = await testResponse.json();\r\n            console.log(\"Direct test received data:\", testData);\r\n          } else {\r\n            console.error(\"Direct test failed\");\r\n          }\r\n        } catch (testError) {\r\n          console.error(\"Direct test error:\", testError);\r\n        }\r\n        \r\n        // Now try the configured endpoint\r\n        console.log(\"Fetching countries from API...\");\r\n        console.log(\"Countries API URL:\", API_ENDPOINTS.countries);\r\n        \r\n        const response = await fetch(API_ENDPOINTS.countries);\r\n        console.log(\"Countries API response status:\", response.status);\r\n        \r\n        if (!response.ok) {\r\n          const errorText = await response.text();\r\n          console.error(\"Error response text:\", errorText);\r\n          throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        \r\n        const data = await response.json();\r\n        console.log(\"Countries data received:\", data);\r\n        \r\n        if (Array.isArray(data)) {\r\n          setCountries(data);\r\n        } else {\r\n          console.error(\"Unexpected countries data format:\", data);\r\n          setError(\"Received invalid data format for countries\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error loading countries:\", error);\r\n        setError(`Failed to load countries: ${error.message}`);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    loadCountries();\r\n  }, []);\r\n\r\n  // Load states when country is selected\r\n  useEffect(() => {\r\n    if (!selectedCountry) {\r\n      setStates([]);\r\n      return;\r\n    }\r\n\r\n    const loadStates = async (country) => {\r\n      if (!country) return;\r\n      \r\n      setIsLoading(true);\r\n      setError(null);\r\n      try {\r\n        console.log(`Fetching states for country: ${country}`);\r\n        const url = `${API_ENDPOINTS.states}?country=${encodeURIComponent(country)}`;\r\n        console.log(\"States API URL:\", url);\r\n        \r\n        const response = await fetch(url);\r\n        console.log(\"States API response status:\", response.status);\r\n        \r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        \r\n        const data = await response.json();\r\n        console.log(\"States data received:\", data);\r\n        \r\n        if (Array.isArray(data)) {\r\n          setStates(data);\r\n        } else {\r\n          console.error(\"Unexpected states data format:\", data);\r\n          setError(\"Received invalid data format for states\");\r\n        }\r\n      } catch (error) {\r\n        console.error(`Error loading states for ${country}:`, error);\r\n        setError(`Failed to load states: ${error.message}`);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    loadStates(selectedCountry);\r\n  }, [selectedCountry]);\r\n\r\n  // Load businesses when country and state are selected\r\n  useEffect(() => {\r\n    if (!selectedCountry || !selectedState) {\r\n      setBusinesses([]);\r\n      return;\r\n    }\r\n\r\n    const loadBusinesses = async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        setError(null);\r\n        \r\n        const encodedTitle = encodeURIComponent(directoryType);\r\n        const encodedCountry = encodeURIComponent(selectedCountry);\r\n        const encodedState = encodeURIComponent(selectedState);\r\n        \r\n        // Use the directoryBusinesses endpoint from the config\r\n        const apiUrl = `${API_ENDPOINTS.directoryBusinesses}?directory=${encodedTitle}&country=${encodedCountry}&state=${encodedState}`;\r\n        console.log(\"Fetching businesses from:\", apiUrl);\r\n        \r\n        const response = await fetch(apiUrl);\r\n        \r\n        if (!response.ok) {\r\n          const errorData = await response.text();\r\n          console.error(\"Businesses API error:\", errorData);\r\n          throw new Error(`Failed to fetch businesses: ${response.status} ${response.statusText}`);\r\n        }\r\n        \r\n        const data = await response.json();\r\n        console.log(\"Businesses data:\", data);\r\n        \r\n        // Check if the response is in the expected format\r\n        if (data.success && Array.isArray(data.businesses)) {\r\n          setBusinesses(data.businesses);\r\n        } else if (Array.isArray(data)) {\r\n          setBusinesses(data); // Fallback for direct array response\r\n        } else {\r\n          setBusinesses([]);\r\n          console.warn('Unexpected response format:', data);\r\n          if (data.error) {\r\n            setError(`Failed to load businesses: ${data.error}`);\r\n          } else {\r\n            setError('Received unexpected data format from server.');\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error loading businesses:', error);\r\n        setError(`Failed to load businesses: ${error.message}`);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    loadBusinesses();\r\n  }, [selectedCountry, selectedState, directoryType]);\r\n\r\n  // Clear all selections\r\n  const clearAll = () => {\r\n    setSelectedCountry('');\r\n    setSelectedState('');\r\n    setBusinesses([]);\r\n  };\r\n\r\n  // Debug location\r\n  const debugLocation = async () => {\r\n    if (!selectedCountry || !selectedState) {\r\n      alert('Please select both country and state first');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsLoading(true);\r\n      const response = await fetch(`/api/location-info/${encodeURIComponent(selectedCountry)}/${encodeURIComponent(selectedState)}`);\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch location info');\r\n      }\r\n      \r\n      const data = await response.json();\r\n      \r\n      let message = `Location: ${selectedCountry}, ${selectedState}\\n`;\r\n      message += `Total businesses: ${data.total_businesses}\\n\\n`;\r\n      message += 'Business types available in this location:\\n';\r\n      \r\n      for (const [type, count] of Object.entries(data.business_types)) {\r\n        message += `- ${type}: ${count} businesses\\n`;\r\n      }\r\n      \r\n      alert(message);\r\n    } catch (error) {\r\n      console.error('Error checking location:', error);\r\n      alert('Failed to check location data');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <nav className=\"sidebar\">\r\n        <img src={logo} alt=\"Oatmeal AI Logo\" className=\"sidebar-logo\" />\r\n        <h2>Oatmeal AI</h2>\r\n        <ul>\r\n          <li><Link to=\"/\">Home</Link></li>\r\n          <li><Link to=\"/chat\">Chat</Link></li>\r\n        </ul>\r\n      </nav>\r\n      \r\n      <main>\r\n        <header>\r\n          <img \r\n            src={getHeaderImage()} \r\n            alt={`${title}`} \r\n            className=\"header-image\" \r\n          />\r\n          <h1>{title}</h1>\r\n        </header>\r\n        \r\n        <div className=\"filter-section\">\r\n          <div className=\"filter-group\">\r\n            <label>Country</label>\r\n            <select \r\n              value={selectedCountry}\r\n              onChange={(e) => setSelectedCountry(e.target.value)}\r\n            >\r\n              <option value=\"\">Select Country</option>\r\n              {countries.map((country, index) => (\r\n                <option key={index} value={country}>{country}</option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          \r\n          <div className=\"filter-group\">\r\n            <label>State</label>\r\n            <select \r\n              value={selectedState}\r\n              onChange={(e) => setSelectedState(e.target.value)}\r\n              disabled={!selectedCountry}\r\n            >\r\n              <option value=\"\">Select State</option>\r\n              {states.map((state, index) => (\r\n                <option key={index} value={state}>{state}</option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          \r\n          <button className=\"clear-btn\" onClick={clearAll}>Clear all</button>\r\n          <button \r\n            className=\"debug-btn\" \r\n            onClick={debugLocation}\r\n          >\r\n            Debug Location\r\n          </button>\r\n        </div>\r\n        \r\n        <section className=\"candidates\">\r\n          <h2>Result: <span id=\"resultCount\">{businesses.length}</span> Businesses</h2>\r\n          <div id=\"business-list\">\r\n            {isLoading ? (\r\n              <div className=\"loading\">Loading...</div>\r\n            ) : error ? (\r\n              <div className=\"error-message\">{error}</div>\r\n            ) : businesses.length === 0 && (selectedCountry && selectedState) ? (\r\n              <div className=\"error-message\">No businesses found for this location. Please try a different selection.</div>\r\n            ) : (\r\n              businesses.map((business, index) => (\r\n                <div className=\"candidate\" key={business.business_id || index}>\r\n                  <div className=\"candidate-info\">\r\n                    <h3>{business.business_name || business.name || (typeof business === 'string' ? business : 'Unnamed Business')}</h3>\r\n                    {business.description && <p className=\"business-description\">{business.description}</p>}\r\n                    <div className=\"business-contact-info\">\r\n                      {business.address && <p className=\"business-address\">{business.address}</p>}\r\n                      {business.city && business.state && (\r\n                        <p className=\"business-location\">\r\n                          {business.city}, {business.state} {business.zip_code && business.zip_code}\r\n                        </p>\r\n                      )}\r\n                      {business.phone && <p className=\"business-phone\">Phone: {business.phone}</p>}\r\n                      {business.email && <p className=\"business-email\">Email: {business.email}</p>}\r\n                      {business.website && <p className=\"business-website\">Website: <a href={business.website.startsWith('http') ? business.website : `https://${business.website}`} target=\"_blank\" rel=\"noopener noreferrer\">{business.website}</a></p>}\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"candidate-actions\">\r\n                    <button \r\n                      className=\"open-btn\" \r\n                      onClick={() => {\r\n                        const businessId = business.business_id || index;\r\n                        window.open(`/business/${businessId}`, '_blank');\r\n                      }}\r\n                    >\r\n                      Open\r\n                    </button>\r\n                    <button className=\"detail-btn\">Detail</button>\r\n                  </div>\r\n                </div>\r\n              ))\r\n            )}\r\n          </div>\r\n        </section>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DirectoryDetail; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,IAAI,QAAQ,kBAAkB;AAClD,OAAO,+BAA+B;AACtC,OAAOC,IAAI,MAAM,iCAAiC;AAClD,SAASC,aAAa,QAAQ,WAAW;;AAEzC;AACA,OAAOC,cAAc,MAAM,4BAA4B;AACvD,OAAOC,WAAW,MAAM,wBAAwB;AAChD,OAAOC,KAAK,MAAM,kBAAkB;AACpC,OAAOC,UAAU,MAAM,wBAAwB;AAC/C,OAAOC,gBAAgB,MAAM,8BAA8B;AAC3D,OAAOC,eAAe,MAAM,6BAA6B;AACzD,OAAOC,QAAQ,MAAM,qBAAqB;AAC1C,OAAOC,aAAa,MAAM,2BAA2B;AACrD,OAAOC,YAAY,MAAM,0BAA0B;AACnD,OAAOC,YAAY,MAAM,0BAA0B;AACnD,OAAOC,UAAU,MAAM,wBAAwB;AAC/C,OAAOC,UAAU,MAAM,wBAAwB;AAC/C,OAAOC,eAAe,MAAM,8BAA8B;AAC1D,OAAOC,SAAS,MAAM,uBAAuB;AAC7C,OAAOC,UAAU,MAAM,wBAAwB;AAC/C,OAAOC,OAAO,MAAM,oBAAoB;AACxC,OAAOC,aAAa,MAAM,4BAA4B;AACtD,OAAOC,cAAc,MAAM,2BAA2B;AACtD,OAAOC,YAAY,MAAM,yBAAyB;AAClD,OAAOC,mBAAmB,MAAM,kCAAkC;AAClE,OAAOC,eAAe,MAAM,6BAA6B;AACzD,OAAOC,MAAM,MAAM,oBAAoB;AACvC,OAAOC,YAAY,MAAM,0BAA0B;AACnD,OAAOC,WAAW,MAAM,wBAAwB;AAChD,OAAOC,SAAS,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACzB,MAAM;IAAEC;EAAc,CAAC,GAAGjC,SAAS,CAAC,CAAC;EACrC,MAAM,CAACkC,SAAS,EAAEC,YAAY,CAAC,GAAGrC,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACsC,MAAM,EAAEC,SAAS,CAAC,GAAGvC,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACwC,UAAU,EAAEC,aAAa,CAAC,GAAGzC,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAAC0C,eAAe,EAAEC,kBAAkB,CAAC,GAAG3C,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAAC4C,aAAa,EAAEC,gBAAgB,CAAC,GAAG7C,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAAC8C,SAAS,EAAEC,YAAY,CAAC,GAAG/C,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACgD,KAAK,EAAEC,QAAQ,CAAC,GAAGjD,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACA,MAAMkD,WAAW,GAAIC,IAAI,IAAK;IAC5B,IAAI,CAACA,IAAI,EAAE,OAAO,EAAE;IACpB,OAAOA,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CACnBC,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGF,IAAI,CAACG,KAAK,CAAC,CAAC,CAAC,CAAC,CACzDC,IAAI,CAAC,GAAG,CAAC;EACd,CAAC;EAED,MAAMC,KAAK,GAAGT,WAAW,CAACf,aAAa,CAAC;;EAExC;EACA,MAAMyB,eAAe,GAAG;IACtB,2BAA2B,EAAEtD,cAAc;IAC3C,mBAAmB,EAAEC,WAAW;IAChC,oBAAoB,EAAEC,KAAK;IAC3B,uBAAuB,EAAEC,UAAU;IACnC,iBAAiB,EAAEC,gBAAgB;IACnC,eAAe,EAAEC,eAAe;IAChC,oBAAoB,EAAEC,QAAQ;IAC9B,aAAa,EAAEC,aAAa;IAC5B,WAAW,EAAEC,YAAY;IACzB,WAAW,EAAEC,YAAY;IACzB,mBAAmB,EAAEC,UAAU;IAC/B,WAAW,EAAEC,UAAU;IACvB,gBAAgB,EAAEC,eAAe;IACjC,eAAe,EAAEC,SAAS;IAC1B,SAAS,EAAEC,UAAU;IACrB,kBAAkB,EAAEC,OAAO;IAC3B,oBAAoB,EAAEC,aAAa;IACnC,aAAa,EAAEC,cAAc;IAC7B,WAAW,EAAEC,YAAY;IACzB,mBAAmB,EAAEC,mBAAmB;IACxC,cAAc,EAAEC,eAAe;IAC/B,eAAe,EAAEC,MAAM;IACvB,WAAW,EAAEC,YAAY;IACzB,UAAU,EAAEC,WAAW;IACvB,QAAQ,EAAEC;EACZ,CAAC;;EAED;EACA,MAAM+B,cAAc,GAAGA,CAAA,KAAM;IAC3B,OAAOD,eAAe,CAACzB,aAAa,CAAC,IAAIL,SAAS,CAAC,CAAC;EACtD,CAAC;;EAED;EACA7B,SAAS,CAAC,MAAM;IACd,MAAM6D,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChCf,YAAY,CAAC,IAAI,CAAC;MAClBE,QAAQ,CAAC,IAAI,CAAC;MACd,IAAI;QACF;QACAc,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAE3D,aAAa,CAAC4D,IAAI,CAAC;QAEhE,IAAI;UACF,MAAMC,gBAAgB,GAAG,MAAMC,KAAK,CAAC9D,aAAa,CAAC4D,IAAI,CAAC;UACxDF,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEE,gBAAgB,CAACE,MAAM,CAAC;UAClE,IAAIF,gBAAgB,CAACG,EAAE,EAAE;YACvB,MAAMC,YAAY,GAAG,MAAMJ,gBAAgB,CAACK,IAAI,CAAC,CAAC;YAClDR,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEM,YAAY,CAAC;UACvD,CAAC,MAAM;YACLP,OAAO,CAACf,KAAK,CAAC,kBAAkB,CAAC;UACnC;QACF,CAAC,CAAC,OAAOwB,aAAa,EAAE;UACtBT,OAAO,CAACf,KAAK,CAAC,kBAAkB,EAAEwB,aAAa,CAAC;QAClD;;QAEA;QACA,MAAMC,OAAO,GAAG,sCAAsC;QACtDV,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAES,OAAO,CAAC;;QAEvD;QACA,IAAI;UACF,MAAMC,YAAY,GAAG,MAAMP,KAAK,CAACM,OAAO,CAAC;UACzCV,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEU,YAAY,CAACN,MAAM,CAAC;UAChE,IAAIM,YAAY,CAACL,EAAE,EAAE;YACnB,MAAMM,QAAQ,GAAG,MAAMD,YAAY,CAACH,IAAI,CAAC,CAAC;YAC1CR,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEW,QAAQ,CAAC;UACrD,CAAC,MAAM;YACLZ,OAAO,CAACf,KAAK,CAAC,oBAAoB,CAAC;UACrC;QACF,CAAC,CAAC,OAAO4B,SAAS,EAAE;UAClBb,OAAO,CAACf,KAAK,CAAC,oBAAoB,EAAE4B,SAAS,CAAC;QAChD;;QAEA;QACAb,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;QAC7CD,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAE3D,aAAa,CAAC+B,SAAS,CAAC;QAE1D,MAAMyC,QAAQ,GAAG,MAAMV,KAAK,CAAC9D,aAAa,CAAC+B,SAAS,CAAC;QACrD2B,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEa,QAAQ,CAACT,MAAM,CAAC;QAE9D,IAAI,CAACS,QAAQ,CAACR,EAAE,EAAE;UAChB,MAAMS,SAAS,GAAG,MAAMD,QAAQ,CAACE,IAAI,CAAC,CAAC;UACvChB,OAAO,CAACf,KAAK,CAAC,sBAAsB,EAAE8B,SAAS,CAAC;UAChD,MAAM,IAAIE,KAAK,CAAC,uBAAuBH,QAAQ,CAACT,MAAM,EAAE,CAAC;QAC3D;QAEA,MAAMa,IAAI,GAAG,MAAMJ,QAAQ,CAACN,IAAI,CAAC,CAAC;QAClCR,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEiB,IAAI,CAAC;QAE7C,IAAIC,KAAK,CAACC,OAAO,CAACF,IAAI,CAAC,EAAE;UACvB5C,YAAY,CAAC4C,IAAI,CAAC;QACpB,CAAC,MAAM;UACLlB,OAAO,CAACf,KAAK,CAAC,mCAAmC,EAAEiC,IAAI,CAAC;UACxDhC,QAAQ,CAAC,4CAA4C,CAAC;QACxD;MACF,CAAC,CAAC,OAAOD,KAAK,EAAE;QACde,OAAO,CAACf,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;QAChDC,QAAQ,CAAC,6BAA6BD,KAAK,CAACoC,OAAO,EAAE,CAAC;MACxD,CAAC,SAAS;QACRrC,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAEDe,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA7D,SAAS,CAAC,MAAM;IACd,IAAI,CAACyC,eAAe,EAAE;MACpBH,SAAS,CAAC,EAAE,CAAC;MACb;IACF;IAEA,MAAM8C,UAAU,GAAG,MAAOC,OAAO,IAAK;MACpC,IAAI,CAACA,OAAO,EAAE;MAEdvC,YAAY,CAAC,IAAI,CAAC;MAClBE,QAAQ,CAAC,IAAI,CAAC;MACd,IAAI;QACFc,OAAO,CAACC,GAAG,CAAC,gCAAgCsB,OAAO,EAAE,CAAC;QACtD,MAAMC,GAAG,GAAG,GAAGlF,aAAa,CAACiC,MAAM,YAAYkD,kBAAkB,CAACF,OAAO,CAAC,EAAE;QAC5EvB,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEuB,GAAG,CAAC;QAEnC,MAAMV,QAAQ,GAAG,MAAMV,KAAK,CAACoB,GAAG,CAAC;QACjCxB,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEa,QAAQ,CAACT,MAAM,CAAC;QAE3D,IAAI,CAACS,QAAQ,CAACR,EAAE,EAAE;UAChB,MAAM,IAAIW,KAAK,CAAC,uBAAuBH,QAAQ,CAACT,MAAM,EAAE,CAAC;QAC3D;QAEA,MAAMa,IAAI,GAAG,MAAMJ,QAAQ,CAACN,IAAI,CAAC,CAAC;QAClCR,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEiB,IAAI,CAAC;QAE1C,IAAIC,KAAK,CAACC,OAAO,CAACF,IAAI,CAAC,EAAE;UACvB1C,SAAS,CAAC0C,IAAI,CAAC;QACjB,CAAC,MAAM;UACLlB,OAAO,CAACf,KAAK,CAAC,gCAAgC,EAAEiC,IAAI,CAAC;UACrDhC,QAAQ,CAAC,yCAAyC,CAAC;QACrD;MACF,CAAC,CAAC,OAAOD,KAAK,EAAE;QACde,OAAO,CAACf,KAAK,CAAC,4BAA4BsC,OAAO,GAAG,EAAEtC,KAAK,CAAC;QAC5DC,QAAQ,CAAC,0BAA0BD,KAAK,CAACoC,OAAO,EAAE,CAAC;MACrD,CAAC,SAAS;QACRrC,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAEDsC,UAAU,CAAC3C,eAAe,CAAC;EAC7B,CAAC,EAAE,CAACA,eAAe,CAAC,CAAC;;EAErB;EACAzC,SAAS,CAAC,MAAM;IACd,IAAI,CAACyC,eAAe,IAAI,CAACE,aAAa,EAAE;MACtCH,aAAa,CAAC,EAAE,CAAC;MACjB;IACF;IAEA,MAAMgD,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACF1C,YAAY,CAAC,IAAI,CAAC;QAClBE,QAAQ,CAAC,IAAI,CAAC;QAEd,MAAMyC,YAAY,GAAGF,kBAAkB,CAACrD,aAAa,CAAC;QACtD,MAAMwD,cAAc,GAAGH,kBAAkB,CAAC9C,eAAe,CAAC;QAC1D,MAAMkD,YAAY,GAAGJ,kBAAkB,CAAC5C,aAAa,CAAC;;QAEtD;QACA,MAAMiD,MAAM,GAAG,GAAGxF,aAAa,CAACyF,mBAAmB,cAAcJ,YAAY,YAAYC,cAAc,UAAUC,YAAY,EAAE;QAC/H7B,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAE6B,MAAM,CAAC;QAEhD,MAAMhB,QAAQ,GAAG,MAAMV,KAAK,CAAC0B,MAAM,CAAC;QAEpC,IAAI,CAAChB,QAAQ,CAACR,EAAE,EAAE;UAChB,MAAM0B,SAAS,GAAG,MAAMlB,QAAQ,CAACE,IAAI,CAAC,CAAC;UACvChB,OAAO,CAACf,KAAK,CAAC,uBAAuB,EAAE+C,SAAS,CAAC;UACjD,MAAM,IAAIf,KAAK,CAAC,+BAA+BH,QAAQ,CAACT,MAAM,IAAIS,QAAQ,CAACmB,UAAU,EAAE,CAAC;QAC1F;QAEA,MAAMf,IAAI,GAAG,MAAMJ,QAAQ,CAACN,IAAI,CAAC,CAAC;QAClCR,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEiB,IAAI,CAAC;;QAErC;QACA,IAAIA,IAAI,CAACgB,OAAO,IAAIf,KAAK,CAACC,OAAO,CAACF,IAAI,CAACzC,UAAU,CAAC,EAAE;UAClDC,aAAa,CAACwC,IAAI,CAACzC,UAAU,CAAC;QAChC,CAAC,MAAM,IAAI0C,KAAK,CAACC,OAAO,CAACF,IAAI,CAAC,EAAE;UAC9BxC,aAAa,CAACwC,IAAI,CAAC,CAAC,CAAC;QACvB,CAAC,MAAM;UACLxC,aAAa,CAAC,EAAE,CAAC;UACjBsB,OAAO,CAACmC,IAAI,CAAC,6BAA6B,EAAEjB,IAAI,CAAC;UACjD,IAAIA,IAAI,CAACjC,KAAK,EAAE;YACdC,QAAQ,CAAC,8BAA8BgC,IAAI,CAACjC,KAAK,EAAE,CAAC;UACtD,CAAC,MAAM;YACLC,QAAQ,CAAC,8CAA8C,CAAC;UAC1D;QACF;MACF,CAAC,CAAC,OAAOD,KAAK,EAAE;QACde,OAAO,CAACf,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QACjDC,QAAQ,CAAC,8BAA8BD,KAAK,CAACoC,OAAO,EAAE,CAAC;MACzD,CAAC,SAAS;QACRrC,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAED0C,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,CAAC/C,eAAe,EAAEE,aAAa,EAAET,aAAa,CAAC,CAAC;;EAEnD;EACA,MAAMgE,QAAQ,GAAGA,CAAA,KAAM;IACrBxD,kBAAkB,CAAC,EAAE,CAAC;IACtBE,gBAAgB,CAAC,EAAE,CAAC;IACpBJ,aAAa,CAAC,EAAE,CAAC;EACnB,CAAC;;EAED;EACA,MAAM2D,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI,CAAC1D,eAAe,IAAI,CAACE,aAAa,EAAE;MACtCyD,KAAK,CAAC,4CAA4C,CAAC;MACnD;IACF;IAEA,IAAI;MACFtD,YAAY,CAAC,IAAI,CAAC;MAClB,MAAM8B,QAAQ,GAAG,MAAMV,KAAK,CAAC,sBAAsBqB,kBAAkB,CAAC9C,eAAe,CAAC,IAAI8C,kBAAkB,CAAC5C,aAAa,CAAC,EAAE,CAAC;MAC9H,IAAI,CAACiC,QAAQ,CAACR,EAAE,EAAE;QAChB,MAAM,IAAIW,KAAK,CAAC,+BAA+B,CAAC;MAClD;MAEA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACN,IAAI,CAAC,CAAC;MAElC,IAAIa,OAAO,GAAG,aAAa1C,eAAe,KAAKE,aAAa,IAAI;MAChEwC,OAAO,IAAI,qBAAqBH,IAAI,CAACqB,gBAAgB,MAAM;MAC3DlB,OAAO,IAAI,8CAA8C;MAEzD,KAAK,MAAM,CAACmB,IAAI,EAAEC,KAAK,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACzB,IAAI,CAAC0B,cAAc,CAAC,EAAE;QAC/DvB,OAAO,IAAI,KAAKmB,IAAI,KAAKC,KAAK,eAAe;MAC/C;MAEAH,KAAK,CAACjB,OAAO,CAAC;IAChB,CAAC,CAAC,OAAOpC,KAAK,EAAE;MACde,OAAO,CAACf,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChDqD,KAAK,CAAC,+BAA+B,CAAC;IACxC,CAAC,SAAS;MACRtD,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,oBACEf,OAAA;IAAK4E,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxB7E,OAAA;MAAK4E,SAAS,EAAC,SAAS;MAAAC,QAAA,gBACtB7E,OAAA;QAAK8E,GAAG,EAAE1G,IAAK;QAAC2G,GAAG,EAAC,iBAAiB;QAACH,SAAS,EAAC;MAAc;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACjEnF,OAAA;QAAA6E,QAAA,EAAI;MAAU;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACnBnF,OAAA;QAAA6E,QAAA,gBACE7E,OAAA;UAAA6E,QAAA,eAAI7E,OAAA,CAAC7B,IAAI;YAACiH,EAAE,EAAC,GAAG;YAAAP,QAAA,EAAC;UAAI;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACjCnF,OAAA;UAAA6E,QAAA,eAAI7E,OAAA,CAAC7B,IAAI;YAACiH,EAAE,EAAC,OAAO;YAAAP,QAAA,EAAC;UAAI;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,eAENnF,OAAA;MAAA6E,QAAA,gBACE7E,OAAA;QAAA6E,QAAA,gBACE7E,OAAA;UACE8E,GAAG,EAAEjD,cAAc,CAAC,CAAE;UACtBkD,GAAG,EAAE,GAAGpD,KAAK,EAAG;UAChBiD,SAAS,EAAC;QAAc;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACzB,CAAC,eACFnF,OAAA;UAAA6E,QAAA,EAAKlD;QAAK;UAAAqD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACV,CAAC,eAETnF,OAAA;QAAK4E,SAAS,EAAC,gBAAgB;QAAAC,QAAA,gBAC7B7E,OAAA;UAAK4E,SAAS,EAAC,cAAc;UAAAC,QAAA,gBAC3B7E,OAAA;YAAA6E,QAAA,EAAO;UAAO;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACtBnF,OAAA;YACEqF,KAAK,EAAE3E,eAAgB;YACvB4E,QAAQ,EAAGC,CAAC,IAAK5E,kBAAkB,CAAC4E,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;YAAAR,QAAA,gBAEpD7E,OAAA;cAAQqF,KAAK,EAAC,EAAE;cAAAR,QAAA,EAAC;YAAc;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,EACvC/E,SAAS,CAACiB,GAAG,CAAC,CAACiC,OAAO,EAAEmC,KAAK,kBAC5BzF,OAAA;cAAoBqF,KAAK,EAAE/B,OAAQ;cAAAuB,QAAA,EAAEvB;YAAO,GAA/BmC,KAAK;cAAAT,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAmC,CACtD,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eAENnF,OAAA;UAAK4E,SAAS,EAAC,cAAc;UAAAC,QAAA,gBAC3B7E,OAAA;YAAA6E,QAAA,EAAO;UAAK;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACpBnF,OAAA;YACEqF,KAAK,EAAEzE,aAAc;YACrB0E,QAAQ,EAAGC,CAAC,IAAK1E,gBAAgB,CAAC0E,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;YAClDK,QAAQ,EAAE,CAAChF,eAAgB;YAAAmE,QAAA,gBAE3B7E,OAAA;cAAQqF,KAAK,EAAC,EAAE;cAAAR,QAAA,EAAC;YAAY;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,EACrC7E,MAAM,CAACe,GAAG,CAAC,CAACsE,KAAK,EAAEF,KAAK,kBACvBzF,OAAA;cAAoBqF,KAAK,EAAEM,KAAM;cAAAd,QAAA,EAAEc;YAAK,GAA3BF,KAAK;cAAAT,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAA+B,CAClD,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eAENnF,OAAA;UAAQ4E,SAAS,EAAC,WAAW;UAACgB,OAAO,EAAEzB,QAAS;UAAAU,QAAA,EAAC;QAAS;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACnEnF,OAAA;UACE4E,SAAS,EAAC,WAAW;UACrBgB,OAAO,EAAExB,aAAc;UAAAS,QAAA,EACxB;QAED;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC,eAENnF,OAAA;QAAS4E,SAAS,EAAC,YAAY;QAAAC,QAAA,gBAC7B7E,OAAA;UAAA6E,QAAA,GAAI,UAAQ,eAAA7E,OAAA;YAAM6F,EAAE,EAAC,aAAa;YAAAhB,QAAA,EAAErE,UAAU,CAACsF;UAAM;YAAAd,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAAW;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC7EnF,OAAA;UAAK6F,EAAE,EAAC,eAAe;UAAAhB,QAAA,EACpB/D,SAAS,gBACRd,OAAA;YAAK4E,SAAS,EAAC,SAAS;YAAAC,QAAA,EAAC;UAAU;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,GACvCnE,KAAK,gBACPhB,OAAA;YAAK4E,SAAS,EAAC,eAAe;YAAAC,QAAA,EAAE7D;UAAK;YAAAgE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,GAC1C3E,UAAU,CAACsF,MAAM,KAAK,CAAC,IAAKpF,eAAe,IAAIE,aAAc,gBAC/DZ,OAAA;YAAK4E,SAAS,EAAC,eAAe;YAAAC,QAAA,EAAC;UAAwE;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,GAE7G3E,UAAU,CAACa,GAAG,CAAC,CAAC0E,QAAQ,EAAEN,KAAK,kBAC7BzF,OAAA;YAAK4E,SAAS,EAAC,WAAW;YAAAC,QAAA,gBACxB7E,OAAA;cAAK4E,SAAS,EAAC,gBAAgB;cAAAC,QAAA,gBAC7B7E,OAAA;gBAAA6E,QAAA,EAAKkB,QAAQ,CAACC,aAAa,IAAID,QAAQ,CAACE,IAAI,KAAK,OAAOF,QAAQ,KAAK,QAAQ,GAAGA,QAAQ,GAAG,kBAAkB;cAAC;gBAAAf,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,EACnHY,QAAQ,CAACG,WAAW,iBAAIlG,OAAA;gBAAG4E,SAAS,EAAC,sBAAsB;gBAAAC,QAAA,EAAEkB,QAAQ,CAACG;cAAW;gBAAAlB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACvFnF,OAAA;gBAAK4E,SAAS,EAAC,uBAAuB;gBAAAC,QAAA,GACnCkB,QAAQ,CAACI,OAAO,iBAAInG,OAAA;kBAAG4E,SAAS,EAAC,kBAAkB;kBAAAC,QAAA,EAAEkB,QAAQ,CAACI;gBAAO;kBAAAnB,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAI,CAAC,EAC1EY,QAAQ,CAACK,IAAI,IAAIL,QAAQ,CAACJ,KAAK,iBAC9B3F,OAAA;kBAAG4E,SAAS,EAAC,mBAAmB;kBAAAC,QAAA,GAC7BkB,QAAQ,CAACK,IAAI,EAAC,IAAE,EAACL,QAAQ,CAACJ,KAAK,EAAC,GAAC,EAACI,QAAQ,CAACM,QAAQ,IAAIN,QAAQ,CAACM,QAAQ;gBAAA;kBAAArB,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACxE,CACJ,EACAY,QAAQ,CAACO,KAAK,iBAAItG,OAAA;kBAAG4E,SAAS,EAAC,gBAAgB;kBAAAC,QAAA,GAAC,SAAO,EAACkB,QAAQ,CAACO,KAAK;gBAAA;kBAAAtB,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAI,CAAC,EAC3EY,QAAQ,CAACQ,KAAK,iBAAIvG,OAAA;kBAAG4E,SAAS,EAAC,gBAAgB;kBAAAC,QAAA,GAAC,SAAO,EAACkB,QAAQ,CAACQ,KAAK;gBAAA;kBAAAvB,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAI,CAAC,EAC3EY,QAAQ,CAACS,OAAO,iBAAIxG,OAAA;kBAAG4E,SAAS,EAAC,kBAAkB;kBAAAC,QAAA,GAAC,WAAS,eAAA7E,OAAA;oBAAGyG,IAAI,EAAEV,QAAQ,CAACS,OAAO,CAACE,UAAU,CAAC,MAAM,CAAC,GAAGX,QAAQ,CAACS,OAAO,GAAG,WAAWT,QAAQ,CAACS,OAAO,EAAG;oBAAChB,MAAM,EAAC,QAAQ;oBAACmB,GAAG,EAAC,qBAAqB;oBAAA9B,QAAA,EAAEkB,QAAQ,CAACS;kBAAO;oBAAAxB,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAI,CAAC;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAG,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAChO,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH,CAAC,eACNnF,OAAA;cAAK4E,SAAS,EAAC,mBAAmB;cAAAC,QAAA,gBAChC7E,OAAA;gBACE4E,SAAS,EAAC,UAAU;gBACpBgB,OAAO,EAAEA,CAAA,KAAM;kBACb,MAAMgB,UAAU,GAAGb,QAAQ,CAACc,WAAW,IAAIpB,KAAK;kBAChDqB,MAAM,CAACC,IAAI,CAAC,aAAaH,UAAU,EAAE,EAAE,QAAQ,CAAC;gBAClD,CAAE;gBAAA/B,QAAA,EACH;cAED;gBAAAG,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eACTnF,OAAA;gBAAQ4E,SAAS,EAAC,YAAY;gBAAAC,QAAA,EAAC;cAAM;gBAAAG,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC3C,CAAC;UAAA,GA3BwBY,QAAQ,CAACc,WAAW,IAAIpB,KAAK;YAAAT,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OA4BxD,CACN;QACF;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV;AAACjF,EAAA,CApXQD,eAAe;EAAA,QACI/B,SAAS;AAAA;AAAA8I,EAAA,GAD5B/G,eAAe;AAsXxB,eAAeA,eAAe;AAAC,IAAA+G,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}