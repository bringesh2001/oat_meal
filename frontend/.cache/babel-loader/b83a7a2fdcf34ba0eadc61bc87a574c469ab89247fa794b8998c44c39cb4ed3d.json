{"ast":null,"code":"import axios from 'axios';\n\n// Create an axios instance with the base URL\nconst api = axios.create({\n  baseURL: 'http://localhost:8000',\n  // Updated to correct backend URL\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor - adds auth token if available\napi.interceptors.request.use(config => {\n  // Get token from localStorage\n  const token = localStorage.getItem('token');\n\n  // Check if token exists\n  if (token) {\n    console.log(`API Request: Using token for ${config.url}`);\n\n    // Check if the token starts with \"eyJ\" which indicates it's likely a JWT\n    if (token.startsWith('eyJ')) {\n      // The token itself is already the JWT value, no need to prefix it\n      config.headers.Authorization = `Bearer ${token}`;\n      console.log('Using Bearer JWT format');\n    } else {\n      // Use Token format for other token types\n      config.headers.Authorization = `Token ${token}`;\n    }\n\n    // Debugging log\n    console.log('Authorization header:', config.headers.Authorization.substring(0, 15) + '...');\n  } else {\n    console.log('API Request: No token found');\n  }\n  return config;\n}, error => {\n  console.error('Request interceptor error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor - handles auth errors\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  // Handle 401 Unauthorized errors\n  if (error.response && error.response.status === 401) {\n    console.error('401 Unauthorized error from API:', {\n      url: error.config.url,\n      method: error.config.method,\n      headers: error.config.headers.Authorization ? error.config.headers.Authorization.substring(0, 15) + '...' : 'none'\n    });\n  }\n  return Promise.reject(error);\n});\n\n// Auth functions\nexport const loginUser = async credentials => {\n  try {\n    console.log('API: Sending login request with:', credentials.email);\n    const response = await api.post('/api/auth/login/', credentials);\n    console.log('API: Login response status:', response.status);\n\n    // Store the token properly based on the response format\n    if (response.data) {\n      console.log('Login response data:', JSON.stringify(response.data).substring(0, 100) + '...');\n\n      // Check different possible token formats in the response\n      if (response.data.token) {\n        localStorage.setItem('token', response.data.token);\n        console.log('Stored token from response.data.token');\n      } else if (response.data.access) {\n        // Some APIs return { access: \"token\" } for JWT\n        localStorage.setItem('token', response.data.access);\n        console.log('Stored token from response.data.access');\n      } else if (response.data.key) {\n        // Django Rest Auth often returns { key: \"token\" }\n        localStorage.setItem('token', response.data.key);\n        console.log('Stored token from response.data.key');\n      } else if (typeof response.data === 'string') {\n        // Some APIs just return the token as a string\n        localStorage.setItem('token', response.data);\n        console.log('Stored token from string response');\n      }\n      sessionStorage.setItem('lastLoginEmail', credentials.email);\n      return response.data;\n    } else {\n      throw new Error('Login failed: No data received');\n    }\n  } catch (error) {\n    var _error$response, _error$response$data;\n    console.error('API: Login error:', error.message);\n    if (error.response) {\n      console.error('API: Server response:', error.response.data);\n    }\n    throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Login failed. Please try again.');\n  }\n};\nexport const signupUser = async userData => {\n  try {\n    const response = await api.post('/api/auth/signup/', userData);\n    return response.data;\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    console.error('API: Signup error:', error.message);\n    throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Signup failed. Please try again.');\n  }\n};\n\n// User profile\nexport const getUserProfile = async () => {\n  try {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('Authentication required');\n    }\n    const response = await api.get('/apiV1/profile/', {\n      headers: {\n        Authorization: `Token ${token}`\n      }\n    });\n    console.log('Profile response:', response.status, response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching user profile:', error.response ? error.response.status : error.message);\n\n    // Create a fallback user object if profile fetch fails\n    const email = sessionStorage.getItem('lastLoginEmail');\n    if (email) {\n      return {\n        email: email,\n        name: 'User',\n        // Fallback name\n        profile_picture: null\n      };\n    }\n    throw error;\n  }\n};\n\n// Directories\nexport const getDirectories = async () => {\n  try {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('Authentication required');\n    }\n\n    // Try with trailing slash first (Django often requires this)\n    const response = await api.get('/apiV1/directories/', {\n      headers: {\n        Authorization: `Token ${token}` // Using Token format for Django REST Framework\n      }\n    });\n    console.log('Directories response:', response.status, response.data);\n    return response.data;\n  } catch (error) {\n    // If we get a 404 with trailing slash, try without\n    if (error.response && error.response.status === 404) {\n      try {\n        const response = await api.get('/apiV1/directories', {\n          headers: {\n            Authorization: `Token ${token}`\n          }\n        });\n        console.log('Directories response (without trailing slash):', response.status, response.data);\n        return response.data;\n      } catch (retryError) {\n        console.error('Error fetching directories (retry):', retryError.response ? retryError.response.status : retryError.message);\n        throw retryError;\n      }\n    }\n    console.error('Error fetching directories:', error.response ? error.response.status : error.message);\n\n    // Return some mock directory data if the API fails\n    return [{\n      id: 1,\n      name: 'Documents',\n      path: '/documents',\n      color: '#4285F4'\n    }, {\n      id: 2,\n      name: 'Images',\n      path: '/images',\n      color: '#34A853'\n    }, {\n      id: 3,\n      name: 'Projects',\n      path: '/projects',\n      color: '#FBBC05'\n    }, {\n      id: 4,\n      name: 'Reports',\n      path: '/reports',\n      color: '#EA4335'\n    }];\n  }\n};\n\n// Chat API Functions\nexport const getChatHistory = async () => {\n  try {\n    // Since there's no specific chat history endpoint, we'll return an empty array\n    // The Chat component will handle creating the initial welcome message\n    return [];\n  } catch (error) {\n    console.error('Error fetching chat history:', error);\n    return [];\n  }\n};\nexport const sendChatMessage = async message => {\n  try {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('Authentication required');\n    }\n\n    // Special handling for test connection messages\n    if (message === 'test_connection') {\n      console.log('Testing connection to Azure RAG pipeline...');\n      // Try different endpoints to determine if we can connect to the backend\n      try {\n        // First try the profile endpoint as it's more likely to exist\n        const headers = {};\n\n        // Use proper auth format based on token format\n        if (token.startsWith('eyJ')) {\n          headers.Authorization = `Bearer ${token}`;\n        } else {\n          headers.Authorization = `Token ${token}`;\n        }\n        await api.get('/apiV1/profile/', {\n          headers\n        });\n        console.log('Connected to backend via profile endpoint');\n        return {\n          success: true\n        };\n      } catch (profileError) {\n        var _profileError$respons, _profileError$respons2, _profileError$respons3, _profileError$respons4, _profileError$respons5;\n        console.log('Profile endpoint test failed:', (_profileError$respons = profileError.response) === null || _profileError$respons === void 0 ? void 0 : _profileError$respons.status);\n        console.log('Response data:', (_profileError$respons2 = profileError.response) === null || _profileError$respons2 === void 0 ? void 0 : _profileError$respons2.data);\n\n        // If token is invalid, log out the user and throw error\n        if (((_profileError$respons3 = profileError.response) === null || _profileError$respons3 === void 0 ? void 0 : _profileError$respons3.status) === 401 && ((_profileError$respons4 = profileError.response) === null || _profileError$respons4 === void 0 ? void 0 : (_profileError$respons5 = _profileError$respons4.data) === null || _profileError$respons5 === void 0 ? void 0 : _profileError$respons5.detail) === 'Invalid token.') {\n          console.error('Invalid token detected. User needs to log in again.');\n          // Clear the invalid token\n          localStorage.removeItem('token');\n          throw new Error('Session expired. Please log in again.');\n        }\n\n        // Fall back to directories endpoint\n        try {\n          const headers = {};\n\n          // Use proper auth format based on token format\n          if (token.startsWith('eyJ')) {\n            headers.Authorization = `Bearer ${token}`;\n          } else {\n            headers.Authorization = `Token ${token}`;\n          }\n          await api.get('/apiV1/directories/', {\n            headers\n          });\n          console.log('Connected to backend via directories endpoint');\n          return {\n            success: true\n          };\n        } catch (dirError) {\n          var _dirError$response;\n          console.log('Directories endpoint test failed:', (_dirError$response = dirError.response) === null || _dirError$response === void 0 ? void 0 : _dirError$response.status);\n\n          // Last attempt with a simple chat message\n          try {\n            // Try a simple message to test if chat works\n            const headers = {};\n\n            // Use proper auth format based on token format\n            if (token.startsWith('eyJ')) {\n              headers.Authorization = `Bearer ${token}`;\n            } else {\n              headers.Authorization = `Token ${token}`;\n            }\n            const testResponse = await api.post('/apiV1/chat/', {\n              message: \"test\"\n            }, {\n              headers\n            });\n            console.log('Chat endpoint test successful');\n            return {\n              success: true\n            };\n          } catch (chatError) {\n            var _chatError$response;\n            console.error('All connection tests failed:', ((_chatError$response = chatError.response) === null || _chatError$response === void 0 ? void 0 : _chatError$response.status) || chatError.message);\n            throw chatError;\n          }\n        }\n      }\n    }\n\n    // Send message to the Azure-powered chat API endpoint\n    console.log('Sending chat message to Azure:', message);\n    const headers = {};\n\n    // Use proper auth format based on token format\n    if (token.startsWith('eyJ')) {\n      headers.Authorization = `Bearer ${token}`;\n    } else {\n      headers.Authorization = `Token ${token}`;\n    }\n    const response = await api.post('/apiV1/chat/', {\n      message: message\n    }, {\n      headers\n    });\n    console.log('Chat API response:', response.status, response.data);\n\n    // Format the response for the UI\n    const aiResponse = {\n      id: Date.now(),\n      content: response.data.response || response.data.message || \"I received your message but couldn't generate a response.\",\n      sender: 'Azure AI',\n      timestamp: new Date().toISOString(),\n      isCurrentUser: false,\n      sources: response.data.sources || []\n    };\n    return {\n      success: true,\n      aiResponse: aiResponse\n    };\n  } catch (error) {\n    var _error$response3, _error$response4;\n    console.error('Error sending chat message:', (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status, error.message);\n    console.error('Error details:', ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || 'No response data');\n\n    // If unauthorized, throw error to redirect to login\n    if (error.response && error.response.status === 401) {\n      var _error$response$data2;\n      // If token is explicitly invalid, clear it\n      if (((_error$response$data2 = error.response.data) === null || _error$response$data2 === void 0 ? void 0 : _error$response$data2.detail) === 'Invalid token.') {\n        localStorage.removeItem('token');\n      }\n      throw new Error('Authentication required');\n    }\n\n    // For test connection, just rethrow\n    if (message === 'test_connection') {\n      throw error;\n    }\n\n    // Create a fallback response\n    const errorResponse = {\n      id: Date.now(),\n      content: \"I'm having trouble connecting to the Azure OpenAI service. Please check your internet connection and try again later.\",\n      sender: 'Azure AI',\n      timestamp: new Date().toISOString(),\n      isCurrentUser: false\n    };\n    return {\n      success: false,\n      aiResponse: errorResponse\n    };\n  }\n};\n\n// Function to diagnose API endpoints\nexport const checkApiEndpoints = async () => {\n  const token = localStorage.getItem('token');\n  if (!token) {\n    console.error('No authentication token available');\n    return {\n      authenticated: false,\n      endpoints: []\n    };\n  }\n\n  // Prepare headers\n  const headers = {\n    Authorization: `Token ${token}`\n  };\n\n  // List of endpoints to test\n  const endpoints = [\n  // Common API endpoints\n  {\n    method: 'GET',\n    url: '/api/auth/profile/'\n  }, {\n    method: 'GET',\n    url: '/api/directories/'\n  }, {\n    method: 'GET',\n    url: '/api/chat/'\n  }, {\n    method: 'POST',\n    url: '/api/chat/',\n    data: {\n      message: 'test'\n    }\n  },\n  // V1 API endpoints \n  {\n    method: 'GET',\n    url: '/apiV1/profile/'\n  }, {\n    method: 'GET',\n    url: '/apiV1/directories/'\n  }, {\n    method: 'GET',\n    url: '/apiV1/ping/'\n  }, {\n    method: 'POST',\n    url: '/apiV1/chat/',\n    data: {\n      message: 'test'\n    }\n  },\n  // Azure-specific endpoints (if any)\n  {\n    method: 'GET',\n    url: '/apiV1/azure/status/'\n  }];\n  const results = [];\n\n  // Test each endpoint\n  for (const endpoint of endpoints) {\n    try {\n      console.log(`Testing ${endpoint.method} ${endpoint.url}...`);\n      const config = {\n        method: endpoint.method,\n        url: endpoint.url,\n        headers: headers,\n        data: endpoint.data || null\n      };\n      const response = await axios(config);\n      results.push({\n        endpoint: endpoint.url,\n        method: endpoint.method,\n        status: response.status,\n        available: true,\n        data: typeof response.data === 'object' ? 'Object received' : 'Data received'\n      });\n      console.log(`✅ ${endpoint.method} ${endpoint.url} - Status: ${response.status}`);\n    } catch (error) {\n      var _error$response5, _error$response6, _error$response7;\n      results.push({\n        endpoint: endpoint.url,\n        method: endpoint.method,\n        status: ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.status) || 'Network Error',\n        available: false,\n        error: ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data) || error.message\n      });\n      console.log(`❌ ${endpoint.method} ${endpoint.url} - Error: ${((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.status) || error.message}`);\n    }\n  }\n\n  // Log the summary\n  const availableEndpoints = results.filter(e => e.available);\n  console.log(`API Endpoint Check Summary: ${availableEndpoints.length}/${endpoints.length} endpoints available`);\n  console.table(results);\n  return {\n    authenticated: true,\n    endpoints: results,\n    availableCount: availableEndpoints.length,\n    totalCount: endpoints.length\n  };\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","console","log","url","startsWith","Authorization","substring","error","Promise","reject","response","status","method","loginUser","credentials","email","post","data","JSON","stringify","setItem","access","key","sessionStorage","Error","_error$response","_error$response$data","message","signupUser","userData","_error$response2","_error$response2$data","getUserProfile","get","name","profile_picture","getDirectories","retryError","id","path","color","getChatHistory","sendChatMessage","success","profileError","_profileError$respons","_profileError$respons2","_profileError$respons3","_profileError$respons4","_profileError$respons5","detail","removeItem","dirError","_dirError$response","testResponse","chatError","_chatError$response","aiResponse","Date","now","content","sender","timestamp","toISOString","isCurrentUser","sources","_error$response3","_error$response4","_error$response$data2","errorResponse","checkApiEndpoints","authenticated","endpoints","results","endpoint","push","available","_error$response5","_error$response6","_error$response7","availableEndpoints","filter","e","length","table","availableCount","totalCount"],"sources":["C:/Users/STSC/Downloads/Agent-Backend-main (3)/my-app/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create an axios instance with the base URL\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:8000', // Updated to correct backend URL\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  }\r\n});\r\n\r\n// Request interceptor - adds auth token if available\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    // Get token from localStorage\r\n    const token = localStorage.getItem('token');\r\n    \r\n    // Check if token exists\r\n    if (token) {\r\n      console.log(`API Request: Using token for ${config.url}`);\r\n      \r\n      // Check if the token starts with \"eyJ\" which indicates it's likely a JWT\r\n      if (token.startsWith('eyJ')) {\r\n        // The token itself is already the JWT value, no need to prefix it\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n        console.log('Using Bearer JWT format');\r\n      } else {\r\n        // Use Token format for other token types\r\n        config.headers.Authorization = `Token ${token}`;\r\n      }\r\n      \r\n      // Debugging log\r\n      console.log('Authorization header:', config.headers.Authorization.substring(0, 15) + '...');\r\n    } else {\r\n      console.log('API Request: No token found');\r\n    }\r\n    \r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('Request interceptor error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor - handles auth errors\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    // Handle 401 Unauthorized errors\r\n    if (error.response && error.response.status === 401) {\r\n      console.error('401 Unauthorized error from API:', {\r\n        url: error.config.url,\r\n        method: error.config.method,\r\n        headers: error.config.headers.Authorization ? \r\n          error.config.headers.Authorization.substring(0, 15) + '...' : 'none'\r\n      });\r\n    }\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Auth functions\r\nexport const loginUser = async (credentials) => {\r\n  try {\r\n    console.log('API: Sending login request with:', credentials.email);\r\n    const response = await api.post('/api/auth/login/', credentials);\r\n    console.log('API: Login response status:', response.status);\r\n    \r\n    // Store the token properly based on the response format\r\n    if (response.data) {\r\n      console.log('Login response data:', JSON.stringify(response.data).substring(0, 100) + '...');\r\n      \r\n      // Check different possible token formats in the response\r\n      if (response.data.token) {\r\n        localStorage.setItem('token', response.data.token);\r\n        console.log('Stored token from response.data.token');\r\n      } else if (response.data.access) {\r\n        // Some APIs return { access: \"token\" } for JWT\r\n        localStorage.setItem('token', response.data.access);\r\n        console.log('Stored token from response.data.access');\r\n      } else if (response.data.key) {\r\n        // Django Rest Auth often returns { key: \"token\" }\r\n        localStorage.setItem('token', response.data.key);\r\n        console.log('Stored token from response.data.key');\r\n      } else if (typeof response.data === 'string') {\r\n        // Some APIs just return the token as a string\r\n        localStorage.setItem('token', response.data);\r\n        console.log('Stored token from string response');\r\n      }\r\n      \r\n      sessionStorage.setItem('lastLoginEmail', credentials.email);\r\n      return response.data;\r\n    } else {\r\n      throw new Error('Login failed: No data received');\r\n    }\r\n  } catch (error) {\r\n    console.error('API: Login error:', error.message);\r\n    if (error.response) {\r\n      console.error('API: Server response:', error.response.data);\r\n    }\r\n    throw new Error(error.response?.data?.message || 'Login failed. Please try again.');\r\n  }\r\n};\r\n\r\nexport const signupUser = async (userData) => {\r\n  try {\r\n    const response = await api.post('/api/auth/signup/', userData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('API: Signup error:', error.message);\r\n    throw new Error(error.response?.data?.message || 'Signup failed. Please try again.');\r\n  }\r\n};\r\n\r\n// User profile\r\nexport const getUserProfile = async () => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n      throw new Error('Authentication required');\r\n    }\r\n\r\n    const response = await api.get('/apiV1/profile/', {\r\n      headers: {\r\n        Authorization: `Token ${token}`,\r\n      },\r\n    });\r\n\r\n    console.log('Profile response:', response.status, response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching user profile:', error.response ? error.response.status : error.message);\r\n    \r\n    // Create a fallback user object if profile fetch fails\r\n    const email = sessionStorage.getItem('lastLoginEmail');\r\n    if (email) {\r\n      return {\r\n        email: email,\r\n        name: 'User', // Fallback name\r\n        profile_picture: null,\r\n      };\r\n    }\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Directories\r\nexport const getDirectories = async () => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n      throw new Error('Authentication required');\r\n    }\r\n\r\n    // Try with trailing slash first (Django often requires this)\r\n    const response = await api.get('/apiV1/directories/', {\r\n      headers: {\r\n        Authorization: `Token ${token}`, // Using Token format for Django REST Framework\r\n      },\r\n    });\r\n\r\n    console.log('Directories response:', response.status, response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    // If we get a 404 with trailing slash, try without\r\n    if (error.response && error.response.status === 404) {\r\n      try {\r\n        const response = await api.get('/apiV1/directories', {\r\n          headers: {\r\n            Authorization: `Token ${token}`,\r\n          },\r\n        });\r\n        console.log('Directories response (without trailing slash):', response.status, response.data);\r\n        return response.data;\r\n      } catch (retryError) {\r\n        console.error('Error fetching directories (retry):', retryError.response ? retryError.response.status : retryError.message);\r\n        throw retryError;\r\n      }\r\n    }\r\n\r\n    console.error('Error fetching directories:', error.response ? error.response.status : error.message);\r\n    \r\n    // Return some mock directory data if the API fails\r\n    return [\r\n      { id: 1, name: 'Documents', path: '/documents', color: '#4285F4' },\r\n      { id: 2, name: 'Images', path: '/images', color: '#34A853' },\r\n      { id: 3, name: 'Projects', path: '/projects', color: '#FBBC05' },\r\n      { id: 4, name: 'Reports', path: '/reports', color: '#EA4335' },\r\n    ];\r\n  }\r\n};\r\n\r\n// Chat API Functions\r\nexport const getChatHistory = async () => {\r\n  try {\r\n    // Since there's no specific chat history endpoint, we'll return an empty array\r\n    // The Chat component will handle creating the initial welcome message\r\n    return [];\r\n  } catch (error) {\r\n    console.error('Error fetching chat history:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const sendChatMessage = async (message) => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n      throw new Error('Authentication required');\r\n    }\r\n\r\n    // Special handling for test connection messages\r\n    if (message === 'test_connection') {\r\n      console.log('Testing connection to Azure RAG pipeline...');\r\n      // Try different endpoints to determine if we can connect to the backend\r\n      try {\r\n        // First try the profile endpoint as it's more likely to exist\r\n        const headers = {};\r\n        \r\n        // Use proper auth format based on token format\r\n        if (token.startsWith('eyJ')) {\r\n          headers.Authorization = `Bearer ${token}`;\r\n        } else {\r\n          headers.Authorization = `Token ${token}`;\r\n        }\r\n        \r\n        await api.get('/apiV1/profile/', { headers });\r\n        console.log('Connected to backend via profile endpoint');\r\n        return { success: true };\r\n      } catch (profileError) {\r\n        console.log('Profile endpoint test failed:', profileError.response?.status);\r\n        console.log('Response data:', profileError.response?.data);\r\n        \r\n        // If token is invalid, log out the user and throw error\r\n        if (profileError.response?.status === 401 && \r\n            profileError.response?.data?.detail === 'Invalid token.') {\r\n          console.error('Invalid token detected. User needs to log in again.');\r\n          // Clear the invalid token\r\n          localStorage.removeItem('token');\r\n          throw new Error('Session expired. Please log in again.');\r\n        }\r\n        \r\n        // Fall back to directories endpoint\r\n        try {\r\n          const headers = {};\r\n        \r\n          // Use proper auth format based on token format\r\n          if (token.startsWith('eyJ')) {\r\n            headers.Authorization = `Bearer ${token}`;\r\n          } else {\r\n            headers.Authorization = `Token ${token}`;\r\n          }\r\n          \r\n          await api.get('/apiV1/directories/', { headers });\r\n          console.log('Connected to backend via directories endpoint');\r\n          return { success: true };\r\n        } catch (dirError) {\r\n          console.log('Directories endpoint test failed:', dirError.response?.status);\r\n          \r\n          // Last attempt with a simple chat message\r\n          try {\r\n            // Try a simple message to test if chat works\r\n            const headers = {};\r\n        \r\n            // Use proper auth format based on token format\r\n            if (token.startsWith('eyJ')) {\r\n              headers.Authorization = `Bearer ${token}`;\r\n            } else {\r\n              headers.Authorization = `Token ${token}`;\r\n            }\r\n            \r\n            const testResponse = await api.post('/apiV1/chat/', \r\n              { message: \"test\" },\r\n              { headers }\r\n            );\r\n            console.log('Chat endpoint test successful');\r\n            return { success: true };\r\n          } catch (chatError) {\r\n            console.error('All connection tests failed:', \r\n              chatError.response?.status || chatError.message);\r\n            throw chatError;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Send message to the Azure-powered chat API endpoint\r\n    console.log('Sending chat message to Azure:', message);\r\n    \r\n    const headers = {};\r\n    \r\n    // Use proper auth format based on token format\r\n    if (token.startsWith('eyJ')) {\r\n      headers.Authorization = `Bearer ${token}`;\r\n    } else {\r\n      headers.Authorization = `Token ${token}`;\r\n    }\r\n    \r\n    const response = await api.post('/apiV1/chat/', {\r\n      message: message\r\n    }, { headers });\r\n\r\n    console.log('Chat API response:', response.status, response.data);\r\n    \r\n    // Format the response for the UI\r\n    const aiResponse = {\r\n      id: Date.now(),\r\n      content: response.data.response || response.data.message || \"I received your message but couldn't generate a response.\",\r\n      sender: 'Azure AI',\r\n      timestamp: new Date().toISOString(),\r\n      isCurrentUser: false,\r\n      sources: response.data.sources || []\r\n    };\r\n    \r\n    return { \r\n      success: true,\r\n      aiResponse: aiResponse\r\n    };\r\n    \r\n  } catch (error) {\r\n    console.error('Error sending chat message:', error.response?.status, error.message);\r\n    console.error('Error details:', error.response?.data || 'No response data');\r\n    \r\n    // If unauthorized, throw error to redirect to login\r\n    if (error.response && error.response.status === 401) {\r\n      // If token is explicitly invalid, clear it\r\n      if (error.response.data?.detail === 'Invalid token.') {\r\n        localStorage.removeItem('token');\r\n      }\r\n      throw new Error('Authentication required');\r\n    }\r\n    \r\n    // For test connection, just rethrow\r\n    if (message === 'test_connection') {\r\n      throw error;\r\n    }\r\n    \r\n    // Create a fallback response\r\n    const errorResponse = {\r\n      id: Date.now(),\r\n      content: \"I'm having trouble connecting to the Azure OpenAI service. Please check your internet connection and try again later.\",\r\n      sender: 'Azure AI',\r\n      timestamp: new Date().toISOString(),\r\n      isCurrentUser: false\r\n    };\r\n    \r\n    return {\r\n      success: false,\r\n      aiResponse: errorResponse\r\n    };\r\n  }\r\n};\r\n\r\n// Function to diagnose API endpoints\r\nexport const checkApiEndpoints = async () => {\r\n  const token = localStorage.getItem('token');\r\n  if (!token) {\r\n    console.error('No authentication token available');\r\n    return { authenticated: false, endpoints: [] };\r\n  }\r\n  \r\n  // Prepare headers\r\n  const headers = {\r\n    Authorization: `Token ${token}`,\r\n  };\r\n  \r\n  // List of endpoints to test\r\n  const endpoints = [\r\n    // Common API endpoints\r\n    { method: 'GET', url: '/api/auth/profile/' },\r\n    { method: 'GET', url: '/api/directories/' },\r\n    { method: 'GET', url: '/api/chat/' },\r\n    { method: 'POST', url: '/api/chat/', data: { message: 'test' } },\r\n    \r\n    // V1 API endpoints \r\n    { method: 'GET', url: '/apiV1/profile/' },\r\n    { method: 'GET', url: '/apiV1/directories/' },\r\n    { method: 'GET', url: '/apiV1/ping/' },\r\n    { method: 'POST', url: '/apiV1/chat/', data: { message: 'test' } },\r\n    \r\n    // Azure-specific endpoints (if any)\r\n    { method: 'GET', url: '/apiV1/azure/status/' },\r\n  ];\r\n  \r\n  const results = [];\r\n  \r\n  // Test each endpoint\r\n  for (const endpoint of endpoints) {\r\n    try {\r\n      console.log(`Testing ${endpoint.method} ${endpoint.url}...`);\r\n      \r\n      const config = {\r\n        method: endpoint.method,\r\n        url: endpoint.url,\r\n        headers: headers,\r\n        data: endpoint.data || null\r\n      };\r\n      \r\n      const response = await axios(config);\r\n      \r\n      results.push({\r\n        endpoint: endpoint.url,\r\n        method: endpoint.method,\r\n        status: response.status,\r\n        available: true,\r\n        data: typeof response.data === 'object' ? 'Object received' : 'Data received'\r\n      });\r\n      \r\n      console.log(`✅ ${endpoint.method} ${endpoint.url} - Status: ${response.status}`);\r\n    } catch (error) {\r\n      results.push({\r\n        endpoint: endpoint.url,\r\n        method: endpoint.method,\r\n        status: error.response?.status || 'Network Error',\r\n        available: false,\r\n        error: error.response?.data || error.message\r\n      });\r\n      \r\n      console.log(`❌ ${endpoint.method} ${endpoint.url} - Error: ${error.response?.status || error.message}`);\r\n    }\r\n  }\r\n  \r\n  // Log the summary\r\n  const availableEndpoints = results.filter(e => e.available);\r\n  console.log(`API Endpoint Check Summary: ${availableEndpoints.length}/${endpoints.length} endpoints available`);\r\n  console.table(results);\r\n  \r\n  return {\r\n    authenticated: true,\r\n    endpoints: results,\r\n    availableCount: availableEndpoints.length,\r\n    totalCount: endpoints.length\r\n  };\r\n};\r\n\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}