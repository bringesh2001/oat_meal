{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\STSC\\\\Downloads\\\\Agent-Backend-main (3)\\\\my-app\\\\src\\\\pages\\\\Chat.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Navigate, useNavigate } from 'react-router-dom';\nimport { getChatHistory, sendChatMessage, getUserProfile, checkApiEndpoints } from '../services/api';\nimport '../styles/Chat.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chat() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState('checking'); // 'checking', 'online', 'offline'\n  const [retryCount, setRetryCount] = useState(0);\n  const [userProfile, setUserProfile] = useState(null);\n  const [diagnosticMode, setDiagnosticMode] = useState(false);\n  const [diagnosticResults, setDiagnosticResults] = useState(null);\n  const [authError, setAuthError] = useState(null);\n  const messagesEndRef = useRef(null);\n  const navigate = useNavigate();\n\n  // Handle user logout on authentication errors\n  const handleLogout = () => {\n    console.log('Logging out due to authentication error...');\n    // Clear all auth and user data\n    localStorage.removeItem('token');\n\n    // Clear all session storage\n    sessionStorage.removeItem('lastLoginEmail');\n    sessionStorage.removeItem('userName');\n    sessionStorage.removeItem('userId');\n\n    // Clear any user data in state\n    setUserProfile(null);\n    setIsAuthenticated(false);\n    setAuthError(null);\n    console.log('All user data cleared, redirecting to login');\n\n    // Redirect to login page after a brief delay\n    setTimeout(() => {\n      navigate('/login');\n    }, 100);\n  };\n\n  // Check authentication first\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      setIsAuthenticated(true);\n\n      // Check if token appears to be JWT format (starts with eyJ)\n      const isJWT = token.startsWith('eyJ');\n      console.log('Token appears to be JWT format:', isJWT);\n\n      // Try to get user profile\n      getUserProfile().then(profile => {\n        console.log('Loaded user profile:', profile);\n        setUserProfile(profile);\n\n        // Store user name in session storage with improved fallbacks\n        if (profile.name) {\n          sessionStorage.setItem('userName', profile.name);\n        } else if (profile.username) {\n          sessionStorage.setItem('userName', profile.username);\n        } else if (profile.email) {\n          // Extract username from email for better display\n          const username = profile.email.split('@')[0];\n          // Capitalize first letter for better presentation\n          const displayName = username.charAt(0).toUpperCase() + username.slice(1);\n          sessionStorage.setItem('userName', displayName);\n        }\n\n        // Update email info if available\n        if (profile.email) {\n          sessionStorage.setItem('lastLoginEmail', profile.email);\n        }\n        setAuthError(null); // Clear any auth errors\n      }).catch(err => {\n        console.error('Failed to load profile:', err);\n\n        // If we get a specific authentication error\n        if (err.message === 'Authentication required' || err.message === 'Session expired. Please log in again.' || err.message === 'Authentication failed. Please log in again.') {\n          setAuthError(err.message);\n          // Delay logout to allow error to be displayed\n          setTimeout(() => handleLogout(), 3000);\n        } else {\n          // Use fallback data from session storage\n          const email = sessionStorage.getItem('lastLoginEmail');\n          const name = sessionStorage.getItem('userName');\n          if (email || name) {\n            setUserProfile({\n              email: email || '',\n              name: name || 'User',\n              profile_picture: null\n            });\n          }\n        }\n      });\n    } else {\n      setIsAuthenticated(false);\n    }\n    setLoading(false);\n  }, []);\n\n  // Test connectivity to backend\n  const testBackendConnection = async () => {\n    try {\n      setConnectionStatus('checking');\n      console.log('Testing backend connection...');\n      const result = await sendChatMessage('__test_connection__');\n      if (result.success) {\n        console.log('Backend connection successful:', result.message || 'Connected');\n        setConnectionStatus('online');\n      } else if (result.authError) {\n        console.error('Authentication error during connection test:', result.message);\n        setAuthError(`Authentication error: ${result.message}`);\n\n        // Clear any existing timeout\n        if (window.logoutTimeout) clearTimeout(window.logoutTimeout);\n\n        // Set a new timeout for logout\n        window.logoutTimeout = setTimeout(() => handleLogout(), 3000);\n      } else {\n        setConnectionStatus('offline');\n        console.error('Backend connection test failed:', result.error);\n      }\n    } catch (error) {\n      setConnectionStatus('offline');\n      console.error('Error testing backend connection:', error);\n\n      // Handle authentication errors\n      if (error.response && (error.response.status === 401 || error.response.status === 403)) {\n        var _error$response$data, _error$response$data2;\n        const errorMsg = ((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || ((_error$response$data2 = error.response.data) === null || _error$response$data2 === void 0 ? void 0 : _error$response$data2.message) || 'Invalid token';\n        setAuthError('Authentication error: ' + errorMsg);\n\n        // Clear any existing timeout\n        if (window.logoutTimeout) clearTimeout(window.logoutTimeout);\n\n        // Set a new timeout for logout\n        window.logoutTimeout = setTimeout(() => handleLogout(), 3000);\n      }\n    }\n  };\n\n  // Function to run API diagnostics\n  const runDiagnostics = async () => {\n    setDiagnosticMode(true);\n    try {\n      const results = await checkApiEndpoints();\n      setDiagnosticResults(results);\n\n      // Add a diagnostic message to the chat\n      const diagMessage = {\n        id: Date.now(),\n        content: `API Diagnostics: ${results.availableCount}/${results.totalCount} endpoints available. Check browser console for details.`,\n        sender: 'System',\n        timestamp: new Date().toISOString(),\n        isCurrentUser: false,\n        isDiagnostic: true\n      };\n      setMessages(prev => [...prev, diagMessage]);\n\n      // If we found working endpoints, try connecting again\n      if (results.availableCount > 0) {\n        const workingChatEndpoint = results.endpoints.find(e => e.available && e.method === 'POST' && e.url.includes('/chat/'));\n        if (workingChatEndpoint) {\n          await testBackendConnection();\n        }\n      }\n    } catch (error) {\n      console.error('Diagnostics failed:', error);\n\n      // Add error message\n      const errorMessage = {\n        id: Date.now(),\n        content: \"Diagnostics failed. Please check your network connection and browser console for details.\",\n        sender: 'System',\n        timestamp: new Date().toISOString(),\n        isCurrentUser: false,\n        isDiagnostic: true\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setDiagnosticMode(false);\n    }\n  };\n\n  // Fetch messages when component mounts\n  useEffect(() => {\n    if (!isAuthenticated) return;\n    const fetchMessages = async () => {\n      try {\n        setLoading(true);\n        const data = await getChatHistory();\n        if (Array.isArray(data) && data.length > 0) {\n          setMessages(data);\n          // If we got history, we're online\n          setConnectionStatus('online');\n        } else if (messages.length === 0) {\n          // Add a welcome message if we don't have any messages\n          setMessages([{\n            id: Date.now(),\n            content: \"Hello! I'm the AI Assistant powered by Azure OpenAI. How can I help you today?\",\n            sender: 'Azure AI',\n            timestamp: new Date().toISOString(),\n            isCurrentUser: false\n          }]);\n\n          // Try to connect to backend to set proper status\n          await testBackendConnection();\n        }\n      } catch (error) {\n        console.error(\"Failed to fetch messages:\", error);\n\n        // If we've tried less than 3 times, attempt to test connectivity again\n        if (retryCount < 3) {\n          setRetryCount(prevCount => prevCount + 1);\n          await testBackendConnection();\n        } else {\n          setConnectionStatus('offline');\n        }\n\n        // If no messages are present, add a welcome message\n        if (messages.length === 0) {\n          setMessages([{\n            id: Date.now(),\n            content: \"Hello! I'm the AI Assistant powered by Azure OpenAI. I might be operating in offline mode, but I'll do my best to assist you.\",\n            sender: 'Azure AI',\n            timestamp: new Date().toISOString(),\n            isCurrentUser: false\n          }]);\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchMessages();\n\n    // We'll also explicitly test the connection\n    const checkConnection = async () => {\n      await testBackendConnection();\n    };\n\n    // Check connection every 30 seconds\n    const intervalId = setInterval(checkConnection, 30000);\n\n    // Initial connection check\n    checkConnection();\n    return () => clearInterval(intervalId);\n  }, [isAuthenticated, retryCount]);\n\n  // Scroll to bottom when new messages arrive\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n\n  // Send a message to the AI\n  const handleSendMessage = async () => {\n    if (!inputMessage.trim()) return;\n\n    // Add user message to chat\n    const userMessage = {\n      id: Date.now(),\n      content: inputMessage,\n      sender: userProfile && (userProfile.name || userProfile.username) || 'You',\n      timestamp: new Date().toISOString(),\n      isCurrentUser: true\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    setInputMessage('');\n    setIsProcessing(true);\n\n    // Add temporary \"thinking\" message\n    const thinkingId = Date.now() + 1;\n    setMessages(prevMessages => [...prevMessages, {\n      id: thinkingId,\n      content: '...',\n      sender: 'Azure AI',\n      timestamp: new Date().toISOString(),\n      isCurrentUser: false,\n      isThinking: true\n    }]);\n    try {\n      // Send to backend\n      const response = await sendChatMessage(inputMessage);\n\n      // Remove temporary thinking message\n      setMessages(prevMessages => prevMessages.filter(msg => msg.id !== thinkingId));\n      if (response.success) {\n        // Add AI response to chat\n        const aiMessage = {\n          id: Date.now() + 2,\n          content: response.ai_response,\n          sender: 'Azure AI',\n          timestamp: new Date().toISOString(),\n          isCurrentUser: false,\n          sources: response.sources\n        };\n        setMessages(prevMessages => [...prevMessages, aiMessage]);\n        setConnectionStatus('online');\n      } else if (response.authError) {\n        // Handle authentication errors\n        setAuthError(`Authentication error: ${response.message}`);\n        setTimeout(() => handleLogout(), 3000);\n      } else {\n        // Handle other errors\n        const errorMessage = {\n          id: Date.now() + 2,\n          content: \"I'm having trouble connecting to the server. Please try again later.\",\n          sender: 'Azure AI',\n          timestamp: new Date().toISOString(),\n          isCurrentUser: false\n        };\n        setMessages(prevMessages => [...prevMessages, errorMessage]);\n        setConnectionStatus('offline');\n      }\n    } catch (error) {\n      console.error('Error sending message:', error);\n\n      // Remove temporary thinking message\n      setMessages(prevMessages => prevMessages.filter(msg => msg.id !== thinkingId));\n\n      // Add error message\n      const errorMessage = {\n        id: Date.now() + 2,\n        content: \"An error occurred while processing your request. Please try again.\",\n        sender: 'Azure AI',\n        timestamp: new Date().toISOString(),\n        isCurrentUser: false\n      };\n      setMessages(prevMessages => [...prevMessages, errorMessage]);\n      setConnectionStatus('offline');\n\n      // Handle auth errors\n      if (error.response && (error.response.status === 401 || error.response.status === 403)) {\n        var _error$response$data3;\n        setAuthError('Authentication error: ' + (((_error$response$data3 = error.response.data) === null || _error$response$data3 === void 0 ? void 0 : _error$response$data3.detail) || 'Invalid token'));\n        setTimeout(() => handleLogout(), 3000);\n      }\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-spinner\",\n      children: \"Loading chat...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Redirect to login if not authenticated\n  if (!isAuthenticated) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Get display name - first from profile, then session, then fallback\n  const displayName = userProfile && (userProfile.name || userProfile.username) || sessionStorage.getItem('userName') || sessionStorage.getItem('lastLoginEmail') || 'User';\n  const firstName = displayName.split(' ')[0];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Chat with Azure AI\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connection-status\",\n        children: connectionStatus === 'online' ? /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"status-online\",\n          children: \"\\u25CF Azure Online\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 13\n        }, this) : connectionStatus === 'offline' ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"offline-notice\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"status-offline\",\n            children: \"\\u25CF Azure Offline\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"retry-button\",\n            onClick: testBackendConnection,\n            disabled: connectionStatus === 'checking',\n            children: connectionStatus === 'checking' ? 'Checking...' : 'Retry Connection'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 400,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"status-checking\",\n          children: \"\\u25CF Checking Connection...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 7\n    }, this), authError && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"auth-error-notice\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: authError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Redirecting to login page...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-container\",\n      children: [messages.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-messages\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Hello \", firstName, \", welcome to the AI Assistant!\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"hint\",\n          children: \"Try asking: \\\"What can this application do for me?\\\" or \\\"Tell me about this project\\\"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 11\n      }, this) : messages.map(msg => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.isCurrentUser ? 'message-mine' : 'message-other'} ${msg.isThinking ? 'thinking' : ''} ${msg.isDiagnostic ? 'diagnostic' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-sender\",\n          children: msg.isCurrentUser ? (userProfile === null || userProfile === void 0 ? void 0 : userProfile.name) || sessionStorage.getItem('userName') || displayName : msg.sender\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 433,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: [msg.isThinking ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"thinking-indicator\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Thinking\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 441,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"dot\",\n              children: \".\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 442,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"dot\",\n              children: \".\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 443,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"dot\",\n              children: \".\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 444,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 440,\n            columnNumber: 19\n          }, this) : msg.content, msg.sources && msg.sources.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-sources\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"sources-title\",\n              children: \"Sources:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 451,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: msg.sources.map((source, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [source.title || source.url || source.path || \"Reference document\", source.url && /*#__PURE__*/_jsxDEV(\"a\", {\n                  href: source.url,\n                  target: \"_blank\",\n                  rel: \"noopener noreferrer\",\n                  children: \" (link)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 456,\n                  columnNumber: 42\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 454,\n                columnNumber: 25\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 452,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 450,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 438,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-time\",\n          children: new Date(msg.timestamp).toLocaleTimeString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 463,\n          columnNumber: 15\n        }, this)]\n      }, msg.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSendMessage,\n      className: \"message-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputMessage,\n        onChange: e => setInputMessage(e.target.value),\n        placeholder: \"Ask me anything...\",\n        className: \"message-input\",\n        disabled: isProcessing || connectionStatus === 'offline' || authError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 473,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: `send-button ${isProcessing ? 'disabled' : ''}`,\n        disabled: isProcessing || !inputMessage.trim() || connectionStatus === 'offline' || authError,\n        children: isProcessing ? 'Sending...' : 'Send'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 472,\n      columnNumber: 7\n    }, this), connectionStatus === 'offline' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"offline-notice\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"You're currently disconnected from Azure OpenAI services. The assistant will provide general responses without accessing the full knowledge base.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 492,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"offline-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => testBackendConnection(),\n          className: \"retry-button\",\n          disabled: isProcessing || diagnosticMode,\n          children: \"Retry Azure Connection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 494,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: runDiagnostics,\n          className: \"diagnostic-button\",\n          disabled: isProcessing || diagnosticMode,\n          children: diagnosticMode ? 'Running Diagnostics...' : 'Run API Diagnostics'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 493,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"troubleshooting-tips\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"tips-header\",\n          children: \"Troubleshooting Tips:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 510,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Ensure your Django backend server is running\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 512,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Check if Azure OpenAI services are properly configured in the backend\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 513,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Look at the browser console for detailed error messages\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 514,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Verify Azure API keys in your backend environment variables\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 515,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 511,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 491,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 391,\n    columnNumber: 5\n  }, this);\n}\n_s(Chat, \"byqR/GJC36acZWZXhCP+MWGyqC8=\", false, function () {\n  return [useNavigate];\n});\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Navigate","useNavigate","getChatHistory","sendChatMessage","getUserProfile","checkApiEndpoints","jsxDEV","_jsxDEV","Chat","_s","messages","setMessages","inputMessage","setInputMessage","loading","setLoading","isAuthenticated","setIsAuthenticated","isProcessing","setIsProcessing","connectionStatus","setConnectionStatus","retryCount","setRetryCount","userProfile","setUserProfile","diagnosticMode","setDiagnosticMode","diagnosticResults","setDiagnosticResults","authError","setAuthError","messagesEndRef","navigate","handleLogout","console","log","localStorage","removeItem","sessionStorage","setTimeout","token","getItem","isJWT","startsWith","then","profile","name","setItem","username","email","split","displayName","charAt","toUpperCase","slice","catch","err","error","message","profile_picture","testBackendConnection","result","success","window","logoutTimeout","clearTimeout","response","status","_error$response$data","_error$response$data2","errorMsg","data","detail","runDiagnostics","results","diagMessage","id","Date","now","content","availableCount","totalCount","sender","timestamp","toISOString","isCurrentUser","isDiagnostic","prev","workingChatEndpoint","endpoints","find","e","available","method","url","includes","errorMessage","fetchMessages","Array","isArray","length","prevCount","checkConnection","intervalId","setInterval","clearInterval","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSendMessage","trim","userMessage","prevMessages","thinkingId","isThinking","filter","msg","aiMessage","ai_response","sources","_error$response$data3","className","children","fileName","_jsxFileName","lineNumber","columnNumber","to","firstName","onClick","disabled","map","source","index","title","path","href","target","rel","toLocaleTimeString","ref","onSubmit","type","value","onChange","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/STSC/Downloads/Agent-Backend-main (3)/my-app/src/pages/Chat.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { Navigate, useNavigate } from 'react-router-dom';\r\nimport { getChatHistory, sendChatMessage, getUserProfile, checkApiEndpoints } from '../services/api';\r\nimport '../styles/Chat.css';\r\n\r\nfunction Chat() {\r\n  const [messages, setMessages] = useState([]);\r\n  const [inputMessage, setInputMessage] = useState('');\r\n  const [loading, setLoading] = useState(true);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [connectionStatus, setConnectionStatus] = useState('checking'); // 'checking', 'online', 'offline'\r\n  const [retryCount, setRetryCount] = useState(0);\r\n  const [userProfile, setUserProfile] = useState(null);\r\n  const [diagnosticMode, setDiagnosticMode] = useState(false);\r\n  const [diagnosticResults, setDiagnosticResults] = useState(null);\r\n  const [authError, setAuthError] = useState(null);\r\n  const messagesEndRef = useRef(null);\r\n  const navigate = useNavigate();\r\n  \r\n  // Handle user logout on authentication errors\r\n  const handleLogout = () => {\r\n    console.log('Logging out due to authentication error...');\r\n    // Clear all auth and user data\r\n    localStorage.removeItem('token');\r\n    \r\n    // Clear all session storage\r\n    sessionStorage.removeItem('lastLoginEmail');\r\n    sessionStorage.removeItem('userName');\r\n    sessionStorage.removeItem('userId');\r\n    \r\n    // Clear any user data in state\r\n    setUserProfile(null);\r\n    setIsAuthenticated(false);\r\n    setAuthError(null);\r\n    \r\n    console.log('All user data cleared, redirecting to login');\r\n    \r\n    // Redirect to login page after a brief delay\r\n    setTimeout(() => {\r\n      navigate('/login');\r\n    }, 100);\r\n  };\r\n  \r\n  // Check authentication first\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      setIsAuthenticated(true);\r\n      \r\n      // Check if token appears to be JWT format (starts with eyJ)\r\n      const isJWT = token.startsWith('eyJ');\r\n      console.log('Token appears to be JWT format:', isJWT);\r\n      \r\n      // Try to get user profile\r\n      getUserProfile()\r\n        .then(profile => {\r\n          console.log('Loaded user profile:', profile);\r\n          setUserProfile(profile);\r\n          \r\n          // Store user name in session storage with improved fallbacks\r\n          if (profile.name) {\r\n            sessionStorage.setItem('userName', profile.name);\r\n          } else if (profile.username) {\r\n            sessionStorage.setItem('userName', profile.username);\r\n          } else if (profile.email) {\r\n            // Extract username from email for better display\r\n            const username = profile.email.split('@')[0];\r\n            // Capitalize first letter for better presentation\r\n            const displayName = username.charAt(0).toUpperCase() + username.slice(1);\r\n            sessionStorage.setItem('userName', displayName);\r\n          }\r\n          \r\n          // Update email info if available\r\n          if (profile.email) {\r\n            sessionStorage.setItem('lastLoginEmail', profile.email);\r\n          }\r\n          \r\n          setAuthError(null); // Clear any auth errors\r\n        })\r\n        .catch(err => {\r\n          console.error('Failed to load profile:', err);\r\n          \r\n          // If we get a specific authentication error\r\n          if (err.message === 'Authentication required' || \r\n              err.message === 'Session expired. Please log in again.' ||\r\n              err.message === 'Authentication failed. Please log in again.') {\r\n            setAuthError(err.message);\r\n            // Delay logout to allow error to be displayed\r\n            setTimeout(() => handleLogout(), 3000);\r\n          } else {\r\n            // Use fallback data from session storage\r\n            const email = sessionStorage.getItem('lastLoginEmail');\r\n            const name = sessionStorage.getItem('userName');\r\n            \r\n            if (email || name) {\r\n              setUserProfile({\r\n                email: email || '',\r\n                name: name || 'User',\r\n                profile_picture: null\r\n              });\r\n            }\r\n          }\r\n        });\r\n    } else {\r\n      setIsAuthenticated(false);\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n  \r\n  // Test connectivity to backend\r\n  const testBackendConnection = async () => {\r\n    try {\r\n      setConnectionStatus('checking');\r\n      console.log('Testing backend connection...');\r\n      const result = await sendChatMessage('__test_connection__');\r\n      \r\n      if (result.success) {\r\n        console.log('Backend connection successful:', result.message || 'Connected');\r\n        setConnectionStatus('online');\r\n      } else if (result.authError) {\r\n        console.error('Authentication error during connection test:', result.message);\r\n        setAuthError(`Authentication error: ${result.message}`);\r\n        \r\n        // Clear any existing timeout\r\n        if (window.logoutTimeout) clearTimeout(window.logoutTimeout);\r\n        \r\n        // Set a new timeout for logout\r\n        window.logoutTimeout = setTimeout(() => handleLogout(), 3000);\r\n      } else {\r\n        setConnectionStatus('offline');\r\n        console.error('Backend connection test failed:', result.error);\r\n      }\r\n    } catch (error) {\r\n      setConnectionStatus('offline');\r\n      console.error('Error testing backend connection:', error);\r\n      \r\n      // Handle authentication errors\r\n      if (error.response && (error.response.status === 401 || error.response.status === 403)) {\r\n        const errorMsg = error.response.data?.detail || \r\n                        error.response.data?.message || \r\n                        'Invalid token';\r\n        setAuthError('Authentication error: ' + errorMsg);\r\n        \r\n        // Clear any existing timeout\r\n        if (window.logoutTimeout) clearTimeout(window.logoutTimeout);\r\n        \r\n        // Set a new timeout for logout\r\n        window.logoutTimeout = setTimeout(() => handleLogout(), 3000);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Function to run API diagnostics\r\n  const runDiagnostics = async () => {\r\n    setDiagnosticMode(true);\r\n    try {\r\n      const results = await checkApiEndpoints();\r\n      setDiagnosticResults(results);\r\n      \r\n      // Add a diagnostic message to the chat\r\n      const diagMessage = {\r\n        id: Date.now(),\r\n        content: `API Diagnostics: ${results.availableCount}/${results.totalCount} endpoints available. Check browser console for details.`,\r\n        sender: 'System',\r\n        timestamp: new Date().toISOString(),\r\n        isCurrentUser: false,\r\n        isDiagnostic: true\r\n      };\r\n      \r\n      setMessages(prev => [...prev, diagMessage]);\r\n      \r\n      // If we found working endpoints, try connecting again\r\n      if (results.availableCount > 0) {\r\n        const workingChatEndpoint = results.endpoints.find(\r\n          e => e.available && e.method === 'POST' && e.url.includes('/chat/')\r\n        );\r\n        \r\n        if (workingChatEndpoint) {\r\n          await testBackendConnection();\r\n        }\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('Diagnostics failed:', error);\r\n      \r\n      // Add error message\r\n      const errorMessage = {\r\n        id: Date.now(),\r\n        content: \"Diagnostics failed. Please check your network connection and browser console for details.\",\r\n        sender: 'System',\r\n        timestamp: new Date().toISOString(),\r\n        isCurrentUser: false,\r\n        isDiagnostic: true\r\n      };\r\n      \r\n      setMessages(prev => [...prev, errorMessage]);\r\n    } finally {\r\n      setDiagnosticMode(false);\r\n    }\r\n  };\r\n\r\n  // Fetch messages when component mounts\r\n  useEffect(() => {\r\n    if (!isAuthenticated) return;\r\n\r\n    const fetchMessages = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const data = await getChatHistory();\r\n        if (Array.isArray(data) && data.length > 0) {\r\n          setMessages(data);\r\n          // If we got history, we're online\r\n          setConnectionStatus('online');\r\n        } else if (messages.length === 0) {\r\n          // Add a welcome message if we don't have any messages\r\n          setMessages([{\r\n            id: Date.now(),\r\n            content: \"Hello! I'm the AI Assistant powered by Azure OpenAI. How can I help you today?\",\r\n            sender: 'Azure AI',\r\n            timestamp: new Date().toISOString(),\r\n            isCurrentUser: false\r\n          }]);\r\n          \r\n          // Try to connect to backend to set proper status\r\n          await testBackendConnection();\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Failed to fetch messages:\", error);\r\n        \r\n        // If we've tried less than 3 times, attempt to test connectivity again\r\n        if (retryCount < 3) {\r\n          setRetryCount(prevCount => prevCount + 1);\r\n          await testBackendConnection();\r\n        } else {\r\n          setConnectionStatus('offline');\r\n        }\r\n        \r\n        // If no messages are present, add a welcome message\r\n        if (messages.length === 0) {\r\n          setMessages([{\r\n            id: Date.now(),\r\n            content: \"Hello! I'm the AI Assistant powered by Azure OpenAI. I might be operating in offline mode, but I'll do my best to assist you.\",\r\n            sender: 'Azure AI',\r\n            timestamp: new Date().toISOString(),\r\n            isCurrentUser: false\r\n          }]);\r\n        }\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchMessages();\r\n    \r\n    // We'll also explicitly test the connection\r\n    const checkConnection = async () => {\r\n      await testBackendConnection();\r\n    };\r\n    \r\n    // Check connection every 30 seconds\r\n    const intervalId = setInterval(checkConnection, 30000); \r\n    \r\n    // Initial connection check\r\n    checkConnection();\r\n    \r\n    return () => clearInterval(intervalId);\r\n  }, [isAuthenticated, retryCount]);\r\n  \r\n  // Scroll to bottom when new messages arrive\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [messages]);\r\n  \r\n  // Send a message to the AI\r\n  const handleSendMessage = async () => {\r\n    if (!inputMessage.trim()) return;\r\n    \r\n    // Add user message to chat\r\n    const userMessage = {\r\n      id: Date.now(),\r\n      content: inputMessage,\r\n      sender: userProfile && (userProfile.name || userProfile.username) || 'You',\r\n      timestamp: new Date().toISOString(),\r\n      isCurrentUser: true\r\n    };\r\n    \r\n    setMessages(prevMessages => [...prevMessages, userMessage]);\r\n    setInputMessage('');\r\n    setIsProcessing(true);\r\n    \r\n    // Add temporary \"thinking\" message\r\n    const thinkingId = Date.now() + 1;\r\n    setMessages(prevMessages => [\r\n      ...prevMessages, \r\n      {\r\n        id: thinkingId,\r\n        content: '...',\r\n        sender: 'Azure AI',\r\n        timestamp: new Date().toISOString(),\r\n        isCurrentUser: false,\r\n        isThinking: true\r\n      }\r\n    ]);\r\n    \r\n    try {\r\n      // Send to backend\r\n      const response = await sendChatMessage(inputMessage);\r\n      \r\n      // Remove temporary thinking message\r\n      setMessages(prevMessages => \r\n        prevMessages.filter(msg => msg.id !== thinkingId)\r\n      );\r\n      \r\n      if (response.success) {\r\n        // Add AI response to chat\r\n        const aiMessage = {\r\n          id: Date.now() + 2,\r\n          content: response.ai_response,\r\n          sender: 'Azure AI',\r\n          timestamp: new Date().toISOString(),\r\n          isCurrentUser: false,\r\n          sources: response.sources\r\n        };\r\n        setMessages(prevMessages => [...prevMessages, aiMessage]);\r\n        setConnectionStatus('online');\r\n      } else if (response.authError) {\r\n        // Handle authentication errors\r\n        setAuthError(`Authentication error: ${response.message}`);\r\n        setTimeout(() => handleLogout(), 3000);\r\n      } else {\r\n        // Handle other errors\r\n        const errorMessage = {\r\n          id: Date.now() + 2,\r\n          content: \"I'm having trouble connecting to the server. Please try again later.\",\r\n          sender: 'Azure AI',\r\n          timestamp: new Date().toISOString(),\r\n          isCurrentUser: false\r\n        };\r\n        setMessages(prevMessages => [...prevMessages, errorMessage]);\r\n        setConnectionStatus('offline');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error sending message:', error);\r\n      \r\n      // Remove temporary thinking message\r\n      setMessages(prevMessages => \r\n        prevMessages.filter(msg => msg.id !== thinkingId)\r\n      );\r\n      \r\n      // Add error message\r\n      const errorMessage = {\r\n        id: Date.now() + 2,\r\n        content: \"An error occurred while processing your request. Please try again.\",\r\n        sender: 'Azure AI',\r\n        timestamp: new Date().toISOString(),\r\n        isCurrentUser: false\r\n      };\r\n      setMessages(prevMessages => [...prevMessages, errorMessage]);\r\n      setConnectionStatus('offline');\r\n      \r\n      // Handle auth errors\r\n      if (error.response && (error.response.status === 401 || error.response.status === 403)) {\r\n        setAuthError('Authentication error: ' + (error.response.data?.detail || 'Invalid token'));\r\n        setTimeout(() => handleLogout(), 3000);\r\n      }\r\n    } finally {\r\n      setIsProcessing(false);\r\n    }\r\n  };\r\n  \r\n  if (loading) {\r\n    return <div className=\"loading-spinner\">Loading chat...</div>;\r\n  }\r\n\r\n  // Redirect to login if not authenticated\r\n  if (!isAuthenticated) {\r\n    return <Navigate to=\"/login\" />;\r\n  }\r\n  \r\n  // Get display name - first from profile, then session, then fallback\r\n  const displayName = \r\n    (userProfile && (userProfile.name || userProfile.username)) || \r\n    sessionStorage.getItem('userName') ||\r\n    sessionStorage.getItem('lastLoginEmail') || \r\n    'User';\r\n    \r\n  const firstName = displayName.split(' ')[0];\r\n  \r\n  return (\r\n    <div className=\"chat-container\">\r\n      <div className=\"chat-header\">\r\n        <h2>Chat with Azure AI</h2>\r\n        <div className=\"connection-status\">\r\n          {connectionStatus === 'online' ? (\r\n            <span className=\"status-online\">● Azure Online</span>\r\n          ) : connectionStatus === 'offline' ? (\r\n            <div className=\"offline-notice\">\r\n              <span className=\"status-offline\">● Azure Offline</span>\r\n              <button \r\n                className=\"retry-button\" \r\n                onClick={testBackendConnection}\r\n                disabled={connectionStatus === 'checking'}\r\n              >\r\n                {connectionStatus === 'checking' ? 'Checking...' : 'Retry Connection'}\r\n              </button>\r\n            </div>\r\n          ) : (\r\n            <span className=\"status-checking\">● Checking Connection...</span>\r\n          )}\r\n        </div>\r\n      </div>\r\n      \r\n      {authError && (\r\n        <div className=\"auth-error-notice\">\r\n          <p>{authError}</p>\r\n          <p>Redirecting to login page...</p>\r\n        </div>\r\n      )}\r\n      \r\n      <div className=\"messages-container\">\r\n        {messages.length === 0 ? (\r\n          <div className=\"no-messages\">\r\n            <p>Hello {firstName}, welcome to the AI Assistant!</p>\r\n            <p className=\"hint\">Try asking: \"What can this application do for me?\" or \"Tell me about this project\"</p>\r\n          </div>\r\n        ) : (\r\n          messages.map((msg) => (\r\n            <div \r\n              key={msg.id} \r\n              className={`message ${msg.isCurrentUser ? 'message-mine' : 'message-other'} ${msg.isThinking ? 'thinking' : ''} ${msg.isDiagnostic ? 'diagnostic' : ''}`}\r\n            >\r\n              <div className=\"message-sender\">\r\n                {msg.isCurrentUser \r\n                  ? (userProfile?.name || sessionStorage.getItem('userName') || displayName)\r\n                  : msg.sender}\r\n              </div>\r\n              <div className=\"message-content\">\r\n                {msg.isThinking ? (\r\n                  <div className=\"thinking-indicator\">\r\n                    <span>Thinking</span>\r\n                    <span className=\"dot\">.</span>\r\n                    <span className=\"dot\">.</span>\r\n                    <span className=\"dot\">.</span>\r\n                  </div>\r\n                ) : (\r\n                  msg.content\r\n                )}\r\n                {msg.sources && msg.sources.length > 0 && (\r\n                  <div className=\"message-sources\">\r\n                    <p className=\"sources-title\">Sources:</p>\r\n                    <ul>\r\n                      {msg.sources.map((source, index) => (\r\n                        <li key={index}>\r\n                          {source.title || source.url || source.path || \"Reference document\"}\r\n                          {source.url && <a href={source.url} target=\"_blank\" rel=\"noopener noreferrer\"> (link)</a>}\r\n                        </li>\r\n                      ))}\r\n                    </ul>\r\n                  </div>\r\n                )}\r\n              </div>\r\n              <div className=\"message-time\">\r\n                {new Date(msg.timestamp).toLocaleTimeString()}\r\n              </div>\r\n            </div>\r\n          ))\r\n        )}\r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n      \r\n      <form onSubmit={handleSendMessage} className=\"message-form\">\r\n        <input\r\n          type=\"text\"\r\n          value={inputMessage}\r\n          onChange={(e) => setInputMessage(e.target.value)}\r\n          placeholder=\"Ask me anything...\"\r\n          className=\"message-input\"\r\n          disabled={isProcessing || connectionStatus === 'offline' || authError}\r\n        />\r\n        <button \r\n          type=\"submit\" \r\n          className={`send-button ${isProcessing ? 'disabled' : ''}`}\r\n          disabled={isProcessing || !inputMessage.trim() || connectionStatus === 'offline' || authError}\r\n        >\r\n          {isProcessing ? 'Sending...' : 'Send'}\r\n        </button>\r\n      </form>\r\n      \r\n      {connectionStatus === 'offline' && (\r\n        <div className=\"offline-notice\">\r\n          <p>You're currently disconnected from Azure OpenAI services. The assistant will provide general responses without accessing the full knowledge base.</p>\r\n          <div className=\"offline-actions\">\r\n            <button \r\n              onClick={() => testBackendConnection()} \r\n              className=\"retry-button\"\r\n              disabled={isProcessing || diagnosticMode}\r\n            >\r\n              Retry Azure Connection\r\n            </button>\r\n            <button \r\n              onClick={runDiagnostics}\r\n              className=\"diagnostic-button\"\r\n              disabled={isProcessing || diagnosticMode}\r\n            >\r\n              {diagnosticMode ? 'Running Diagnostics...' : 'Run API Diagnostics'}\r\n            </button>\r\n          </div>\r\n          <div className=\"troubleshooting-tips\">\r\n            <p className=\"tips-header\">Troubleshooting Tips:</p>\r\n            <ul>\r\n              <li>Ensure your Django backend server is running</li>\r\n              <li>Check if Azure OpenAI services are properly configured in the backend</li>\r\n              <li>Look at the browser console for detailed error messages</li>\r\n              <li>Verify Azure API keys in your backend environment variables</li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}